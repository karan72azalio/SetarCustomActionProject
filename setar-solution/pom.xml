<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.nokia.nsw.uiv.setar</groupId>
    <artifactId>setar-solution</artifactId>
    <packaging>jar</packaging>
    <version>22.9.0</version>
    <name>setar-solution</name>
    <description>Generated by uiv-codegen</description>
    <url>http://maven.apache.org</url>
    <parent>
	<groupId>com.nokia.nsw.uiv.setar</groupId>
    	<artifactId>setar</artifactId>
	<version>22.9.0</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-staticdocs</artifactId>
            <version>2.6.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-jsonSchema</artifactId>
            <version>${jackson.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.robwin</groupId>
            <artifactId>assertj-swagger</artifactId>
            <version>0.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
            <version>${swagger2markup.version}</version>
            <scope>test</scope>
    </dependency>
    <dependency>
		<groupId>com.nokia.nsw.uiv.setar</groupId>
    <artifactId>setar-model</artifactId>
	    <version>22.9.0</version>
        </dependency>

    </dependencies>


    <build>
        <plugins>
		<!-- use this for add custom dependencies so that they can be bundled for installation -->

		<plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <!--execution>
                                <id>copy-solution</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
					<artifactItem>
						<groupId>commons-net</groupId>
            					<artifactId>commons-net</artifactId>
            					<version>3.6</version>
						<type>jar</type>
						<overWrite>false</overWrite>
						<outputDirectory>${project.basedir}/target/classes/lib</outputDirectory>
					</artifactItem>
					<artifactItem>	
            					<groupId>com.github.seancfoley</groupId>
            					<artifactId>ipaddress</artifactId>
            					<version>5.2.1</version>
						<type>jar</type>
						<overWrite>false</overWrite>
						<outputDirectory>${project.basedir}/target/classes/lib</outputDirectory>
					</artifactItem>
                                    </artifactItems>
                                    <overWriteReleases>false</overWriteReleases>
                                    <overWriteSnapshots>false</overWriteSnapshots>
                                </configuration>
                            </execution-->
                        </executions>
		</plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
		<version>1.12</version>
		<executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.basedir}/target/generated-sources</source>
                            </sources>
                        </configuration>
		</execution>
		<execution>
                        <id>generate-resources</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
				<resources>
					<resource>
						<directory>${project.basedir}/target/generated-resources</directory>
					</resource>
                            </resources>
                        </configuration>
		</execution>
		<execution>
                        <id>generate-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
				    <source>${project.basedir}/target/generated-test-sources</source>
                            </sources>
                        </configuration>
		</execution>
		<execution>
                        <id>generate-test-resources</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
			<configuration>
				<resources>
					<resource>
						<directory>${project.basedir}/target/generated-test-resources</directory>
					</resource>
                            </resources>

			</configuration>
                   </execution>
	</executions>
            </plugin>
           
            <!-- unified inventory maven plugin -->
            <plugin>
                <groupId>com.nokia.nsw.uiv</groupId>
                <artifactId>uiv-maven-plugin</artifactId>
		<version>23.1.0-648</version>
		<dependencies>
			<dependency>
				<groupId>com.nokia.nsw.uiv.setar</groupId>
    				<artifactId>setar-model</artifactId>
	    			<version>22.9.0</version>
        		</dependency>
    		</dependencies>
                <executions>
                    <execution>
                        <id>generate-model</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate-solution</goal>
                        </goals>
                        <configuration>
                            <basePackage>com.nokia</basePackage>
			    <outputDirectory>${project.basedir}/target/generated-sources</outputDirectory>
			    <resourcesOutputDirectory>${project.basedir}/target/generated-resources</resourcesOutputDirectory>
			    <testOutputDirectory>${project.basedir}/target/generated-test-sources</testOutputDirectory>
			    <testResourcesOutputDirectory>${project.basedir}/target/generated-test-resources</testResourcesOutputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-metadata</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>generatemetadata-solution</goal>
                        </goals>
                        <configuration>
                            <inputDirectory>${project.basedir}/target/classes</inputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <outputDirectory>${basedir}/target/scripts/
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/resources/scripts/</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-applicationprops</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <outputDirectory>${project.basedir}/target/classes</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/resources</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>application.properties</include>
                                        <include>index.adoc</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
		</execution>
		<execution>
			<id>copy-jar</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
			    <outputDirectory>../target/uiv-lib/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/target</directory>
                                   <includes>
                                        <include>${project.build.finalName}.jar</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
		</execution>
		<execution>
			<id>copy-jar-lib</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
			    <outputDirectory>../../target/uiv-lib/</outputDirectory>
                            <resources>
                                <resource>
					<directory>${project.basedir}/target/classes/lib</directory>
                                   <includes>
                                        <include>*.jar</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
			
                </executions>
            </plugin>
			
			  <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>copy-and-rename-file</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>rename</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <sourceFile>${project.basedir}/target/classes/scripts/postStartup.sh</sourceFile>
                                    <destinationFile>${project.basedir}/target/classes/scripts/${techtemplate.name}-${techtemplate.api.version}_postStartup.sh</destinationFile>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			
        </plugins>
    </build>

    <profiles>        
        <profile>
            <id>releases</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jfrog.buildinfo</groupId>
                        <artifactId>artifactory-maven-plugin</artifactId>
                        <version>2.6.1</version>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>build-info</id>
                                <goals>
                                    <goal>publish</goal>
                                </goals>
                                <configuration>
                                    <deployProperties>
                                    </deployProperties>
                                    <artifactory>
                                        <includeEnvVars>true</includeEnvVars>
                                        <timeoutSec>60</timeoutSec>
                                        <propertiesFile>publish.properties</propertiesFile>
                                    </artifactory>
                                    <publisher>
                                        <contextUrl>${artifactory.url}</contextUrl>
                                        <username>${artifactory.username}</username>
                                        <password>${artifactory.password}</password>
					<repoKey>${artifactory.repoKey}</repoKey>
                                    </publisher>
                                    <buildInfo>
                                        <buildNumber>{{BUILD_NUMBER}}</buildNumber>
                                        <buildUrl>{{BUILD_URL}}</buildUrl>
                                    </buildInfo>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docgen-html</id>
            <activation>
                <property><name>!skipTests</name></property>
            </activation>
            <properties>
                <swagger2markup.version>1.2.0</swagger2markup.version>
                <jackson.version>2.13.1</jackson.version>
                <asciidoctor.input.directory>${project.basedir}/src/test/resources</asciidoctor.input.directory>

                <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
                <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
                <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
                <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
                <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

                <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>

                <springfox.version>2.9.2</springfox.version>

                <maven.test.skip>false</maven.test.skip>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven.compiler.version}</version>
                        <configuration>
                            <compilerVersion>${java.version}</compilerVersion>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <encoding>UTF-8</encoding>
                            <!-- prevents endPosTable exception for maven compile -->
                            <useIncrementalCompilation>false</useIncrementalCompilation>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- First, use the swagger2markup plugin to generate asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.version}</version>
						
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${generated.asciidoc.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>

                                <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>

                                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
                                <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run the generated asciidoc through Asciidoctor to generate
                         other documentation types, such as PDFs or HTML5 -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>2.1.0</version>
                        <!-- Include Asciidoctor PDF for pdf generation -->
                        
                        <!-- Configure generic document generation settings -->
                        <configuration>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <attributes>
                                <doctype>book</doctype>
                                <toc>left</toc>
                                <toclevels>3</toclevels>
                                <numbered></numbered>
                                <hardbreaks></hardbreaks>
                                <sectlinks></sectlinks>
                                <sectanchors></sectanchors>
                                <generated>${generated.asciidoc.directory}</generated>
                            </attributes>
                        </configuration>
                        <!-- Since each execution can only handle one backend, run
                             separate executions for each desired output type -->
                        <executions>
                            <execution>
                                <id>output-html</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>html5</backend>
                                    <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                                </configuration>
                            </execution>


                        </executions>
                    </plugin>
                    <!-- copy dependencies to the lib directory -->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- copy the generated documents -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${asciidoctor.html.output.directory}</directory>
                                        </resource>
                                        <resource>
                                            <directory>${asciidoctor.pdf.output.directory}</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>

        <profile>
            <id>docgen-pdf</id>
			<!--<activation>
                <property><name>!skipTests</name></property>
            </activation>-->
            <properties>
                <swagger2markup.version>1.2.0</swagger2markup.version>
                <jackson.version>2.13.1</jackson.version>
                <asciidoctor.input.directory>${project.basedir}/src/test/resources</asciidoctor.input.directory>

                <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
                <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
                <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
                <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
                <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

                <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>

                <springfox.version>2.9.2</springfox.version>

                <maven.test.skip>false</maven.test.skip>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven.compiler.version}</version>
                        <configuration>
                            <compilerVersion>${java.version}</compilerVersion>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <encoding>UTF-8</encoding>
                            <!-- prevents endPosTable exception for maven compile -->
                            <useIncrementalCompilation>false</useIncrementalCompilation>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- First, use the swagger2markup plugin to generate asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.version}</version>
						
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${generated.asciidoc.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>

                                <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>

                                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
                                <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run the generated asciidoc through Asciidoctor to generate
                         other documentation types, such as PDFs or HTML5 -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>2.1.0</version>
                        <!-- Include Asciidoctor PDF for pdf generation -->
						
			<dependencies>
				<dependency>
                    <groupId>org.asciidoctor</groupId>
                    <artifactId>asciidoctorj-pdf</artifactId>
                    <version>1.5.0</version>
                </dependency>
          </dependencies>
						
                        <!-- Configure generic document generation settings -->
                        <configuration>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <attributes>
                                <doctype>book</doctype>
                                <toc>left</toc>
                                <toclevels>3</toclevels>
                                <numbered></numbered>
                                <hardbreaks></hardbreaks>
                                <sectlinks></sectlinks>
                                <sectanchors></sectanchors>
                                <generated>${generated.asciidoc.directory}</generated>
                            </attributes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>output-pdf</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>pdf</backend>
                                    <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
								<attributes>
									<source-highlighter>coderay</source-highlighter>
									<icons>font</icons>
									<pagenums/>
									<toc/>
									<idprefix/>
									<idseparator>-</idseparator>
                                </attributes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- copy dependencies to the lib directory -->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- copy the generated documents -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${asciidoctor.html.output.directory}</directory>
                                        </resource>
                                        <resource>
                                            <directory>${asciidoctor.pdf.output.directory}</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>
    </profiles>
</project>
