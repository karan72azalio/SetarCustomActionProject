// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common.party;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.Resource;
import com.nokia.nsw.uiv.model.service.Service;
import com.nokia.nsw.uiv.model.service.ServiceConsumer;
import com.nokia.nsw.uiv.model.service.Subscription;
import com.setar.uiv.model.product.Product;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.party.Customer.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.party.Customer")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.party.Customer"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.party.Customer"
)
public class Customer extends PartyRole {
    @JsonFilter("subscription")
    @Relationship(
            type = "HAS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Subscription]"
    )
    protected Set<Subscription> subscription = new HashSet<>();

    @JsonFilter("serviceConsumer")
    @Relationship(
            type = "SUBSCRIBES_SERVICES_FOR",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.ServiceConsumer]"
    )
    protected Set<ServiceConsumer> serviceConsumer = new HashSet<>();

    @JsonFilter("usedResource")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> usedResource = new HashSet<>();

    @JsonFilter("ownedResource")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> ownedResource = new HashSet<>();

    @JsonFilter("service")
    @Relationship(
            type = "SUBSCRIBES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> service = new HashSet<>();

    @JsonFilter("usedService")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> usedService = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification customerSpecification;

    @JsonFilter("product")
    @Relationship(
            type = "SUBSCRIBES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.setar.uiv.model.product.Product]"
    )
    protected Set<Product> product = new HashSet<>();

    public void addSubscription(Subscription element) {
        this.setAssocModified(true);
        this.subscription.add(element);
        if (null != element && (null == element.getCustomer() || !element.getCustomer().equals(this))) {
            this.set_type(this.get_type());
            element.setCustomer(this);
        }
    }

    public void removeSubscription(Subscription element) {
        this.setAssocModified(true);
        if (null != element && null != this.subscription  && this.subscription.remove(element) && null != element.getCustomer()) {
            element.setCustomer(null);
        }
    }

    public Set<Subscription> getSubscription() {
        return this.subscription;
    }

    public void setSubscription(Set<Subscription> subscription) {
        this.setAssocModified(true);
        if (null != this.subscription) {
            List<Subscription> toDelete = new ArrayList<>(this.subscription);
            boolean setToNull = null == subscription || subscription.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(subscription);
            }
            for (Subscription each : toDelete) {
                each.setCustomer(null);
            }
        }
        this.subscription=subscription;
        if (null != subscription) {
            for (Subscription each: subscription) {
                if (null != each && ( null == each.getCustomer() || !each.getCustomer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setCustomer(this);
                }
            }
        }
    }

    public void addServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        this.serviceConsumer.add(element);
        if (null != element && (null == element.getCustomer() || !element.getCustomer().equals(this))) {
            this.set_type(this.get_type());
            element.setCustomer(this);
        }
    }

    public void removeServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        if (null != element && null != this.serviceConsumer  && this.serviceConsumer.remove(element) && null != element.getCustomer()) {
            element.setCustomer(null);
        }
    }

    public Set<ServiceConsumer> getServiceConsumer() {
        return this.serviceConsumer;
    }

    public void setServiceConsumer(Set<ServiceConsumer> serviceConsumer) {
        this.setAssocModified(true);
        if (null != this.serviceConsumer) {
            List<ServiceConsumer> toDelete = new ArrayList<>(this.serviceConsumer);
            boolean setToNull = null == serviceConsumer || serviceConsumer.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(serviceConsumer);
            }
            for (ServiceConsumer each : toDelete) {
                each.setCustomer(null);
            }
        }
        this.serviceConsumer=serviceConsumer;
        if (null != serviceConsumer) {
            for (ServiceConsumer each: serviceConsumer) {
                if (null != each && ( null == each.getCustomer() || !each.getCustomer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setCustomer(this);
                }
            }
        }
    }

    public void addUsedResource(Resource element) {
        this.setAssocModified(true);
        this.usedResource.add(element);
        if (null != element && (null == element.getUsingCustomer() || !element.getUsingCustomer().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingCustomer()) {
                element.setUsingCustomer(new HashSet<>());
            }
            element.addUsingCustomer(this);
        }
    }

    public void removeUsedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedResource  && this.usedResource.remove(element) && null != element.getUsingCustomer() && element.getUsingCustomer().contains(this)) {
            element.getUsingCustomer().remove(this);
        }
    }

    public Set<Resource> getUsedResource() {
        return this.usedResource;
    }

    public void setUsedResource(Set<Resource> usedResource) {
        this.setAssocModified(true);
        if (null != this.usedResource) {
            List<Resource> toDelete = new ArrayList<>(this.usedResource);
            boolean setToNull = null == usedResource || usedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getUsingCustomer()) {
                    each.getUsingCustomer().remove(this);
                }
            }
        }
        this.usedResource=usedResource;
        if (null != usedResource) {
            for (Resource each: usedResource) {
                if (null != each && (null == each.getUsingCustomer() || !each.getUsingCustomer().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingCustomer()) {
                        each.setUsingCustomer(new HashSet<>());
                    }
                    each.addUsingCustomer(this);
                }
            }
        }
    }

    public void addOwnedResource(Resource element) {
        this.setAssocModified(true);
        this.ownedResource.add(element);
        if (null != element && (null == element.getOwningCustomer() || !element.getOwningCustomer().equals(this))) {
            this.set_type(this.get_type());
            element.setOwningCustomer(this);
        }
    }

    public void removeOwnedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.ownedResource  && this.ownedResource.remove(element) && null != element.getOwningCustomer()) {
            element.setOwningCustomer(null);
        }
    }

    public Set<Resource> getOwnedResource() {
        return this.ownedResource;
    }

    public void setOwnedResource(Set<Resource> ownedResource) {
        this.setAssocModified(true);
        if (null != this.ownedResource) {
            List<Resource> toDelete = new ArrayList<>(this.ownedResource);
            boolean setToNull = null == ownedResource || ownedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(ownedResource);
            }
            for (Resource each : toDelete) {
                each.setOwningCustomer(null);
            }
        }
        this.ownedResource=ownedResource;
        if (null != ownedResource) {
            for (Resource each: ownedResource) {
                if (null != each && ( null == each.getOwningCustomer() || !each.getOwningCustomer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOwningCustomer(this);
                }
            }
        }
    }

    public void addService(Service element) {
        this.setAssocModified(true);
        this.service.add(element);
        if (null != element && (null == element.getCustomer() || !element.getCustomer().equals(this))) {
            this.set_type(this.get_type());
            element.setCustomer(this);
        }
    }

    public void removeService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.service  && this.service.remove(element) && null != element.getCustomer()) {
            element.setCustomer(null);
        }
    }

    public Set<Service> getService() {
        return this.service;
    }

    public void setService(Set<Service> service) {
        this.setAssocModified(true);
        if (null != this.service) {
            List<Service> toDelete = new ArrayList<>(this.service);
            boolean setToNull = null == service || service.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(service);
            }
            for (Service each : toDelete) {
                each.setCustomer(null);
            }
        }
        this.service=service;
        if (null != service) {
            for (Service each: service) {
                if (null != each && ( null == each.getCustomer() || !each.getCustomer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setCustomer(this);
                }
            }
        }
    }

    public void addUsedService(Service element) {
        this.setAssocModified(true);
        this.usedService.add(element);
        if (null != element && (null == element.getUsingCustomer() || !element.getUsingCustomer().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingCustomer()) {
                element.setUsingCustomer(new HashSet<>());
            }
            element.addUsingCustomer(this);
        }
    }

    public void removeUsedService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedService  && this.usedService.remove(element) && null != element.getUsingCustomer() && element.getUsingCustomer().contains(this)) {
            element.getUsingCustomer().remove(this);
        }
    }

    public Set<Service> getUsedService() {
        return this.usedService;
    }

    public void setUsedService(Set<Service> usedService) {
        this.setAssocModified(true);
        if (null != this.usedService) {
            List<Service> toDelete = new ArrayList<>(this.usedService);
            boolean setToNull = null == usedService || usedService.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedService);
            }
            for (Service each : toDelete) {
                if (null != each.getUsingCustomer()) {
                    each.getUsingCustomer().remove(this);
                }
            }
        }
        this.usedService=usedService;
        if (null != usedService) {
            for (Service each: usedService) {
                if (null != each && (null == each.getUsingCustomer() || !each.getUsingCustomer().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingCustomer()) {
                        each.setUsingCustomer(new HashSet<>());
                    }
                    each.addUsingCustomer(this);
                }
            }
        }
    }

    public SchemaSpecification getCustomerSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.customerSpecification = new SchemaSpecification();
            this.customerSpecification.setId(this.getKind());
            this.customerSpecification.setName(this.getKind());
            this.customerSpecification.setReferredType(this.getKind());
            this.customerSpecification.setVersion(this.getSchemaVersion());
        }
        return this.customerSpecification;
    }

    public void setCustomerSpecification(SchemaSpecification customerSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != customerSpecification && null != customerSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(customerSpecification);
                    this.setKind(customerSpecification.getId());
                }
                else if (!this.getKind().equals(customerSpecification.getId())) {
                    throw new ModificationNotAllowedException("customerSpecification modification not allowed");
                }
            }
            this.customerSpecification = customerSpecification;
        }
    }

    public void addProduct(Product element) {
        this.setAssocModified(true);
        this.product.add(element);
        if (null != element && (null == element.getCustomer() || !element.getCustomer().equals(this))) {
            this.set_type(this.get_type());
            element.setCustomer(this);
        }
    }

    public void removeProduct(Product element) {
        this.setAssocModified(true);
        if (null != element && null != this.product  && this.product.remove(element) && null != element.getCustomer()) {
            element.setCustomer(null);
        }
    }

    public Set<Product> getProduct() {
        return this.product;
    }

    public void setProduct(Set<Product> product) {
        this.setAssocModified(true);
        if (null != this.product) {
            List<Product> toDelete = new ArrayList<>(this.product);
            boolean setToNull = null == product || product.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(product);
            }
            for (Product each : toDelete) {
                each.setCustomer(null);
            }
        }
        this.product=product;
        if (null != product) {
            for (Product each: product) {
                if (null != each && ( null == each.getCustomer() || !each.getCustomer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setCustomer(this);
                }
            }
        }
    }
}
