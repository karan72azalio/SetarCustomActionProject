// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.datatype.Neo4jDomainRelationshipObject;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.logical.Pipe;
import com.nokia.nsw.uiv.model.resource.logical.Trail;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.EndNode;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.RelationshipEntity;
import org.neo4j.ogm.annotation.StartNode;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.CONSUMES.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.CONSUMES")
@RelationshipEntity(
        type = "CONSUMES"
)
public class CONSUMES extends Neo4jDomainRelationshipObject {
    @StartNode
    @JsonFilter("trail")
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.Trail}"
    )
    private Trail trail;

    @EndNode
    @JsonFilter("pipe")
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.Pipe}"
    )
    private Pipe pipe;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String tags;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Integer index;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Set<String> channel = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(CONSUMESPropertiesConverter.class)
    private Map<String,Object> properties = new UivHashMap<>();

    public Trail getTrail() {
        return trail;
    }

    public void setTrail(Trail trail) {
        this.trail=trail;
        this.setAssocModified(true);
    }

    public Pipe getPipe() {
        return pipe;
    }

    public void setPipe(Pipe pipe) {
        this.pipe=pipe;
        this.setAssocModified(true);
    }

    public String getTags() {
        return this.tags;
    }

    public void setTags(String tags) {
        if ((tags==null && this.tags!=null) || (tags != null && !tags.equals(this.tags))) {
            this.setModified(true);
        }
        this.tags=tags;
    }

    public Integer getIndex() {
        return this.index;
    }

    public void setIndex(Integer index) {
        if ((index==null && this.index!=null) || (index != null && !index.equals(this.index))) {
            this.setModified(true);
        }
        this.index=index;
    }

    public Set<String> getChannel() {
        return this.channel;
    }

    public void setChannel(Set<String> channel) {
        if ((channel==null && this.channel!=null) || (channel != null && !channel.equals(this.channel))) {
            this.setModified(true);
        }
        this.channel=channel;
    }

    public Map<String, Object> getProperties() {
        return this.properties;
    }

    public void setProperties(Map<String, Object> properties) {
        if ((properties==null && this.properties!=null) || (properties != null && !properties.equals(this.properties))) {
            this.setModified(true);
        }
        if (this.properties != null && properties != null && !(properties instanceof UivHashMap)) {
            this.properties.putAll(properties);
        }
        this.properties=properties;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof CONSUMES)) return false;
        CONSUMES other = (CONSUMES) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.getTrail(), other.getTrail())
                .append(this.getPipe(), other.getPipe())
                .isEquals();
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(getTrail())
                .append(getPipe())
                .toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("tags", this.tags)
                .append("index", this.index)
                .append("channel", this.channel)
                .append("properties", this.properties)
                .toString();
    }
}
