// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.virtual;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.infra.InfraResource;
import com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink"
)
public class VirtualLink extends InfraResource {
    @JsonFilter("physicalLinkUSES")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink]"
    )
    protected Set<PhysicalLink> physicalLinkUSES = new HashSet<>();

    @JsonFilter("virtualPort")
    @Relationship(
            type = "CONNECTS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort]"
    )
    protected Set<VirtualPort> virtualPort = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification virtualLinkSpecification;

    public void addPhysicalLinkUSES(PhysicalLink element) {
        this.setAssocModified(true);
        this.physicalLinkUSES.add(element);
        if (null != element && (null == element.getVirtualLinkUSES() || !element.getVirtualLinkUSES().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getVirtualLinkUSES()) {
                element.setVirtualLinkUSES(new HashSet<>());
            }
            element.addVirtualLinkUSES(this);
        }
    }

    public void removePhysicalLinkUSES(PhysicalLink element) {
        this.setAssocModified(true);
        if (null != element && null != this.physicalLinkUSES  && this.physicalLinkUSES.remove(element) && null != element.getVirtualLinkUSES() && element.getVirtualLinkUSES().contains(this)) {
            element.getVirtualLinkUSES().remove(this);
        }
    }

    public Set<PhysicalLink> getPhysicalLinkUSES() {
        return this.physicalLinkUSES;
    }

    public void setPhysicalLinkUSES(Set<PhysicalLink> physicalLinkUSES) {
        this.setAssocModified(true);
        if (null != this.physicalLinkUSES) {
            List<PhysicalLink> toDelete = new ArrayList<>(this.physicalLinkUSES);
            boolean setToNull = null == physicalLinkUSES || physicalLinkUSES.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(physicalLinkUSES);
            }
            for (PhysicalLink each : toDelete) {
                if (null != each.getVirtualLinkUSES()) {
                    each.getVirtualLinkUSES().remove(this);
                }
            }
        }
        this.physicalLinkUSES=physicalLinkUSES;
        if (null != physicalLinkUSES) {
            for (PhysicalLink each: physicalLinkUSES) {
                if (null != each && (null == each.getVirtualLinkUSES() || !each.getVirtualLinkUSES().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getVirtualLinkUSES()) {
                        each.setVirtualLinkUSES(new HashSet<>());
                    }
                    each.addVirtualLinkUSES(this);
                }
            }
        }
    }

    public void addVirtualPort(VirtualPort element) {
        this.setAssocModified(true);
        this.virtualPort.add(element);
        if (null != element && (null == element.getVirtualLink() || !element.getVirtualLink().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getVirtualLink()) {
                element.setVirtualLink(new HashSet<>());
            }
            element.addVirtualLink(this);
        }
    }

    public void removeVirtualPort(VirtualPort element) {
        this.setAssocModified(true);
        if (null != element && null != this.virtualPort  && this.virtualPort.remove(element) && null != element.getVirtualLink() && element.getVirtualLink().contains(this)) {
            element.getVirtualLink().remove(this);
        }
    }

    public Set<VirtualPort> getVirtualPort() {
        return this.virtualPort;
    }

    public void setVirtualPort(Set<VirtualPort> virtualPort) {
        this.setAssocModified(true);
        if (null != this.virtualPort) {
            List<VirtualPort> toDelete = new ArrayList<>(this.virtualPort);
            boolean setToNull = null == virtualPort || virtualPort.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(virtualPort);
            }
            for (VirtualPort each : toDelete) {
                if (null != each.getVirtualLink()) {
                    each.getVirtualLink().remove(this);
                }
            }
        }
        this.virtualPort=virtualPort;
        if (null != virtualPort) {
            for (VirtualPort each: virtualPort) {
                if (null != each && (null == each.getVirtualLink() || !each.getVirtualLink().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getVirtualLink()) {
                        each.setVirtualLink(new HashSet<>());
                    }
                    each.addVirtualLink(this);
                }
            }
        }
    }

    public SchemaSpecification getVirtualLinkSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.virtualLinkSpecification = new SchemaSpecification();
            this.virtualLinkSpecification.setId(this.getKind());
            this.virtualLinkSpecification.setName(this.getKind());
            this.virtualLinkSpecification.setReferredType(this.getKind());
            this.virtualLinkSpecification.setVersion(this.getSchemaVersion());
        }
        return this.virtualLinkSpecification;
    }

    public void setVirtualLinkSpecification(SchemaSpecification virtualLinkSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != virtualLinkSpecification && null != virtualLinkSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(virtualLinkSpecification);
                    this.setKind(virtualLinkSpecification.getId());
                }
                else if (!this.getKind().equals(virtualLinkSpecification.getId())) {
                    throw new ModificationNotAllowedException("virtualLinkSpecification modification not allowed");
                }
            }
            this.virtualLinkSpecification = virtualLinkSpecification;
        }
    }
}
