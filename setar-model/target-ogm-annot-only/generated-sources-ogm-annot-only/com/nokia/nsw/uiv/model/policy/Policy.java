// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.policy;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.policy.Policy.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.policy.Policy")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.policy.Policy"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.policy.Policy"
)
public class Policy extends Entity {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification policySpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String domain;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(PolicyConditionConverter.class)
    private Map<String,String> condition = new UivHashMap<>();

    @JsonFilter("usingEntity")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Entity]"
    )
    protected Set<Entity> usingEntity = new HashSet<>();

    @JsonFilter("owningEntity")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.Entity}"
    )
    protected Entity owningEntity;

    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.policy.Policy}"
    )
    protected Policy containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.Policy]"
    )
    protected Set<Policy> contained = new HashSet<>();

    @JsonFilter("using")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.Policy]"
    )
    protected Set<Policy> using = new HashSet<>();

    @JsonFilter("used")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.Policy]"
    )
    protected Set<Policy> used = new HashSet<>();

    @JsonFilter("policyRule")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.PolicyRule]"
    )
    protected Set<PolicyRule> policyRule = new HashSet<>();

    public SchemaSpecification getPolicySpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.policySpecification = new SchemaSpecification();
            this.policySpecification.setId(this.getKind());
            this.policySpecification.setName(this.getKind());
            this.policySpecification.setReferredType(this.getKind());
            this.policySpecification.setVersion(this.getSchemaVersion());
        }
        return this.policySpecification;
    }

    public void setPolicySpecification(SchemaSpecification policySpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != policySpecification && null != policySpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(policySpecification);
                    this.setKind(policySpecification.getId());
                }
                else if (!this.getKind().equals(policySpecification.getId())) {
                    throw new ModificationNotAllowedException("policySpecification modification not allowed");
                }
            }
            this.policySpecification = policySpecification;
        }
    }

    public String getDomain() {
        return this.domain;
    }

    public void setDomain(String domain) {
        if ((domain==null && this.domain!=null) || (domain != null && !domain.equals(this.domain))) {
            this.setModified(true);
        }
        this.domain=domain;
    }

    public Map<String, String> getCondition() {
        return this.condition;
    }

    public void setCondition(Map<String, String> condition) {
        if ((condition==null && this.condition!=null) || (condition != null && !condition.equals(this.condition))) {
            this.setModified(true);
        }
        if (this.condition != null && condition != null && !(condition instanceof UivHashMap)) {
            this.condition.putAll(condition);
        }
        this.condition=condition;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Policy)) return false;
        Policy other = (Policy) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.domain, other.domain)
                .append(this.condition, other.condition)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(domain)
                .append(condition)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("domain", this.domain)
                .append("condition", this.condition)
                .toString();
    }

    public void addUsingEntity(Entity element) {
        this.setAssocModified(true);
        this.usingEntity.add(element);
        if (null != element && (null == element.getUsedPolicy() || !element.getUsedPolicy().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedPolicy()) {
                element.setUsedPolicy(new HashSet<>());
            }
            element.addUsedPolicy(this);
        }
    }

    public void removeUsingEntity(Entity element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingEntity  && this.usingEntity.remove(element) && null != element.getUsedPolicy() && element.getUsedPolicy().contains(this)) {
            element.getUsedPolicy().remove(this);
        }
    }

    public Set<Entity> getUsingEntity() {
        return this.usingEntity;
    }

    public void setUsingEntity(Set<Entity> usingEntity) {
        this.setAssocModified(true);
        if (null != this.usingEntity) {
            List<Entity> toDelete = new ArrayList<>(this.usingEntity);
            boolean setToNull = null == usingEntity || usingEntity.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingEntity);
            }
            for (Entity each : toDelete) {
                if (null != each.getUsedPolicy()) {
                    each.getUsedPolicy().remove(this);
                }
            }
        }
        this.usingEntity=usingEntity;
        if (null != usingEntity) {
            for (Entity each: usingEntity) {
                if (null != each && (null == each.getUsedPolicy() || !each.getUsedPolicy().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedPolicy()) {
                        each.setUsedPolicy(new HashSet<>());
                    }
                    each.addUsedPolicy(this);
                }
            }
        }
    }

    public Entity getOwningEntity() {
        return this.owningEntity;
    }

    public void setOwningEntity(Entity owningEntity) {
        this.setAssocModified(true);
        if (null == owningEntity && null != this.owningEntity && null != this.owningEntity.getOwnedPolicy()) {
            this.owningEntity.getOwnedPolicy().remove(this);
        }
        this.owningEntity=owningEntity;
        if (null != owningEntity && (null == owningEntity.getOwnedPolicy() || !owningEntity.getOwnedPolicy().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningEntity.getOwnedPolicy()) {
                owningEntity.setOwnedPolicy(new HashSet<>());
            }
            owningEntity.addOwnedPolicy(this);
        }
    }

    public Policy getContaining() {
        return this.containing;
    }

    public void setContaining(Policy containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(Policy element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(Policy element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<Policy> getContained() {
        return this.contained;
    }

    public void setContained(Set<Policy> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<Policy> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (Policy each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (Policy each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addUsing(Policy element) {
        this.setAssocModified(true);
        this.using.add(element);
        if (null != element && (null == element.getUsed() || !element.getUsed().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsed()) {
                element.setUsed(new HashSet<>());
            }
            element.addUsed(this);
        }
    }

    public void removeUsing(Policy element) {
        this.setAssocModified(true);
        if (null != element && null != this.using  && this.using.remove(element) && null != element.getUsed() && element.getUsed().contains(this)) {
            element.getUsed().remove(this);
        }
    }

    public Set<Policy> getUsing() {
        return this.using;
    }

    public void setUsing(Set<Policy> using) {
        this.setAssocModified(true);
        if (null != this.using) {
            List<Policy> toDelete = new ArrayList<>(this.using);
            boolean setToNull = null == using || using.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(using);
            }
            for (Policy each : toDelete) {
                if (null != each.getUsed()) {
                    each.getUsed().remove(this);
                }
            }
        }
        this.using=using;
        if (null != using) {
            for (Policy each: using) {
                if (null != each && (null == each.getUsed() || !each.getUsed().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsed()) {
                        each.setUsed(new HashSet<>());
                    }
                    each.addUsed(this);
                }
            }
        }
    }

    public void addUsed(Policy element) {
        this.setAssocModified(true);
        this.used.add(element);
        if (null != element && (null == element.getUsing() || !element.getUsing().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsing()) {
                element.setUsing(new HashSet<>());
            }
            element.addUsing(this);
        }
    }

    public void removeUsed(Policy element) {
        this.setAssocModified(true);
        if (null != element && null != this.used  && this.used.remove(element) && null != element.getUsing() && element.getUsing().contains(this)) {
            element.getUsing().remove(this);
        }
    }

    public Set<Policy> getUsed() {
        return this.used;
    }

    public void setUsed(Set<Policy> used) {
        this.setAssocModified(true);
        if (null != this.used) {
            List<Policy> toDelete = new ArrayList<>(this.used);
            boolean setToNull = null == used || used.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(used);
            }
            for (Policy each : toDelete) {
                if (null != each.getUsing()) {
                    each.getUsing().remove(this);
                }
            }
        }
        this.used=used;
        if (null != used) {
            for (Policy each: used) {
                if (null != each && (null == each.getUsing() || !each.getUsing().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsing()) {
                        each.setUsing(new HashSet<>());
                    }
                    each.addUsing(this);
                }
            }
        }
    }

    public void addPolicyRule(PolicyRule element) {
        this.setAssocModified(true);
        this.policyRule.add(element);
        if (null != element && (null == element.getPolicy() || !element.getPolicy().equals(this))) {
            this.set_type(this.get_type());
            element.setPolicy(this);
        }
    }

    public void removePolicyRule(PolicyRule element) {
        this.setAssocModified(true);
        if (null != element && null != this.policyRule  && this.policyRule.remove(element) && null != element.getPolicy()) {
            element.setPolicy(null);
        }
    }

    public Set<PolicyRule> getPolicyRule() {
        return this.policyRule;
    }

    public void setPolicyRule(Set<PolicyRule> policyRule) {
        this.setAssocModified(true);
        if (null != this.policyRule) {
            List<PolicyRule> toDelete = new ArrayList<>(this.policyRule);
            boolean setToNull = null == policyRule || policyRule.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(policyRule);
            }
            for (PolicyRule each : toDelete) {
                each.setPolicy(null);
            }
        }
        this.policyRule=policyRule;
        if (null != policyRule) {
            for (PolicyRule each: policyRule) {
                if (null != each && ( null == each.getPolicy() || !each.getPolicy().equals(this))) {
                    this.set_type(this.get_type());
                    each.setPolicy(this);
                }
            }
        }
    }
}
