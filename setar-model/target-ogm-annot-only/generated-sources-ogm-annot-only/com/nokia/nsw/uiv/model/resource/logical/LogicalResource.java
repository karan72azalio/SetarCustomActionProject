// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.nokia.nsw.uiv.exception.BadRequestException;
import com.nokia.nsw.uiv.model.common.UTILIZES_RESOURCE;
import com.nokia.nsw.uiv.model.resource.Resource;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.Protocol.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Trail.class, name = "trail"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Protocol.class, name = "protocol"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalInterface.class, name = "logicalInterface"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalDevice.class, name = "logicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Configuration.class, name = "configuration"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalComponent.class, name = "logicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Pipe.class, name = "pipe"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Connection.class, name = "connection")
})
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.LogicalResource")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.LogicalResource"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.LogicalResource"
)
public abstract class LogicalResource extends Resource {
    @Relationship(
            type = "UTILIZES_RESOURCE",
            direction = "OUTGOING"
    )
    @ApiModelProperty
    protected Set<UTILIZES_RESOURCE> utilizedResource = new HashSet<>();

    @JsonFilter("usedResource")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> usedResource = new HashSet<>();

    @JsonFilter("containingLogicalDevice")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalDevice}"
    )
    protected LogicalDevice containingLogicalDevice;

    @JsonFilter("configuration")
    @Relationship(
            type = "HAS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Configuration]"
    )
    protected Set<Configuration> configuration = new HashSet<>();

    @JsonFilter("templateConfiguration")
    @Relationship(
            type = "HAS_TEMPLATE",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Configuration]"
    )
    protected Set<Configuration> templateConfiguration = new HashSet<>();

    public void addUtilizedResource(UTILIZES_RESOURCE element) throws BadRequestException {
        this.setAssocModified(true);
        if (null != element) {
            if (null == element.getResource()) {
                log.error("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (resource) value set");
                throw new BadRequestException("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (resource) value set");
            }
            if (null == element.getLogicalResource() || !element.getLogicalResource().equals(this) || !this.utilizedResource.contains(element)) {
                this.set_type(this.get_type());
                element.setLogicalResource(this);
                if (null == this.utilizedResource) {
                    this.utilizedResource = new HashSet<>();
                }
                this.utilizedResource.add(element);
                if (null == element.getResource().getUtilizingLogicalResource()) {
                    element.getResource().setUtilizingLogicalResource(new HashSet<>());
                }
                element.getResource().getUtilizingLogicalResource().add(element);
            }
        }
    }

    public void removeUtilizedResource(UTILIZES_RESOURCE element) {
        this.setAssocModified(true);
        if (null != element && null != this.utilizedResource && this.utilizedResource.remove(element) && null != element.getResource()) {
            element.getResource().removeUtilizingLogicalResource(element);
        }
    }

    public Set<UTILIZES_RESOURCE> getUtilizedResource() {
        return this.utilizedResource;
    }

    public void setUtilizedResource(Set<UTILIZES_RESOURCE> utilizedResource) throws
            BadRequestException {
        this.setAssocModified(true);
        if (null != this.utilizedResource) {
            List<UTILIZES_RESOURCE> toDelete = new ArrayList<>(this.utilizedResource);
            boolean setToNull = null == utilizedResource || utilizedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(utilizedResource);
            }
            for (UTILIZES_RESOURCE each : toDelete) {
                if (null != each.getResource() && null != each.getResource().getUtilizingLogicalResource()) {
                    each.getResource().removeUtilizingLogicalResource(each);
                }
            }
        }
        if (null != utilizedResource) {
            for (UTILIZES_RESOURCE each: utilizedResource) {
                if (null != each) {
                    if (null == each.getResource()) {
                        log.error("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (resource) value set");
                        throw new BadRequestException("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (resource) value set");
                    }
                    if (null == each.getLogicalResource() || !each.getLogicalResource().equals(this) || !this.utilizedResource.contains(each)) {
                        this.set_type(this.get_type());
                        each.setLogicalResource(this);
                        if (null == this.utilizedResource) {
                            this.utilizedResource = new HashSet<>();
                        }
                        boolean ispresent = this.utilizedResource.stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            this.utilizedResource.add(each);
                        }
                        if (null == each.getResource().getUtilizingLogicalResource()) {
                            each.getResource().setUtilizingLogicalResource(new HashSet<>());
                        }
                        ispresent = each.getResource().getUtilizingLogicalResource().stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            each.getResource().getUtilizingLogicalResource().add(each);
                        }
                    }
                }
            }
        }
    }

    public void addUsedResource(Resource element) {
        this.setAssocModified(true);
        this.usedResource.add(element);
        if (null != element && (null == element.getUsingLogicalResource() || !element.getUsingLogicalResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingLogicalResource()) {
                element.setUsingLogicalResource(new HashSet<>());
            }
            element.addUsingLogicalResource(this);
        }
    }

    public void removeUsedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedResource  && this.usedResource.remove(element) && null != element.getUsingLogicalResource() && element.getUsingLogicalResource().contains(this)) {
            element.getUsingLogicalResource().remove(this);
        }
    }

    public Set<Resource> getUsedResource() {
        return this.usedResource;
    }

    public void setUsedResource(Set<Resource> usedResource) {
        this.setAssocModified(true);
        if (null != this.usedResource) {
            List<Resource> toDelete = new ArrayList<>(this.usedResource);
            boolean setToNull = null == usedResource || usedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getUsingLogicalResource()) {
                    each.getUsingLogicalResource().remove(this);
                }
            }
        }
        this.usedResource=usedResource;
        if (null != usedResource) {
            for (Resource each: usedResource) {
                if (null != each && (null == each.getUsingLogicalResource() || !each.getUsingLogicalResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingLogicalResource()) {
                        each.setUsingLogicalResource(new HashSet<>());
                    }
                    each.addUsingLogicalResource(this);
                }
            }
        }
    }

    public LogicalDevice getContainingLogicalDevice() {
        return this.containingLogicalDevice;
    }

    public void setContainingLogicalDevice(LogicalDevice containingLogicalDevice) {
        this.setAssocModified(true);
        if (null == containingLogicalDevice && null != this.containingLogicalDevice && null != this.containingLogicalDevice.getContained()) {
            this.containingLogicalDevice.getContained().remove(this);
        }
        this.containingLogicalDevice=containingLogicalDevice;
        if (null != containingLogicalDevice && (null == containingLogicalDevice.getContained() || !containingLogicalDevice.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containingLogicalDevice.getContained()) {
                containingLogicalDevice.setContained(new HashSet<>());
            }
            containingLogicalDevice.addContained(this);
        }
    }

    public void addConfiguration(Configuration element) {
        this.setAssocModified(true);
        this.configuration.add(element);
        if (null != element && (null == element.getLogicalResource() || !element.getLogicalResource().equals(this))) {
            this.set_type(this.get_type());
            element.setLogicalResource(this);
        }
    }

    public void removeConfiguration(Configuration element) {
        this.setAssocModified(true);
        if (null != element && null != this.configuration  && this.configuration.remove(element) && null != element.getLogicalResource()) {
            element.setLogicalResource(null);
        }
    }

    public Set<Configuration> getConfiguration() {
        return this.configuration;
    }

    public void setConfiguration(Set<Configuration> configuration) {
        this.setAssocModified(true);
        if (null != this.configuration) {
            List<Configuration> toDelete = new ArrayList<>(this.configuration);
            boolean setToNull = null == configuration || configuration.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(configuration);
            }
            for (Configuration each : toDelete) {
                each.setLogicalResource(null);
            }
        }
        this.configuration=configuration;
        if (null != configuration) {
            for (Configuration each: configuration) {
                if (null != each && ( null == each.getLogicalResource() || !each.getLogicalResource().equals(this))) {
                    this.set_type(this.get_type());
                    each.setLogicalResource(this);
                }
            }
        }
    }

    public void addTemplateConfiguration(Configuration element) {
        this.setAssocModified(true);
        this.templateConfiguration.add(element);
        if (null != element && (null == element.getTemplatedLogicalResource() || !element.getTemplatedLogicalResource().equals(this))) {
            this.set_type(this.get_type());
            element.setTemplatedLogicalResource(this);
        }
    }

    public void removeTemplateConfiguration(Configuration element) {
        this.setAssocModified(true);
        if (null != element && null != this.templateConfiguration  && this.templateConfiguration.remove(element) && null != element.getTemplatedLogicalResource()) {
            element.setTemplatedLogicalResource(null);
        }
    }

    public Set<Configuration> getTemplateConfiguration() {
        return this.templateConfiguration;
    }

    public void setTemplateConfiguration(Set<Configuration> templateConfiguration) {
        this.setAssocModified(true);
        if (null != this.templateConfiguration) {
            List<Configuration> toDelete = new ArrayList<>(this.templateConfiguration);
            boolean setToNull = null == templateConfiguration || templateConfiguration.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(templateConfiguration);
            }
            for (Configuration each : toDelete) {
                each.setTemplatedLogicalResource(null);
            }
        }
        this.templateConfiguration=templateConfiguration;
        if (null != templateConfiguration) {
            for (Configuration each: templateConfiguration) {
                if (null != each && ( null == each.getTemplatedLogicalResource() || !each.getTemplatedLogicalResource().equals(this))) {
                    this.set_type(this.get_type());
                    each.setTemplatedLogicalResource(this);
                }
            }
        }
    }
}
