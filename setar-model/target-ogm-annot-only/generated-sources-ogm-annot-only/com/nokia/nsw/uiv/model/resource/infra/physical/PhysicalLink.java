// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.physical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.infra.InfraResource;
import com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink"
)
public class PhysicalLink extends InfraResource {
    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink}"
    )
    protected PhysicalLink containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink]"
    )
    protected Set<PhysicalLink> contained = new HashSet<>();

    @JsonFilter("physicalPortCONNECTS")
    @Relationship(
            type = "CONNECTS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort]"
    )
    protected Set<PhysicalPort> physicalPortCONNECTS = new HashSet<>();

    @JsonFilter("virtualLinkUSES")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink]"
    )
    protected Set<VirtualLink> virtualLinkUSES = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification physicalLinkSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, Wireless, Cat4, Cat5, Cat6, Cat7, Coaxial50, Coaxial75, Coaxial100, FiberOptic, UTP, STP, RibbonCable, Twinaxial, Optical9, Optical50, Optical62, Other]")
    private PhysicalLinkType physicalLinkType;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String physicalLinkTypeOther;

    public PhysicalLink getContaining() {
        return this.containing;
    }

    public void setContaining(PhysicalLink containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(PhysicalLink element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(PhysicalLink element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<PhysicalLink> getContained() {
        return this.contained;
    }

    public void setContained(Set<PhysicalLink> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<PhysicalLink> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (PhysicalLink each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (PhysicalLink each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addPhysicalPortCONNECTS(PhysicalPort element) {
        this.setAssocModified(true);
        this.physicalPortCONNECTS.add(element);
        if (null != element && (null == element.getPhysicalLinkCONNECTS() || !element.getPhysicalLinkCONNECTS().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPhysicalLinkCONNECTS()) {
                element.setPhysicalLinkCONNECTS(new HashSet<>());
            }
            element.addPhysicalLinkCONNECTS(this);
        }
    }

    public void removePhysicalPortCONNECTS(PhysicalPort element) {
        this.setAssocModified(true);
        if (null != element && null != this.physicalPortCONNECTS  && this.physicalPortCONNECTS.remove(element) && null != element.getPhysicalLinkCONNECTS() && element.getPhysicalLinkCONNECTS().contains(this)) {
            element.getPhysicalLinkCONNECTS().remove(this);
        }
    }

    public Set<PhysicalPort> getPhysicalPortCONNECTS() {
        return this.physicalPortCONNECTS;
    }

    public void setPhysicalPortCONNECTS(Set<PhysicalPort> physicalPortCONNECTS) {
        this.setAssocModified(true);
        if (null != this.physicalPortCONNECTS) {
            List<PhysicalPort> toDelete = new ArrayList<>(this.physicalPortCONNECTS);
            boolean setToNull = null == physicalPortCONNECTS || physicalPortCONNECTS.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(physicalPortCONNECTS);
            }
            for (PhysicalPort each : toDelete) {
                if (null != each.getPhysicalLinkCONNECTS()) {
                    each.getPhysicalLinkCONNECTS().remove(this);
                }
            }
        }
        this.physicalPortCONNECTS=physicalPortCONNECTS;
        if (null != physicalPortCONNECTS) {
            for (PhysicalPort each: physicalPortCONNECTS) {
                if (null != each && (null == each.getPhysicalLinkCONNECTS() || !each.getPhysicalLinkCONNECTS().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPhysicalLinkCONNECTS()) {
                        each.setPhysicalLinkCONNECTS(new HashSet<>());
                    }
                    each.addPhysicalLinkCONNECTS(this);
                }
            }
        }
    }

    public void addVirtualLinkUSES(VirtualLink element) {
        this.setAssocModified(true);
        this.virtualLinkUSES.add(element);
        if (null != element && (null == element.getPhysicalLinkUSES() || !element.getPhysicalLinkUSES().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPhysicalLinkUSES()) {
                element.setPhysicalLinkUSES(new HashSet<>());
            }
            element.addPhysicalLinkUSES(this);
        }
    }

    public void removeVirtualLinkUSES(VirtualLink element) {
        this.setAssocModified(true);
        if (null != element && null != this.virtualLinkUSES  && this.virtualLinkUSES.remove(element) && null != element.getPhysicalLinkUSES() && element.getPhysicalLinkUSES().contains(this)) {
            element.getPhysicalLinkUSES().remove(this);
        }
    }

    public Set<VirtualLink> getVirtualLinkUSES() {
        return this.virtualLinkUSES;
    }

    public void setVirtualLinkUSES(Set<VirtualLink> virtualLinkUSES) {
        this.setAssocModified(true);
        if (null != this.virtualLinkUSES) {
            List<VirtualLink> toDelete = new ArrayList<>(this.virtualLinkUSES);
            boolean setToNull = null == virtualLinkUSES || virtualLinkUSES.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(virtualLinkUSES);
            }
            for (VirtualLink each : toDelete) {
                if (null != each.getPhysicalLinkUSES()) {
                    each.getPhysicalLinkUSES().remove(this);
                }
            }
        }
        this.virtualLinkUSES=virtualLinkUSES;
        if (null != virtualLinkUSES) {
            for (VirtualLink each: virtualLinkUSES) {
                if (null != each && (null == each.getPhysicalLinkUSES() || !each.getPhysicalLinkUSES().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPhysicalLinkUSES()) {
                        each.setPhysicalLinkUSES(new HashSet<>());
                    }
                    each.addPhysicalLinkUSES(this);
                }
            }
        }
    }

    public SchemaSpecification getPhysicalLinkSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.physicalLinkSpecification = new SchemaSpecification();
            this.physicalLinkSpecification.setId(this.getKind());
            this.physicalLinkSpecification.setName(this.getKind());
            this.physicalLinkSpecification.setReferredType(this.getKind());
            this.physicalLinkSpecification.setVersion(this.getSchemaVersion());
        }
        return this.physicalLinkSpecification;
    }

    public void setPhysicalLinkSpecification(SchemaSpecification physicalLinkSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != physicalLinkSpecification && null != physicalLinkSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(physicalLinkSpecification);
                    this.setKind(physicalLinkSpecification.getId());
                }
                else if (!this.getKind().equals(physicalLinkSpecification.getId())) {
                    throw new ModificationNotAllowedException("physicalLinkSpecification modification not allowed");
                }
            }
            this.physicalLinkSpecification = physicalLinkSpecification;
        }
    }

    public PhysicalLinkType getPhysicalLinkType() {
        return this.physicalLinkType;
    }

    public void setPhysicalLinkType(PhysicalLinkType physicalLinkType) {
        if ((physicalLinkType==null && this.physicalLinkType!=null) || (physicalLinkType != null && !physicalLinkType.equals(this.physicalLinkType))) {
            this.setModified(true);
        }
        this.physicalLinkType=physicalLinkType;
    }

    public String getPhysicalLinkTypeOther() {
        return this.physicalLinkTypeOther;
    }

    public void setPhysicalLinkTypeOther(String physicalLinkTypeOther) {
        if ((physicalLinkTypeOther==null && this.physicalLinkTypeOther!=null) || (physicalLinkTypeOther != null && !physicalLinkTypeOther.equals(this.physicalLinkTypeOther))) {
            this.setModified(true);
        }
        this.physicalLinkTypeOther=physicalLinkTypeOther;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof PhysicalLink)) return false;
        PhysicalLink other = (PhysicalLink) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.physicalLinkType, other.physicalLinkType)
                .append(this.physicalLinkTypeOther, other.physicalLinkTypeOther)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(physicalLinkType)
                .append(physicalLinkTypeOther)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("physicalLinkType", this.physicalLinkType)
                .append("physicalLinkTypeOther", this.physicalLinkTypeOther)
                .toString();
    }
}
