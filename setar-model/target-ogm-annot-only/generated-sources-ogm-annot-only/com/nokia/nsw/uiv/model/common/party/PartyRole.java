// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common.party;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.location.Place;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.service.ServiceConsumer.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.ServiceProvider.class, name = "serviceProvider"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.ServiceConsumer.class, name = "serviceConsumer"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Customer.class, name = "customer")
})
@JsonFilter("com.nokia.nsw.uiv.model.common.party.PartyRole")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.party.PartyRole"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.party.PartyRole"
)
public abstract class PartyRole extends Entity {
    @JsonFilter("party")
    @Relationship(
            type = "HAS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Party}"
    )
    protected Party party;

    @JsonFilter("place")
    @Relationship(
            type = "LOCATED_AT",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.Place]"
    )
    protected Set<Place> place = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[email:java.lang.String, phoneNumber:java.lang.String, nationalDestinationCode:java.lang.Integer, countryCode:java.lang.Integer]")
    @Valid
    @Convert(ContactMediumConverter.class)
    private ContactMedium contactMedium;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private Date validFrom;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private Date validUntil;

    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        this.setAssocModified(true);
        if (null == party && null != this.party && null != this.party.getPartyRole()) {
            this.party.getPartyRole().remove(this);
        }
        this.party=party;
        if (null != party && (null == party.getPartyRole() || !party.getPartyRole().contains(this))) {
            this.set_type(this.get_type());
            if (null == party.getPartyRole()) {
                party.setPartyRole(new HashSet<>());
            }
            party.addPartyRole(this);
        }
    }

    public void addPlace(Place element) {
        this.setAssocModified(true);
        this.place.add(element);
        if (null != element && (null == element.getPartyRole() || !element.getPartyRole().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPartyRole()) {
                element.setPartyRole(new HashSet<>());
            }
            element.addPartyRole(this);
        }
    }

    public void removePlace(Place element) {
        this.setAssocModified(true);
        if (null != element && null != this.place  && this.place.remove(element) && null != element.getPartyRole() && element.getPartyRole().contains(this)) {
            element.getPartyRole().remove(this);
        }
    }

    public Set<Place> getPlace() {
        return this.place;
    }

    public void setPlace(Set<Place> place) {
        this.setAssocModified(true);
        if (null != this.place) {
            List<Place> toDelete = new ArrayList<>(this.place);
            boolean setToNull = null == place || place.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(place);
            }
            for (Place each : toDelete) {
                if (null != each.getPartyRole()) {
                    each.getPartyRole().remove(this);
                }
            }
        }
        this.place=place;
        if (null != place) {
            for (Place each: place) {
                if (null != each && (null == each.getPartyRole() || !each.getPartyRole().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPartyRole()) {
                        each.setPartyRole(new HashSet<>());
                    }
                    each.addPartyRole(this);
                }
            }
        }
    }

    public ContactMedium getContactMedium() {
        return this.contactMedium;
    }

    public void setContactMedium(ContactMedium contactMedium) {
        if ((contactMedium==null && this.contactMedium!=null) || (contactMedium != null && !contactMedium.equals(this.contactMedium))) {
            this.setModified(true);
        }
        this.contactMedium=contactMedium;
    }

    public Date getValidFrom() {
        return this.validFrom;
    }

    public void setValidFrom(Date validFrom) {
        if ((validFrom==null && this.validFrom!=null) || (validFrom != null && !validFrom.equals(this.validFrom))) {
            this.setModified(true);
        }
        this.validFrom=validFrom;
    }

    public Date getValidUntil() {
        return this.validUntil;
    }

    public void setValidUntil(Date validUntil) {
        if ((validUntil==null && this.validUntil!=null) || (validUntil != null && !validUntil.equals(this.validUntil))) {
            this.setModified(true);
        }
        this.validUntil=validUntil;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof PartyRole)) return false;
        PartyRole other = (PartyRole) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.validFrom, other.validFrom)
                .append(this.validUntil, other.validUntil)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(validFrom)
                .append(validUntil)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("validFrom", this.validFrom)
                .append("validUntil", this.validUntil)
                .toString();
    }
}
