// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.virtual;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.nokia.nsw.uiv.model.resource.logical.Protocol;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort"
)
public class VirtualPort extends VirtualComponent {
    @JsonFilter("protocol")
    @Relationship(
            type = "IMPLEMENTS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Protocol]"
    )
    protected Set<Protocol> protocol = new HashSet<>();

    @JsonFilter("virtualLink")
    @Relationship(
            type = "CONNECTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink]"
    )
    protected Set<VirtualLink> virtualLink = new HashSet<>();

    public void addProtocol(Protocol element) {
        this.setAssocModified(true);
        this.protocol.add(element);
        if (null != element && (null == element.getVirtualPort() || !element.getVirtualPort().equals(this))) {
            this.set_type(this.get_type());
            element.setVirtualPort(this);
        }
    }

    public void removeProtocol(Protocol element) {
        this.setAssocModified(true);
        if (null != element && null != this.protocol  && this.protocol.remove(element) && null != element.getVirtualPort()) {
            element.setVirtualPort(null);
        }
    }

    public Set<Protocol> getProtocol() {
        return this.protocol;
    }

    public void setProtocol(Set<Protocol> protocol) {
        this.setAssocModified(true);
        if (null != this.protocol) {
            List<Protocol> toDelete = new ArrayList<>(this.protocol);
            boolean setToNull = null == protocol || protocol.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(protocol);
            }
            for (Protocol each : toDelete) {
                each.setVirtualPort(null);
            }
        }
        this.protocol=protocol;
        if (null != protocol) {
            for (Protocol each: protocol) {
                if (null != each && ( null == each.getVirtualPort() || !each.getVirtualPort().equals(this))) {
                    this.set_type(this.get_type());
                    each.setVirtualPort(this);
                }
            }
        }
    }

    public void addVirtualLink(VirtualLink element) {
        this.setAssocModified(true);
        this.virtualLink.add(element);
        if (null != element && (null == element.getVirtualPort() || !element.getVirtualPort().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getVirtualPort()) {
                element.setVirtualPort(new HashSet<>());
            }
            element.addVirtualPort(this);
        }
    }

    public void removeVirtualLink(VirtualLink element) {
        this.setAssocModified(true);
        if (null != element && null != this.virtualLink  && this.virtualLink.remove(element) && null != element.getVirtualPort() && element.getVirtualPort().contains(this)) {
            element.getVirtualPort().remove(this);
        }
    }

    public Set<VirtualLink> getVirtualLink() {
        return this.virtualLink;
    }

    public void setVirtualLink(Set<VirtualLink> virtualLink) {
        this.setAssocModified(true);
        if (null != this.virtualLink) {
            List<VirtualLink> toDelete = new ArrayList<>(this.virtualLink);
            boolean setToNull = null == virtualLink || virtualLink.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(virtualLink);
            }
            for (VirtualLink each : toDelete) {
                if (null != each.getVirtualPort()) {
                    each.getVirtualPort().remove(this);
                }
            }
        }
        this.virtualLink=virtualLink;
        if (null != virtualLink) {
            for (VirtualLink each: virtualLink) {
                if (null != each && (null == each.getVirtualPort() || !each.getVirtualPort().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getVirtualPort()) {
                        each.setVirtualPort(new HashSet<>());
                    }
                    each.addVirtualPort(this);
                }
            }
        }
    }
}
