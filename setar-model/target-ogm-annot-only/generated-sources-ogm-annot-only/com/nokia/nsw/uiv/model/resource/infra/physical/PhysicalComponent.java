// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.physical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.infra.InfraComponent;
import com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes(@JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort.class, name = "physicalPort"))
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent"
)
public class PhysicalComponent extends InfraComponent {
    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent}"
    )
    protected PhysicalComponent containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent]"
    )
    protected Set<PhysicalComponent> contained = new HashSet<>();

    @JsonFilter("virtualComponentUSES")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent]"
    )
    protected Set<VirtualComponent> virtualComponentUSES = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification physicalComponentSpecification;

    public PhysicalComponent getContaining() {
        return this.containing;
    }

    public void setContaining(PhysicalComponent containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(PhysicalComponent element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(PhysicalComponent element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<PhysicalComponent> getContained() {
        return this.contained;
    }

    public void setContained(Set<PhysicalComponent> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<PhysicalComponent> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (PhysicalComponent each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (PhysicalComponent each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addVirtualComponentUSES(VirtualComponent element) {
        this.setAssocModified(true);
        this.virtualComponentUSES.add(element);
        if (null != element && (null == element.getPhysicalComponentUSES() || !element.getPhysicalComponentUSES().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPhysicalComponentUSES()) {
                element.setPhysicalComponentUSES(new HashSet<>());
            }
            element.addPhysicalComponentUSES(this);
        }
    }

    public void removeVirtualComponentUSES(VirtualComponent element) {
        this.setAssocModified(true);
        if (null != element && null != this.virtualComponentUSES  && this.virtualComponentUSES.remove(element) && null != element.getPhysicalComponentUSES() && element.getPhysicalComponentUSES().contains(this)) {
            element.getPhysicalComponentUSES().remove(this);
        }
    }

    public Set<VirtualComponent> getVirtualComponentUSES() {
        return this.virtualComponentUSES;
    }

    public void setVirtualComponentUSES(Set<VirtualComponent> virtualComponentUSES) {
        this.setAssocModified(true);
        if (null != this.virtualComponentUSES) {
            List<VirtualComponent> toDelete = new ArrayList<>(this.virtualComponentUSES);
            boolean setToNull = null == virtualComponentUSES || virtualComponentUSES.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(virtualComponentUSES);
            }
            for (VirtualComponent each : toDelete) {
                if (null != each.getPhysicalComponentUSES()) {
                    each.getPhysicalComponentUSES().remove(this);
                }
            }
        }
        this.virtualComponentUSES=virtualComponentUSES;
        if (null != virtualComponentUSES) {
            for (VirtualComponent each: virtualComponentUSES) {
                if (null != each && (null == each.getPhysicalComponentUSES() || !each.getPhysicalComponentUSES().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPhysicalComponentUSES()) {
                        each.setPhysicalComponentUSES(new HashSet<>());
                    }
                    each.addPhysicalComponentUSES(this);
                }
            }
        }
    }

    public SchemaSpecification getPhysicalComponentSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.physicalComponentSpecification = new SchemaSpecification();
            this.physicalComponentSpecification.setId(this.getKind());
            this.physicalComponentSpecification.setName(this.getKind());
            this.physicalComponentSpecification.setReferredType(this.getKind());
            this.physicalComponentSpecification.setVersion(this.getSchemaVersion());
        }
        return this.physicalComponentSpecification;
    }

    public void setPhysicalComponentSpecification(
            SchemaSpecification physicalComponentSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != physicalComponentSpecification && null != physicalComponentSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(physicalComponentSpecification);
                    this.setKind(physicalComponentSpecification.getId());
                }
                else if (!this.getKind().equals(physicalComponentSpecification.getId())) {
                    throw new ModificationNotAllowedException("physicalComponentSpecification modification not allowed");
                }
            }
            this.physicalComponentSpecification = physicalComponentSpecification;
        }
    }
}
