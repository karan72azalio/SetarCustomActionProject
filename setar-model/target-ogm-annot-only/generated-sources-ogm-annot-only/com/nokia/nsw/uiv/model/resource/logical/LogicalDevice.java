// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.Resource;
import com.nokia.nsw.uiv.model.resource.Software;
import com.nokia.nsw.uiv.model.resource.SoftwareConverter;
import com.nokia.nsw.uiv.model.resource.infra.InfraDevice;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.LogicalDevice.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.LogicalDevice")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.LogicalDevice"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.LogicalDevice"
)
public class LogicalDevice extends LogicalResource {
    @JsonFilter("containedDevices")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.InfraDevice]"
    )
    protected Set<InfraDevice> containedDevices = new HashSet<>();

    @JsonFilter("hostingDevice")
    @Relationship(
            type = "HOSTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.InfraDevice}"
    )
    protected InfraDevice hostingDevice;

    @JsonFilter("managedResources")
    @Relationship(
            type = "MANAGES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> managedResources = new HashSet<>();

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.LogicalResource]"
    )
    protected Set<LogicalResource> contained = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification logicalDeviceSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[name:java.lang.String, version:java.lang.String]")
    @Valid
    @Convert(SoftwareConverter.class)
    private Software software;

    public void addContainedDevices(InfraDevice element) {
        this.setAssocModified(true);
        this.containedDevices.add(element);
        if (null != element && (null == element.getContainingLogicalDevice() || !element.getContainingLogicalDevice().equals(this))) {
            this.set_type(this.get_type());
            element.setContainingLogicalDevice(this);
        }
    }

    public void removeContainedDevices(InfraDevice element) {
        this.setAssocModified(true);
        if (null != element && null != this.containedDevices  && this.containedDevices.remove(element) && null != element.getContainingLogicalDevice()) {
            element.setContainingLogicalDevice(null);
        }
    }

    public Set<InfraDevice> getContainedDevices() {
        return this.containedDevices;
    }

    public void setContainedDevices(Set<InfraDevice> containedDevices) {
        this.setAssocModified(true);
        if (null != this.containedDevices) {
            List<InfraDevice> toDelete = new ArrayList<>(this.containedDevices);
            boolean setToNull = null == containedDevices || containedDevices.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(containedDevices);
            }
            for (InfraDevice each : toDelete) {
                each.setContainingLogicalDevice(null);
            }
        }
        this.containedDevices=containedDevices;
        if (null != containedDevices) {
            for (InfraDevice each: containedDevices) {
                if (null != each && ( null == each.getContainingLogicalDevice() || !each.getContainingLogicalDevice().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContainingLogicalDevice(this);
                }
            }
        }
    }

    public InfraDevice getHostingDevice() {
        return this.hostingDevice;
    }

    public void setHostingDevice(InfraDevice hostingDevice) {
        this.setAssocModified(true);
        if (null == hostingDevice && null != this.hostingDevice && null != this.hostingDevice.getHostedLogicalDevices()) {
            this.hostingDevice.getHostedLogicalDevices().remove(this);
        }
        this.hostingDevice=hostingDevice;
        if (null != hostingDevice && (null == hostingDevice.getHostedLogicalDevices() || !hostingDevice.getHostedLogicalDevices().contains(this))) {
            this.set_type(this.get_type());
            if (null == hostingDevice.getHostedLogicalDevices()) {
                hostingDevice.setHostedLogicalDevices(new HashSet<>());
            }
            hostingDevice.addHostedLogicalDevices(this);
        }
    }

    public void addManagedResources(Resource element) {
        this.setAssocModified(true);
        this.managedResources.add(element);
        if (null != element && (null == element.getManagingDevices() || !element.getManagingDevices().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getManagingDevices()) {
                element.setManagingDevices(new HashSet<>());
            }
            element.addManagingDevices(this);
        }
    }

    public void removeManagedResources(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.managedResources  && this.managedResources.remove(element) && null != element.getManagingDevices() && element.getManagingDevices().contains(this)) {
            element.getManagingDevices().remove(this);
        }
    }

    public Set<Resource> getManagedResources() {
        return this.managedResources;
    }

    public void setManagedResources(Set<Resource> managedResources) {
        this.setAssocModified(true);
        if (null != this.managedResources) {
            List<Resource> toDelete = new ArrayList<>(this.managedResources);
            boolean setToNull = null == managedResources || managedResources.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(managedResources);
            }
            for (Resource each : toDelete) {
                if (null != each.getManagingDevices()) {
                    each.getManagingDevices().remove(this);
                }
            }
        }
        this.managedResources=managedResources;
        if (null != managedResources) {
            for (Resource each: managedResources) {
                if (null != each && (null == each.getManagingDevices() || !each.getManagingDevices().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getManagingDevices()) {
                        each.setManagingDevices(new HashSet<>());
                    }
                    each.addManagingDevices(this);
                }
            }
        }
    }

    public void addContained(LogicalResource element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContainingLogicalDevice() || !element.getContainingLogicalDevice().equals(this))) {
            this.set_type(this.get_type());
            element.setContainingLogicalDevice(this);
        }
    }

    public void removeContained(LogicalResource element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContainingLogicalDevice()) {
            element.setContainingLogicalDevice(null);
        }
    }

    public Set<LogicalResource> getContained() {
        return this.contained;
    }

    public void setContained(Set<LogicalResource> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<LogicalResource> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (LogicalResource each : toDelete) {
                each.setContainingLogicalDevice(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (LogicalResource each: contained) {
                if (null != each && ( null == each.getContainingLogicalDevice() || !each.getContainingLogicalDevice().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContainingLogicalDevice(this);
                }
            }
        }
    }

    public SchemaSpecification getLogicalDeviceSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.logicalDeviceSpecification = new SchemaSpecification();
            this.logicalDeviceSpecification.setId(this.getKind());
            this.logicalDeviceSpecification.setName(this.getKind());
            this.logicalDeviceSpecification.setReferredType(this.getKind());
            this.logicalDeviceSpecification.setVersion(this.getSchemaVersion());
        }
        return this.logicalDeviceSpecification;
    }

    public void setLogicalDeviceSpecification(SchemaSpecification logicalDeviceSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != logicalDeviceSpecification && null != logicalDeviceSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(logicalDeviceSpecification);
                    this.setKind(logicalDeviceSpecification.getId());
                }
                else if (!this.getKind().equals(logicalDeviceSpecification.getId())) {
                    throw new ModificationNotAllowedException("logicalDeviceSpecification modification not allowed");
                }
            }
            this.logicalDeviceSpecification = logicalDeviceSpecification;
        }
    }

    public Software getSoftware() {
        return this.software;
    }

    public void setSoftware(Software software) {
        if ((software==null && this.software!=null) || (software != null && !software.equals(this.software))) {
            this.setModified(true);
        }
        this.software=software;
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).toString();
    }
}
