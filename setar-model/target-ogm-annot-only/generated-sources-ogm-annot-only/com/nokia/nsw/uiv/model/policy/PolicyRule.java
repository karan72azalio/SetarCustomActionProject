// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.policy;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.policy.PolicyRule.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.policy.PolicyRule")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.policy.PolicyRule"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.policy.PolicyRule"
)
public class PolicyRule extends Entity {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification policyRuleSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(PolicyRuleConditionConverter.class)
    private Map<String,String> condition = new UivHashMap<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private String criteria;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    @Properties
    @Convert(PolicyRuleActionConverter.class)
    private Map<String,String> action = new UivHashMap<>();

    @JsonFilter("policy")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.policy.Policy}"
    )
    protected Policy policy;

    public SchemaSpecification getPolicyRuleSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.policyRuleSpecification = new SchemaSpecification();
            this.policyRuleSpecification.setId(this.getKind());
            this.policyRuleSpecification.setName(this.getKind());
            this.policyRuleSpecification.setReferredType(this.getKind());
            this.policyRuleSpecification.setVersion(this.getSchemaVersion());
        }
        return this.policyRuleSpecification;
    }

    public void setPolicyRuleSpecification(SchemaSpecification policyRuleSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != policyRuleSpecification && null != policyRuleSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(policyRuleSpecification);
                    this.setKind(policyRuleSpecification.getId());
                }
                else if (!this.getKind().equals(policyRuleSpecification.getId())) {
                    throw new ModificationNotAllowedException("policyRuleSpecification modification not allowed");
                }
            }
            this.policyRuleSpecification = policyRuleSpecification;
        }
    }

    public Map<String, String> getCondition() {
        return this.condition;
    }

    public void setCondition(Map<String, String> condition) {
        if ((condition==null && this.condition!=null) || (condition != null && !condition.equals(this.condition))) {
            this.setModified(true);
        }
        if (this.condition != null && condition != null && !(condition instanceof UivHashMap)) {
            this.condition.putAll(condition);
        }
        this.condition=condition;
    }

    public String getCriteria() {
        return this.criteria;
    }

    public void setCriteria(String criteria) {
        if ((criteria==null && this.criteria!=null) || (criteria != null && !criteria.equals(this.criteria))) {
            this.setModified(true);
        }
        this.criteria=criteria;
    }

    public Map<String, String> getAction() {
        return this.action;
    }

    public void setAction(Map<String, String> action) {
        if ((action==null && this.action!=null) || (action != null && !action.equals(this.action))) {
            this.setModified(true);
        }
        if (this.action != null && action != null && !(action instanceof UivHashMap)) {
            this.action.putAll(action);
        }
        this.action=action;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof PolicyRule)) return false;
        PolicyRule other = (PolicyRule) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.condition, other.condition)
                .append(this.criteria, other.criteria)
                .append(this.action, other.action)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(condition)
                .append(criteria)
                .append(action)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("condition", this.condition)
                .append("criteria", this.criteria)
                .append("action", this.action)
                .toString();
    }

    public Policy getPolicy() {
        return this.policy;
    }

    public void setPolicy(Policy policy) {
        this.setAssocModified(true);
        if (null == policy && null != this.policy && null != this.policy.getPolicyRule()) {
            this.policy.getPolicyRule().remove(this);
        }
        this.policy=policy;
        if (null != policy && (null == policy.getPolicyRule() || !policy.getPolicyRule().contains(this))) {
            this.set_type(this.get_type());
            if (null == policy.getPolicyRule()) {
                policy.setPolicyRule(new HashSet<>());
            }
            policy.addPolicyRule(this);
        }
    }
}
