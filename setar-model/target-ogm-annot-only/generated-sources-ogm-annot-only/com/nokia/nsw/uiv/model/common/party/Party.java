// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common.party;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.nokia.nsw.uiv.model.common.Entity;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.party.Individual.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Individual.class, name = "individual"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Organization.class, name = "organization")
})
@JsonFilter("com.nokia.nsw.uiv.model.common.party.Party")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.party.Party"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.party.Party"
)
public abstract class Party extends Entity {
    @JsonFilter("organization")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Organization}"
    )
    protected Organization organization;

    @JsonFilter("partyRole")
    @Relationship(
            type = "HAS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.party.PartyRole]"
    )
    protected Set<PartyRole> partyRole = new HashSet<>();

    public Organization getOrganization() {
        return this.organization;
    }

    public void setOrganization(Organization organization) {
        this.setAssocModified(true);
        if (null == organization && null != this.organization && null != this.organization.getParty()) {
            this.organization.getParty().remove(this);
        }
        this.organization=organization;
        if (null != organization && (null == organization.getParty() || !organization.getParty().contains(this))) {
            this.set_type(this.get_type());
            if (null == organization.getParty()) {
                organization.setParty(new HashSet<>());
            }
            organization.addParty(this);
        }
    }

    public void addPartyRole(PartyRole element) {
        this.setAssocModified(true);
        this.partyRole.add(element);
        if (null != element && (null == element.getParty() || !element.getParty().equals(this))) {
            this.set_type(this.get_type());
            element.setParty(this);
        }
    }

    public void removePartyRole(PartyRole element) {
        this.setAssocModified(true);
        if (null != element && null != this.partyRole  && this.partyRole.remove(element) && null != element.getParty()) {
            element.setParty(null);
        }
    }

    public Set<PartyRole> getPartyRole() {
        return this.partyRole;
    }

    public void setPartyRole(Set<PartyRole> partyRole) {
        this.setAssocModified(true);
        if (null != this.partyRole) {
            List<PartyRole> toDelete = new ArrayList<>(this.partyRole);
            boolean setToNull = null == partyRole || partyRole.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(partyRole);
            }
            for (PartyRole each : toDelete) {
                each.setParty(null);
            }
        }
        this.partyRole=partyRole;
        if (null != partyRole) {
            for (PartyRole each: partyRole) {
                if (null != each && ( null == each.getParty() || !each.getParty().equals(this))) {
                    this.set_type(this.get_type());
                    each.setParty(this);
                }
            }
        }
    }
}
