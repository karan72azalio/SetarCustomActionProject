// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.LogicalInterface.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.LogicalInterface")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.LogicalInterface"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.LogicalInterface"
)
public class LogicalInterface extends LogicalComponent {
    @JsonFilter("owningPipe")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.Pipe}"
    )
    protected Pipe owningPipe;

    @JsonFilter("protocol")
    @Relationship(
            type = "IMPLEMENTS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Protocol]"
    )
    protected Set<Protocol> protocol = new HashSet<>();

    public Pipe getOwningPipe() {
        return this.owningPipe;
    }

    public void setOwningPipe(Pipe owningPipe) {
        this.setAssocModified(true);
        if (null == owningPipe && null != this.owningPipe && null != this.owningPipe.getOwnedLogicalInterface()) {
            this.owningPipe.getOwnedLogicalInterface().remove(this);
        }
        this.owningPipe=owningPipe;
        if (null != owningPipe && (null == owningPipe.getOwnedLogicalInterface() || !owningPipe.getOwnedLogicalInterface().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningPipe.getOwnedLogicalInterface()) {
                owningPipe.setOwnedLogicalInterface(new HashSet<>());
            }
            owningPipe.addOwnedLogicalInterface(this);
        }
    }

    public void addProtocol(Protocol element) {
        this.setAssocModified(true);
        this.protocol.add(element);
        if (null != element && (null == element.getLogicalInterface() || !element.getLogicalInterface().equals(this))) {
            this.set_type(this.get_type());
            element.setLogicalInterface(this);
        }
    }

    public void removeProtocol(Protocol element) {
        this.setAssocModified(true);
        if (null != element && null != this.protocol  && this.protocol.remove(element) && null != element.getLogicalInterface()) {
            element.setLogicalInterface(null);
        }
    }

    public Set<Protocol> getProtocol() {
        return this.protocol;
    }

    public void setProtocol(Set<Protocol> protocol) {
        this.setAssocModified(true);
        if (null != this.protocol) {
            List<Protocol> toDelete = new ArrayList<>(this.protocol);
            boolean setToNull = null == protocol || protocol.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(protocol);
            }
            for (Protocol each : toDelete) {
                each.setLogicalInterface(null);
            }
        }
        this.protocol=protocol;
        if (null != protocol) {
            for (Protocol each: protocol) {
                if (null != each && ( null == each.getLogicalInterface() || !each.getLogicalInterface().equals(this))) {
                    this.set_type(this.get_type());
                    each.setLogicalInterface(this);
                }
            }
        }
    }
}
