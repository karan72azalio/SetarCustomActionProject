// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.service;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.common.party.Customer;
import com.setar.uiv.model.product.Product;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.service.Subscription.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.service.Subscription")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.service.Subscription"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.service.Subscription"
)
public class Subscription extends Entity {
    @JsonFilter("customer")
    @Relationship(
            type = "HAS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Customer}"
    )
    protected Customer customer;

    @JsonFilter("service")
    @Relationship(
            type = "FOR",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> service = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification subscriptionSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date startDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date endDate;

    @JsonFilter("product")
    @Relationship(
            type = "FOR",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.setar.uiv.model.product.Product]"
    )
    protected Set<Product> product = new HashSet<>();

    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.setAssocModified(true);
        if (null == customer && null != this.customer && null != this.customer.getSubscription()) {
            this.customer.getSubscription().remove(this);
        }
        this.customer=customer;
        if (null != customer && (null == customer.getSubscription() || !customer.getSubscription().contains(this))) {
            this.set_type(this.get_type());
            if (null == customer.getSubscription()) {
                customer.setSubscription(new HashSet<>());
            }
            customer.addSubscription(this);
        }
    }

    public void addService(Service element) {
        this.setAssocModified(true);
        this.service.add(element);
        if (null != element && (null == element.getSubscription() || !element.getSubscription().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getSubscription()) {
                element.setSubscription(new HashSet<>());
            }
            element.addSubscription(this);
        }
    }

    public void removeService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.service  && this.service.remove(element) && null != element.getSubscription() && element.getSubscription().contains(this)) {
            element.getSubscription().remove(this);
        }
    }

    public Set<Service> getService() {
        return this.service;
    }

    public void setService(Set<Service> service) {
        this.setAssocModified(true);
        if (null != this.service) {
            List<Service> toDelete = new ArrayList<>(this.service);
            boolean setToNull = null == service || service.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(service);
            }
            for (Service each : toDelete) {
                if (null != each.getSubscription()) {
                    each.getSubscription().remove(this);
                }
            }
        }
        this.service=service;
        if (null != service) {
            for (Service each: service) {
                if (null != each && (null == each.getSubscription() || !each.getSubscription().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getSubscription()) {
                        each.setSubscription(new HashSet<>());
                    }
                    each.addSubscription(this);
                }
            }
        }
    }

    public SchemaSpecification getSubscriptionSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.subscriptionSpecification = new SchemaSpecification();
            this.subscriptionSpecification.setId(this.getKind());
            this.subscriptionSpecification.setName(this.getKind());
            this.subscriptionSpecification.setReferredType(this.getKind());
            this.subscriptionSpecification.setVersion(this.getSchemaVersion());
        }
        return this.subscriptionSpecification;
    }

    public void setSubscriptionSpecification(SchemaSpecification subscriptionSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != subscriptionSpecification && null != subscriptionSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(subscriptionSpecification);
                    this.setKind(subscriptionSpecification.getId());
                }
                else if (!this.getKind().equals(subscriptionSpecification.getId())) {
                    throw new ModificationNotAllowedException("subscriptionSpecification modification not allowed");
                }
            }
            this.subscriptionSpecification = subscriptionSpecification;
        }
    }

    public java.util.Date getStartDate() {
        return this.startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        if ((startDate==null && this.startDate!=null) || (startDate != null && !startDate.equals(this.startDate))) {
            this.setModified(true);
        }
        this.startDate=startDate;
    }

    public java.util.Date getEndDate() {
        return this.endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        if ((endDate==null && this.endDate!=null) || (endDate != null && !endDate.equals(this.endDate))) {
            this.setModified(true);
        }
        this.endDate=endDate;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Subscription)) return false;
        Subscription other = (Subscription) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.startDate, other.startDate)
                .append(this.endDate, other.endDate)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(startDate)
                .append(endDate)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("startDate", this.startDate)
                .append("endDate", this.endDate)
                .toString();
    }

    public void addProduct(Product element) {
        this.setAssocModified(true);
        this.product.add(element);
        if (null != element && (null == element.getSubscription() || !element.getSubscription().equals(this))) {
            this.set_type(this.get_type());
            element.setSubscription(this);
        }
    }

    public void removeProduct(Product element) {
        this.setAssocModified(true);
        if (null != element && null != this.product  && this.product.remove(element) && null != element.getSubscription()) {
            element.setSubscription(null);
        }
    }

    public Set<Product> getProduct() {
        return this.product;
    }

    public void setProduct(Set<Product> product) {
        this.setAssocModified(true);
        if (null != this.product) {
            List<Product> toDelete = new ArrayList<>(this.product);
            boolean setToNull = null == product || product.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(product);
            }
            for (Product each : toDelete) {
                each.setSubscription(null);
            }
        }
        this.product=product;
        if (null != product) {
            for (Product each: product) {
                if (null != each && ( null == each.getSubscription() || !each.getSubscription().equals(this))) {
                    this.set_type(this.get_type());
                    each.setSubscription(this);
                }
            }
        }
    }
}
