// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.location;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.location.GeographicSite.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.location.GeographicSite")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.location.GeographicSite"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.location.GeographicSite"
)
public class GeographicSite extends Place {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification geographicSiteSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String code;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    @Enum("[Planned, Active, Inactive, Obsolete]")
    private GeographicSiteStatus status;

    public SchemaSpecification getGeographicSiteSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.geographicSiteSpecification = new SchemaSpecification();
            this.geographicSiteSpecification.setId(this.getKind());
            this.geographicSiteSpecification.setName(this.getKind());
            this.geographicSiteSpecification.setReferredType(this.getKind());
            this.geographicSiteSpecification.setVersion(this.getSchemaVersion());
        }
        return this.geographicSiteSpecification;
    }

    public void setGeographicSiteSpecification(SchemaSpecification geographicSiteSpecification)
            throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != geographicSiteSpecification && null != geographicSiteSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(geographicSiteSpecification);
                    this.setKind(geographicSiteSpecification.getId());
                }
                else if (!this.getKind().equals(geographicSiteSpecification.getId())) {
                    throw new ModificationNotAllowedException("geographicSiteSpecification modification not allowed");
                }
            }
            this.geographicSiteSpecification = geographicSiteSpecification;
        }
    }

    public String getCode() {
        return this.code;
    }

    public void setCode(String code) {
        if ((code==null && this.code!=null) || (code != null && !code.equals(this.code))) {
            this.setModified(true);
        }
        this.code=code;
    }

    public GeographicSiteStatus getStatus() {
        return this.status;
    }

    public void setStatus(GeographicSiteStatus status) {
        if ((status==null && this.status!=null) || (status != null && !status.equals(this.status))) {
            this.setModified(true);
        }
        this.status=status;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof GeographicSite)) return false;
        GeographicSite other = (GeographicSite) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.code, other.code)
                .append(this.status, other.status)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(code)
                .append(status)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("code", this.code)
                .append("status", this.status)
                .toString();
    }
}
