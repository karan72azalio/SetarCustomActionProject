// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.Reference.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.Reference")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.Reference"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.Reference"
)
public class Reference extends Entity {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification referenceSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String url;

    @JsonFilter("entity")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.Entity}"
    )
    protected Entity entity;

    public SchemaSpecification getReferenceSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.referenceSpecification = new SchemaSpecification();
            this.referenceSpecification.setId(this.getKind());
            this.referenceSpecification.setName(this.getKind());
            this.referenceSpecification.setReferredType(this.getKind());
            this.referenceSpecification.setVersion(this.getSchemaVersion());
        }
        return this.referenceSpecification;
    }

    public void setReferenceSpecification(SchemaSpecification referenceSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != referenceSpecification && null != referenceSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(referenceSpecification);
                    this.setKind(referenceSpecification.getId());
                }
                else if (!this.getKind().equals(referenceSpecification.getId())) {
                    throw new ModificationNotAllowedException("referenceSpecification modification not allowed");
                }
            }
            this.referenceSpecification = referenceSpecification;
        }
    }

    public String getUrl() {
        return this.url;
    }

    public void setUrl(String url) {
        if ((url==null && this.url!=null) || (url != null && !url.equals(this.url))) {
            this.setModified(true);
        }
        this.url=url;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Reference)) return false;
        Reference other = (Reference) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.url, other.url)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(url)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("url", this.url)
                .toString();
    }

    public Entity getEntity() {
        return this.entity;
    }

    public void setEntity(Entity entity) {
        this.setAssocModified(true);
        if (null == entity && null != this.entity && null != this.entity.getReference()) {
            this.entity.getReference().remove(this);
        }
        this.entity=entity;
        if (null != entity && (null == entity.getReference() || !entity.getReference().contains(this))) {
            this.set_type(this.get_type());
            if (null == entity.getReference()) {
                entity.setReference(new HashSet<>());
            }
            entity.addReference(this);
        }
    }
}
