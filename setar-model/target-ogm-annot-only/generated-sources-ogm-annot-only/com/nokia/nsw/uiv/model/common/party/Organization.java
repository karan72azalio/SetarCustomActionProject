// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common.party;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.party.Organization.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.party.Organization")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.party.Organization"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.party.Organization"
)
public class Organization extends Party {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification organizationSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Boolean isLegalEntity;

    @JsonFilter("party")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.party.Party]"
    )
    protected Set<Party> party = new HashSet<>();

    public SchemaSpecification getOrganizationSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.organizationSpecification = new SchemaSpecification();
            this.organizationSpecification.setId(this.getKind());
            this.organizationSpecification.setName(this.getKind());
            this.organizationSpecification.setReferredType(this.getKind());
            this.organizationSpecification.setVersion(this.getSchemaVersion());
        }
        return this.organizationSpecification;
    }

    public void setOrganizationSpecification(SchemaSpecification organizationSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != organizationSpecification && null != organizationSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(organizationSpecification);
                    this.setKind(organizationSpecification.getId());
                }
                else if (!this.getKind().equals(organizationSpecification.getId())) {
                    throw new ModificationNotAllowedException("organizationSpecification modification not allowed");
                }
            }
            this.organizationSpecification = organizationSpecification;
        }
    }

    public Boolean getIsLegalEntity() {
        return this.isLegalEntity;
    }

    public void setIsLegalEntity(Boolean isLegalEntity) {
        if ((isLegalEntity==null && this.isLegalEntity!=null) || (isLegalEntity != null && !isLegalEntity.equals(this.isLegalEntity))) {
            this.setModified(true);
        }
        this.isLegalEntity=isLegalEntity;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Organization)) return false;
        Organization other = (Organization) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.isLegalEntity, other.isLegalEntity)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(isLegalEntity)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("isLegalEntity", this.isLegalEntity)
                .toString();
    }

    public void addParty(Party element) {
        this.setAssocModified(true);
        this.party.add(element);
        if (null != element && (null == element.getOrganization() || !element.getOrganization().equals(this))) {
            this.set_type(this.get_type());
            element.setOrganization(this);
        }
    }

    public void removeParty(Party element) {
        this.setAssocModified(true);
        if (null != element && null != this.party  && this.party.remove(element) && null != element.getOrganization()) {
            element.setOrganization(null);
        }
    }

    public Set<Party> getParty() {
        return this.party;
    }

    public void setParty(Set<Party> party) {
        this.setAssocModified(true);
        if (null != this.party) {
            List<Party> toDelete = new ArrayList<>(this.party);
            boolean setToNull = null == party || party.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(party);
            }
            for (Party each : toDelete) {
                each.setOrganization(null);
            }
        }
        this.party=party;
        if (null != party) {
            for (Party each: party) {
                if (null != each && ( null == each.getOrganization() || !each.getOrganization().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOrganization(this);
                }
            }
        }
    }
}
