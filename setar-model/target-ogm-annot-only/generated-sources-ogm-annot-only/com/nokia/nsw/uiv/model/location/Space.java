// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.location;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.location.Space.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.location.Space")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.location.Space"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.location.Space"
)
public class Space extends GeographicLocation {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification spaceSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[subUnitType:java.lang.String, subUnitNr:java.lang.String, levelType:java.lang.String, levelNr:java.lang.String, buildingName:java.lang.String, privateStreetName:java.lang.String]")
    @Valid
    @Convert(GeographicSubAddressConverter.class)
    private GeographicSubAddress subAddress;

    public SchemaSpecification getSpaceSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.spaceSpecification = new SchemaSpecification();
            this.spaceSpecification.setId(this.getKind());
            this.spaceSpecification.setName(this.getKind());
            this.spaceSpecification.setReferredType(this.getKind());
            this.spaceSpecification.setVersion(this.getSchemaVersion());
        }
        return this.spaceSpecification;
    }

    public void setSpaceSpecification(SchemaSpecification spaceSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != spaceSpecification && null != spaceSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(spaceSpecification);
                    this.setKind(spaceSpecification.getId());
                }
                else if (!this.getKind().equals(spaceSpecification.getId())) {
                    throw new ModificationNotAllowedException("spaceSpecification modification not allowed");
                }
            }
            this.spaceSpecification = spaceSpecification;
        }
    }

    public GeographicSubAddress getSubAddress() {
        return this.subAddress;
    }

    public void setSubAddress(GeographicSubAddress subAddress) {
        if ((subAddress==null && this.subAddress!=null) || (subAddress != null && !subAddress.equals(this.subAddress))) {
            this.setModified(true);
        }
        this.subAddress=subAddress;
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).toString();
    }
}
