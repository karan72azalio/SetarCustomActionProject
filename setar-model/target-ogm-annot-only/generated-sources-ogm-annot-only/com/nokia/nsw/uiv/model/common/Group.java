// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.Group.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.Group")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.Group"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.Group"
)
public class Group extends Entity {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification groupSpecification;

    @JsonFilter("entity")
    @Relationship(
            type = "GROUPS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Entity]"
    )
    protected Set<Entity> entity = new HashSet<>();

    @JsonFilter("forEntity")
    @Relationship(
            type = "FOR",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Entity]"
    )
    protected Set<Entity> forEntity = new HashSet<>();

    public SchemaSpecification getGroupSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.groupSpecification = new SchemaSpecification();
            this.groupSpecification.setId(this.getKind());
            this.groupSpecification.setName(this.getKind());
            this.groupSpecification.setReferredType(this.getKind());
            this.groupSpecification.setVersion(this.getSchemaVersion());
        }
        return this.groupSpecification;
    }

    public void setGroupSpecification(SchemaSpecification groupSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != groupSpecification && null != groupSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(groupSpecification);
                    this.setKind(groupSpecification.getId());
                }
                else if (!this.getKind().equals(groupSpecification.getId())) {
                    throw new ModificationNotAllowedException("groupSpecification modification not allowed");
                }
            }
            this.groupSpecification = groupSpecification;
        }
    }

    public void addEntity(Entity element) {
        this.setAssocModified(true);
        this.entity.add(element);
        if (null != element && (null == element.getGroup() || !element.getGroup().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getGroup()) {
                element.setGroup(new HashSet<>());
            }
            element.addGroup(this);
        }
    }

    public void removeEntity(Entity element) {
        this.setAssocModified(true);
        if (null != element && null != this.entity  && this.entity.remove(element) && null != element.getGroup() && element.getGroup().contains(this)) {
            element.getGroup().remove(this);
        }
    }

    public Set<Entity> getEntity() {
        return this.entity;
    }

    public void setEntity(Set<Entity> entity) {
        this.setAssocModified(true);
        if (null != this.entity) {
            List<Entity> toDelete = new ArrayList<>(this.entity);
            boolean setToNull = null == entity || entity.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(entity);
            }
            for (Entity each : toDelete) {
                if (null != each.getGroup()) {
                    each.getGroup().remove(this);
                }
            }
        }
        this.entity=entity;
        if (null != entity) {
            for (Entity each: entity) {
                if (null != each && (null == each.getGroup() || !each.getGroup().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getGroup()) {
                        each.setGroup(new HashSet<>());
                    }
                    each.addGroup(this);
                }
            }
        }
    }

    public void addForEntity(Entity element) {
        this.setAssocModified(true);
        this.forEntity.add(element);
        if (null != element && (null == element.getHasGroup() || !element.getHasGroup().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getHasGroup()) {
                element.setHasGroup(new HashSet<>());
            }
            element.addHasGroup(this);
        }
    }

    public void removeForEntity(Entity element) {
        this.setAssocModified(true);
        if (null != element && null != this.forEntity  && this.forEntity.remove(element) && null != element.getHasGroup() && element.getHasGroup().contains(this)) {
            element.getHasGroup().remove(this);
        }
    }

    public Set<Entity> getForEntity() {
        return this.forEntity;
    }

    public void setForEntity(Set<Entity> forEntity) {
        this.setAssocModified(true);
        if (null != this.forEntity) {
            List<Entity> toDelete = new ArrayList<>(this.forEntity);
            boolean setToNull = null == forEntity || forEntity.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(forEntity);
            }
            for (Entity each : toDelete) {
                if (null != each.getHasGroup()) {
                    each.getHasGroup().remove(this);
                }
            }
        }
        this.forEntity=forEntity;
        if (null != forEntity) {
            for (Entity each: forEntity) {
                if (null != each && (null == each.getHasGroup() || !each.getHasGroup().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getHasGroup()) {
                        each.setHasGroup(new HashSet<>());
                    }
                    each.addHasGroup(this);
                }
            }
        }
    }
}
