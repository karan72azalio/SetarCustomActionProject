// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.service;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.party.PartyRole;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.service.ServiceProvider.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.service.ServiceProvider")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.service.ServiceProvider"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.service.ServiceProvider"
)
public class ServiceProvider extends PartyRole {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification serviceProviderSpecification;

    @JsonFilter("service")
    @Relationship(
            type = "PROVIDES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> service = new HashSet<>();

    public SchemaSpecification getServiceProviderSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.serviceProviderSpecification = new SchemaSpecification();
            this.serviceProviderSpecification.setId(this.getKind());
            this.serviceProviderSpecification.setName(this.getKind());
            this.serviceProviderSpecification.setReferredType(this.getKind());
            this.serviceProviderSpecification.setVersion(this.getSchemaVersion());
        }
        return this.serviceProviderSpecification;
    }

    public void setServiceProviderSpecification(SchemaSpecification serviceProviderSpecification)
            throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != serviceProviderSpecification && null != serviceProviderSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(serviceProviderSpecification);
                    this.setKind(serviceProviderSpecification.getId());
                }
                else if (!this.getKind().equals(serviceProviderSpecification.getId())) {
                    throw new ModificationNotAllowedException("serviceProviderSpecification modification not allowed");
                }
            }
            this.serviceProviderSpecification = serviceProviderSpecification;
        }
    }

    public void addService(Service element) {
        this.setAssocModified(true);
        this.service.add(element);
        if (null != element && (null == element.getServiceProvider() || !element.getServiceProvider().equals(this))) {
            this.set_type(this.get_type());
            element.setServiceProvider(this);
        }
    }

    public void removeService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.service  && this.service.remove(element) && null != element.getServiceProvider()) {
            element.setServiceProvider(null);
        }
    }

    public Set<Service> getService() {
        return this.service;
    }

    public void setService(Set<Service> service) {
        this.setAssocModified(true);
        if (null != this.service) {
            List<Service> toDelete = new ArrayList<>(this.service);
            boolean setToNull = null == service || service.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(service);
            }
            for (Service each : toDelete) {
                each.setServiceProvider(null);
            }
        }
        this.service=service;
        if (null != service) {
            for (Service each: service) {
                if (null != each && ( null == each.getServiceProvider() || !each.getServiceProvider().equals(this))) {
                    this.set_type(this.get_type());
                    each.setServiceProvider(this);
                }
            }
        }
    }
}
