// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.physical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort"
)
public class PhysicalPort extends PhysicalComponent {
    @JsonFilter("physicalLinkCONNECTS")
    @Relationship(
            type = "CONNECTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink]"
    )
    protected Set<PhysicalLink> physicalLinkCONNECTS = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String portNumber;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, BaseT10, BaseT100, BaseT10_100, BaseT1000, BaseT10000, DS0, DS1, DS3, OC3, OC12, OC48, OC192, Other]")
    private PhysicalPortInterfaceType ifType;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String ifTypeOther;

    public void addPhysicalLinkCONNECTS(PhysicalLink element) {
        this.setAssocModified(true);
        this.physicalLinkCONNECTS.add(element);
        if (null != element && (null == element.getPhysicalPortCONNECTS() || !element.getPhysicalPortCONNECTS().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPhysicalPortCONNECTS()) {
                element.setPhysicalPortCONNECTS(new HashSet<>());
            }
            element.addPhysicalPortCONNECTS(this);
        }
    }

    public void removePhysicalLinkCONNECTS(PhysicalLink element) {
        this.setAssocModified(true);
        if (null != element && null != this.physicalLinkCONNECTS  && this.physicalLinkCONNECTS.remove(element) && null != element.getPhysicalPortCONNECTS() && element.getPhysicalPortCONNECTS().contains(this)) {
            element.getPhysicalPortCONNECTS().remove(this);
        }
    }

    public Set<PhysicalLink> getPhysicalLinkCONNECTS() {
        return this.physicalLinkCONNECTS;
    }

    public void setPhysicalLinkCONNECTS(Set<PhysicalLink> physicalLinkCONNECTS) {
        this.setAssocModified(true);
        if (null != this.physicalLinkCONNECTS) {
            List<PhysicalLink> toDelete = new ArrayList<>(this.physicalLinkCONNECTS);
            boolean setToNull = null == physicalLinkCONNECTS || physicalLinkCONNECTS.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(physicalLinkCONNECTS);
            }
            for (PhysicalLink each : toDelete) {
                if (null != each.getPhysicalPortCONNECTS()) {
                    each.getPhysicalPortCONNECTS().remove(this);
                }
            }
        }
        this.physicalLinkCONNECTS=physicalLinkCONNECTS;
        if (null != physicalLinkCONNECTS) {
            for (PhysicalLink each: physicalLinkCONNECTS) {
                if (null != each && (null == each.getPhysicalPortCONNECTS() || !each.getPhysicalPortCONNECTS().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPhysicalPortCONNECTS()) {
                        each.setPhysicalPortCONNECTS(new HashSet<>());
                    }
                    each.addPhysicalPortCONNECTS(this);
                }
            }
        }
    }

    public String getPortNumber() {
        return this.portNumber;
    }

    public void setPortNumber(String portNumber) {
        if ((portNumber==null && this.portNumber!=null) || (portNumber != null && !portNumber.equals(this.portNumber))) {
            this.setModified(true);
        }
        this.portNumber=portNumber;
    }

    public PhysicalPortInterfaceType getIfType() {
        return this.ifType;
    }

    public void setIfType(PhysicalPortInterfaceType ifType) {
        if ((ifType==null && this.ifType!=null) || (ifType != null && !ifType.equals(this.ifType))) {
            this.setModified(true);
        }
        this.ifType=ifType;
    }

    public String getIfTypeOther() {
        return this.ifTypeOther;
    }

    public void setIfTypeOther(String ifTypeOther) {
        if ((ifTypeOther==null && this.ifTypeOther!=null) || (ifTypeOther != null && !ifTypeOther.equals(this.ifTypeOther))) {
            this.setModified(true);
        }
        this.ifTypeOther=ifTypeOther;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof PhysicalPort)) return false;
        PhysicalPort other = (PhysicalPort) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.portNumber, other.portNumber)
                .append(this.ifType, other.ifType)
                .append(this.ifTypeOther, other.ifTypeOther)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(portNumber)
                .append(ifType)
                .append(ifTypeOther)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("portNumber", this.portNumber)
                .append("ifType", this.ifType)
                .append("ifTypeOther", this.ifTypeOther)
                .toString();
    }
}
