// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.ClassificationAttribute;
import com.nokia.nsw.uiv.annotation.ClassificationStore;
import com.nokia.nsw.uiv.annotation.ReadOnly;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.Neo4jDomainNodeObject;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.policy.Policy;
import com.nokia.nsw.uiv.numbermanagement.Identifier;
import com.nokia.nsw.uiv.numbermanagement.Pool;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.Index;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.setar.uiv.model.product.Product.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent.class, name = "virtualComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicArea.class, name = "geographicArea"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalDevice.class, name = "physicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicLocation.class, name = "geographicLocation"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class, name = "virtualLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Configuration.class, name = "configuration"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.ServiceConsumer.class, name = "serviceConsumer"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalComponent.class, name = "logicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.Subscription.class, name = "subscription"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalResource.class, name = "logicalResource"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.Space.class, name = "space"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort.class, name = "virtualPort"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.Reference.class, name = "reference"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Trail.class, name = "trail"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Protocol.class, name = "protocol"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalInterface.class, name = "logicalInterface"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalDevice.class, name = "logicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.Property.class, name = "property"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent.class, name = "physicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Pipe.class, name = "pipe"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Connection.class, name = "connection"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.Place.class, name = "place"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.Group.class, name = "group"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.policy.Policy.class, name = "policy"),
        @JsonSubTypes.Type(value = com.setar.uiv.model.product.Product.class, name = "product"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraResource.class, name = "infraResource"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Individual.class, name = "individual"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink.class, name = "physicalLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.Resource.class, name = "resource"),
        @JsonSubTypes.Type(value = com.setar.uiv.model.product.ResourceFacingService.class, name = "resourceFacingService"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualDevice.class, name = "virtualDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort.class, name = "physicalPort"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicSite.class, name = "geographicSite"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.policy.PolicyRule.class, name = "policyRule"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraDevice.class, name = "infraDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraComponent.class, name = "infraComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.Service.class, name = "service"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.PartyRole.class, name = "partyRole"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Organization.class, name = "organization"),
        @JsonSubTypes.Type(value = com.setar.uiv.model.product.CustomerFacingService.class, name = "customerFacingService"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.service.ServiceProvider.class, name = "serviceProvider"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Party.class, name = "party"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.common.party.Customer.class, name = "customer")
})
@JsonFilter("com.nokia.nsw.uiv.model.common.Entity")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.Entity"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.Entity"
)
public abstract class Entity extends Neo4jDomainNodeObject {
    @JsonFilter("note")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Note]"
    )
    protected Set<Note> note = new HashSet<>();

    @JsonFilter("reference")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Reference]"
    )
    protected Set<Reference> reference = new HashSet<>();

    @JsonFilter("group")
    @Relationship(
            type = "GROUPS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Group]"
    )
    protected Set<Group> group = new HashSet<>();

    @JsonFilter("hasGroup")
    @Relationship(
            type = "FOR",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Group]"
    )
    protected Set<Group> hasGroup = new HashSet<>();

    @JsonFilter("usedPolicy")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.Policy]"
    )
    protected Set<Policy> usedPolicy = new HashSet<>();

    @JsonFilter("ownedPolicy")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.policy.Policy]"
    )
    protected Set<Policy> ownedPolicy = new HashSet<>();

    @JsonFilter("pool")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Pool]"
    )
    protected Set<Pool> pool = new HashSet<>();

    @JsonFilter("identifier")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Identifier]"
    )
    protected Set<Identifier> identifier = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String description;

    @ClassificationStore
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(EntityPropertiesConverter.class)
    private Map<String,Object> properties = new UivHashMap<>();

    @JsonView(UivJsonViews.InternalView.class)
    @Transient
    private SchemaSpecification specification;

    @ClassificationAttribute
    @ReadOnly
    @Index(
            unique = false
    )
    private String kind;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Index(
            unique = false
    )
    private String discoveredName;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Index(
            unique = false
    )
    private String discoveredNamePM;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Index(
            unique = false
    )
    private String discoveredNameFM;

    public void addNote(Note element) {
        this.setAssocModified(true);
        this.note.add(element);
        if (null != element && (null == element.getEntity() || !element.getEntity().equals(this))) {
            this.set_type(this.get_type());
            element.setEntity(this);
        }
    }

    public void removeNote(Note element) {
        this.setAssocModified(true);
        if (null != element && null != this.note  && this.note.remove(element) && null != element.getEntity()) {
            element.setEntity(null);
        }
    }

    public Set<Note> getNote() {
        return this.note;
    }

    public void setNote(Set<Note> note) {
        this.setAssocModified(true);
        if (null != this.note) {
            List<Note> toDelete = new ArrayList<>(this.note);
            boolean setToNull = null == note || note.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(note);
            }
            for (Note each : toDelete) {
                each.setEntity(null);
            }
        }
        this.note=note;
        if (null != note) {
            for (Note each: note) {
                if (null != each && ( null == each.getEntity() || !each.getEntity().equals(this))) {
                    this.set_type(this.get_type());
                    each.setEntity(this);
                }
            }
        }
    }

    public void addReference(Reference element) {
        this.setAssocModified(true);
        this.reference.add(element);
        if (null != element && (null == element.getEntity() || !element.getEntity().equals(this))) {
            this.set_type(this.get_type());
            element.setEntity(this);
        }
    }

    public void removeReference(Reference element) {
        this.setAssocModified(true);
        if (null != element && null != this.reference  && this.reference.remove(element) && null != element.getEntity()) {
            element.setEntity(null);
        }
    }

    public Set<Reference> getReference() {
        return this.reference;
    }

    public void setReference(Set<Reference> reference) {
        this.setAssocModified(true);
        if (null != this.reference) {
            List<Reference> toDelete = new ArrayList<>(this.reference);
            boolean setToNull = null == reference || reference.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(reference);
            }
            for (Reference each : toDelete) {
                each.setEntity(null);
            }
        }
        this.reference=reference;
        if (null != reference) {
            for (Reference each: reference) {
                if (null != each && ( null == each.getEntity() || !each.getEntity().equals(this))) {
                    this.set_type(this.get_type());
                    each.setEntity(this);
                }
            }
        }
    }

    public void addGroup(Group element) {
        this.setAssocModified(true);
        this.group.add(element);
        if (null != element && (null == element.getEntity() || !element.getEntity().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getEntity()) {
                element.setEntity(new HashSet<>());
            }
            element.addEntity(this);
        }
    }

    public void removeGroup(Group element) {
        this.setAssocModified(true);
        if (null != element && null != this.group  && this.group.remove(element) && null != element.getEntity() && element.getEntity().contains(this)) {
            element.getEntity().remove(this);
        }
    }

    public Set<Group> getGroup() {
        return this.group;
    }

    public void setGroup(Set<Group> group) {
        this.setAssocModified(true);
        if (null != this.group) {
            List<Group> toDelete = new ArrayList<>(this.group);
            boolean setToNull = null == group || group.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(group);
            }
            for (Group each : toDelete) {
                if (null != each.getEntity()) {
                    each.getEntity().remove(this);
                }
            }
        }
        this.group=group;
        if (null != group) {
            for (Group each: group) {
                if (null != each && (null == each.getEntity() || !each.getEntity().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getEntity()) {
                        each.setEntity(new HashSet<>());
                    }
                    each.addEntity(this);
                }
            }
        }
    }

    public void addHasGroup(Group element) {
        this.setAssocModified(true);
        this.hasGroup.add(element);
        if (null != element && (null == element.getForEntity() || !element.getForEntity().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getForEntity()) {
                element.setForEntity(new HashSet<>());
            }
            element.addForEntity(this);
        }
    }

    public void removeHasGroup(Group element) {
        this.setAssocModified(true);
        if (null != element && null != this.hasGroup  && this.hasGroup.remove(element) && null != element.getForEntity() && element.getForEntity().contains(this)) {
            element.getForEntity().remove(this);
        }
    }

    public Set<Group> getHasGroup() {
        return this.hasGroup;
    }

    public void setHasGroup(Set<Group> hasGroup) {
        this.setAssocModified(true);
        if (null != this.hasGroup) {
            List<Group> toDelete = new ArrayList<>(this.hasGroup);
            boolean setToNull = null == hasGroup || hasGroup.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(hasGroup);
            }
            for (Group each : toDelete) {
                if (null != each.getForEntity()) {
                    each.getForEntity().remove(this);
                }
            }
        }
        this.hasGroup=hasGroup;
        if (null != hasGroup) {
            for (Group each: hasGroup) {
                if (null != each && (null == each.getForEntity() || !each.getForEntity().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getForEntity()) {
                        each.setForEntity(new HashSet<>());
                    }
                    each.addForEntity(this);
                }
            }
        }
    }

    public void addUsedPolicy(Policy element) {
        this.setAssocModified(true);
        this.usedPolicy.add(element);
        if (null != element && (null == element.getUsingEntity() || !element.getUsingEntity().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingEntity()) {
                element.setUsingEntity(new HashSet<>());
            }
            element.addUsingEntity(this);
        }
    }

    public void removeUsedPolicy(Policy element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedPolicy  && this.usedPolicy.remove(element) && null != element.getUsingEntity() && element.getUsingEntity().contains(this)) {
            element.getUsingEntity().remove(this);
        }
    }

    public Set<Policy> getUsedPolicy() {
        return this.usedPolicy;
    }

    public void setUsedPolicy(Set<Policy> usedPolicy) {
        this.setAssocModified(true);
        if (null != this.usedPolicy) {
            List<Policy> toDelete = new ArrayList<>(this.usedPolicy);
            boolean setToNull = null == usedPolicy || usedPolicy.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedPolicy);
            }
            for (Policy each : toDelete) {
                if (null != each.getUsingEntity()) {
                    each.getUsingEntity().remove(this);
                }
            }
        }
        this.usedPolicy=usedPolicy;
        if (null != usedPolicy) {
            for (Policy each: usedPolicy) {
                if (null != each && (null == each.getUsingEntity() || !each.getUsingEntity().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingEntity()) {
                        each.setUsingEntity(new HashSet<>());
                    }
                    each.addUsingEntity(this);
                }
            }
        }
    }

    public void addOwnedPolicy(Policy element) {
        this.setAssocModified(true);
        this.ownedPolicy.add(element);
        if (null != element && (null == element.getOwningEntity() || !element.getOwningEntity().equals(this))) {
            this.set_type(this.get_type());
            element.setOwningEntity(this);
        }
    }

    public void removeOwnedPolicy(Policy element) {
        this.setAssocModified(true);
        if (null != element && null != this.ownedPolicy  && this.ownedPolicy.remove(element) && null != element.getOwningEntity()) {
            element.setOwningEntity(null);
        }
    }

    public Set<Policy> getOwnedPolicy() {
        return this.ownedPolicy;
    }

    public void setOwnedPolicy(Set<Policy> ownedPolicy) {
        this.setAssocModified(true);
        if (null != this.ownedPolicy) {
            List<Policy> toDelete = new ArrayList<>(this.ownedPolicy);
            boolean setToNull = null == ownedPolicy || ownedPolicy.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(ownedPolicy);
            }
            for (Policy each : toDelete) {
                each.setOwningEntity(null);
            }
        }
        this.ownedPolicy=ownedPolicy;
        if (null != ownedPolicy) {
            for (Policy each: ownedPolicy) {
                if (null != each && ( null == each.getOwningEntity() || !each.getOwningEntity().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOwningEntity(this);
                }
            }
        }
    }

    public void addPool(Pool element) {
        this.setAssocModified(true);
        this.pool.add(element);
        if (null != element && (null == element.getEntity() || !element.getEntity().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getEntity()) {
                element.setEntity(new HashSet<>());
            }
            element.addEntity(this);
        }
    }

    public void removePool(Pool element) {
        this.setAssocModified(true);
        if (null != element && null != this.pool  && this.pool.remove(element) && null != element.getEntity() && element.getEntity().contains(this)) {
            element.getEntity().remove(this);
        }
    }

    public Set<Pool> getPool() {
        return this.pool;
    }

    public void setPool(Set<Pool> pool) {
        this.setAssocModified(true);
        if (null != this.pool) {
            List<Pool> toDelete = new ArrayList<>(this.pool);
            boolean setToNull = null == pool || pool.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(pool);
            }
            for (Pool each : toDelete) {
                if (null != each.getEntity()) {
                    each.getEntity().remove(this);
                }
            }
        }
        this.pool=pool;
        if (null != pool) {
            for (Pool each: pool) {
                if (null != each && (null == each.getEntity() || !each.getEntity().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getEntity()) {
                        each.setEntity(new HashSet<>());
                    }
                    each.addEntity(this);
                }
            }
        }
    }

    public void addIdentifier(Identifier element) {
        this.setAssocModified(true);
        this.identifier.add(element);
        if (null != element && (null == element.getEntity() || !element.getEntity().equals(this))) {
            this.set_type(this.get_type());
            element.setEntity(this);
        }
    }

    public void removeIdentifier(Identifier element) {
        this.setAssocModified(true);
        if (null != element && null != this.identifier  && this.identifier.remove(element) && null != element.getEntity()) {
            element.setEntity(null);
        }
    }

    public Set<Identifier> getIdentifier() {
        return this.identifier;
    }

    public void setIdentifier(Set<Identifier> identifier) {
        this.setAssocModified(true);
        if (null != this.identifier) {
            List<Identifier> toDelete = new ArrayList<>(this.identifier);
            boolean setToNull = null == identifier || identifier.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(identifier);
            }
            for (Identifier each : toDelete) {
                each.setEntity(null);
            }
        }
        this.identifier=identifier;
        if (null != identifier) {
            for (Identifier each: identifier) {
                if (null != each && ( null == each.getEntity() || !each.getEntity().equals(this))) {
                    this.set_type(this.get_type());
                    each.setEntity(this);
                }
            }
        }
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        if ((description==null && this.description!=null) || (description != null && !description.equals(this.description))) {
            this.setModified(true);
        }
        this.description=description;
    }

    public Map<String, Object> getProperties() {
        return this.properties;
    }

    public void setProperties(Map<String, Object> properties) {
        if ((properties==null && this.properties!=null) || (properties != null && !properties.equals(this.properties))) {
            this.setModified(true);
        }
        if (this.properties != null && properties != null && !(properties instanceof UivHashMap)) {
            this.properties.putAll(properties);
        }
        this.properties=properties;
    }

    public String getKind() {
        return this.kind;
    }

    public void setKind(String kind) throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if( null == this.specification || !Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != this.kind && null != kind && !this.kind.equals(kind)) {
                throw new ModificationNotAllowedException("kind modification not allowed");
            }
            if (null != this.getUuid() && null == this.kind && null != kind) {
                throw new ModificationNotAllowedException("kind modification not allowed");
            }
        }
        else if( Boolean.parseBoolean(featureFlag.getTmfEnabled()) && null != this.specification && null != this.specification.getId()) {
            if ((null != this.getUuid() && null == this.kind) || (null == this.getUuid() && 
            (null != this.kind && !this.specification.getId().equals(this.kind)) || !this.specification.getId().equals(kind))) {
                throw new ModificationNotAllowedException("kind modification not allowed");
            }
        }
        if ((kind==null && this.kind!=null) || (kind != null && !kind.equals(this.kind))) {
            this.setModified(true);
        }
        this.kind=kind;
    }

    public SchemaSpecification getSpecification() {
        return specification;
    }

    public void setSpecification(SchemaSpecification specification) {
        this.specification = specification;
    }

    public String getDiscoveredName() {
        return this.discoveredName;
    }

    public void setDiscoveredName(String discoveredName) {
        if ((discoveredName==null && this.discoveredName!=null) || (discoveredName != null && !discoveredName.equals(this.discoveredName))) {
            this.setModified(true);
        }
        this.discoveredName=discoveredName;
    }

    public String getDiscoveredNamePM() {
        return this.discoveredNamePM;
    }

    public void setDiscoveredNamePM(String discoveredNamePM) {
        if ((discoveredNamePM==null && this.discoveredNamePM!=null) || (discoveredNamePM != null && !discoveredNamePM.equals(this.discoveredNamePM))) {
            this.setModified(true);
        }
        this.discoveredNamePM=discoveredNamePM;
    }

    public String getDiscoveredNameFM() {
        return this.discoveredNameFM;
    }

    public void setDiscoveredNameFM(String discoveredNameFM) {
        if ((discoveredNameFM==null && this.discoveredNameFM!=null) || (discoveredNameFM != null && !discoveredNameFM.equals(this.discoveredNameFM))) {
            this.setModified(true);
        }
        this.discoveredNameFM=discoveredNameFM;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Entity)) return false;
        Entity other = (Entity) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.description, other.description)
                .append(this.properties, other.properties)
                .append(this.kind, other.kind)
                .append(this.discoveredName, other.discoveredName)
                .append(this.discoveredNamePM, other.discoveredNamePM)
                .append(this.discoveredNameFM, other.discoveredNameFM)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(description)
                .append(properties)
                .append(kind)
                .append(discoveredName)
                .append(discoveredNamePM)
                .append(discoveredNameFM)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("description", this.description)
                .append("properties", this.properties)
                .append("kind", this.kind)
                .append("discoveredName", this.discoveredName)
                .append("discoveredNamePM", this.discoveredNamePM)
                .append("discoveredNameFM", this.discoveredNameFM)
                .toString();
    }
}
