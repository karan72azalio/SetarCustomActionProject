// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.Protocol.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.Protocol")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.Protocol"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.Protocol"
)
public class Protocol extends LogicalResource {
    @JsonFilter("virtualPort")
    @Relationship(
            type = "IMPLEMENTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort}"
    )
    protected VirtualPort virtualPort;

    @JsonFilter("logicalInterface")
    @Relationship(
            type = "IMPLEMENTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalInterface}"
    )
    protected LogicalInterface logicalInterface;

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification protocolSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Integer processId;

    public VirtualPort getVirtualPort() {
        return this.virtualPort;
    }

    public void setVirtualPort(VirtualPort virtualPort) {
        this.setAssocModified(true);
        if (null == virtualPort && null != this.virtualPort && null != this.virtualPort.getProtocol()) {
            this.virtualPort.getProtocol().remove(this);
        }
        this.virtualPort=virtualPort;
        if (null != virtualPort && (null == virtualPort.getProtocol() || !virtualPort.getProtocol().contains(this))) {
            this.set_type(this.get_type());
            if (null == virtualPort.getProtocol()) {
                virtualPort.setProtocol(new HashSet<>());
            }
            virtualPort.addProtocol(this);
        }
    }

    public LogicalInterface getLogicalInterface() {
        return this.logicalInterface;
    }

    public void setLogicalInterface(LogicalInterface logicalInterface) {
        this.setAssocModified(true);
        if (null == logicalInterface && null != this.logicalInterface && null != this.logicalInterface.getProtocol()) {
            this.logicalInterface.getProtocol().remove(this);
        }
        this.logicalInterface=logicalInterface;
        if (null != logicalInterface && (null == logicalInterface.getProtocol() || !logicalInterface.getProtocol().contains(this))) {
            this.set_type(this.get_type());
            if (null == logicalInterface.getProtocol()) {
                logicalInterface.setProtocol(new HashSet<>());
            }
            logicalInterface.addProtocol(this);
        }
    }

    public SchemaSpecification getProtocolSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.protocolSpecification = new SchemaSpecification();
            this.protocolSpecification.setId(this.getKind());
            this.protocolSpecification.setName(this.getKind());
            this.protocolSpecification.setReferredType(this.getKind());
            this.protocolSpecification.setVersion(this.getSchemaVersion());
        }
        return this.protocolSpecification;
    }

    public void setProtocolSpecification(SchemaSpecification protocolSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != protocolSpecification && null != protocolSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(protocolSpecification);
                    this.setKind(protocolSpecification.getId());
                }
                else if (!this.getKind().equals(protocolSpecification.getId())) {
                    throw new ModificationNotAllowedException("protocolSpecification modification not allowed");
                }
            }
            this.protocolSpecification = protocolSpecification;
        }
    }

    public Integer getProcessId() {
        return this.processId;
    }

    public void setProcessId(Integer processId) {
        if ((processId==null && this.processId!=null) || (processId != null && !processId.equals(this.processId))) {
            this.setModified(true);
        }
        this.processId=processId;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Protocol)) return false;
        Protocol other = (Protocol) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.processId, other.processId)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(processId)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("processId", this.processId)
                .toString();
    }
}
