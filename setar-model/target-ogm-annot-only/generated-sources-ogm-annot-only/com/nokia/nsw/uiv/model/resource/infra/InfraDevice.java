// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.OperatingSystem;
import com.nokia.nsw.uiv.model.resource.OperatingSystemConverter;
import com.nokia.nsw.uiv.model.resource.logical.LogicalDevice;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualDevice.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalDevice.class, name = "physicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualDevice.class, name = "virtualDevice")
})
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.InfraDevice")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.InfraDevice"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.InfraDevice"
)
public abstract class InfraDevice extends InfraResource {
    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.InfraResource]"
    )
    protected Set<InfraResource> contained = new HashSet<>();

    @JsonFilter("containingLogicalDevice")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalDevice}"
    )
    protected LogicalDevice containingLogicalDevice;

    @JsonFilter("usedResources")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.InfraResource]"
    )
    protected Set<InfraResource> usedResources = new HashSet<>();

    @JsonFilter("hostedLogicalDevices")
    @Relationship(
            type = "HOSTS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.LogicalDevice]"
    )
    protected Set<LogicalDevice> hostedLogicalDevices = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[name:java.lang.String, version:java.lang.String]")
    @Valid
    @Convert(OperatingSystemConverter.class)
    private OperatingSystem operatingSystem;

    public void addContained(InfraResource element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContainingDevice() || !element.getContainingDevice().equals(this))) {
            this.set_type(this.get_type());
            element.setContainingDevice(this);
        }
    }

    public void removeContained(InfraResource element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContainingDevice()) {
            element.setContainingDevice(null);
        }
    }

    public Set<InfraResource> getContained() {
        return this.contained;
    }

    public void setContained(Set<InfraResource> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<InfraResource> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (InfraResource each : toDelete) {
                each.setContainingDevice(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (InfraResource each: contained) {
                if (null != each && ( null == each.getContainingDevice() || !each.getContainingDevice().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContainingDevice(this);
                }
            }
        }
    }

    public LogicalDevice getContainingLogicalDevice() {
        return this.containingLogicalDevice;
    }

    public void setContainingLogicalDevice(LogicalDevice containingLogicalDevice) {
        this.setAssocModified(true);
        if (null == containingLogicalDevice && null != this.containingLogicalDevice && null != this.containingLogicalDevice.getContainedDevices()) {
            this.containingLogicalDevice.getContainedDevices().remove(this);
        }
        this.containingLogicalDevice=containingLogicalDevice;
        if (null != containingLogicalDevice && (null == containingLogicalDevice.getContainedDevices() || !containingLogicalDevice.getContainedDevices().contains(this))) {
            this.set_type(this.get_type());
            if (null == containingLogicalDevice.getContainedDevices()) {
                containingLogicalDevice.setContainedDevices(new HashSet<>());
            }
            containingLogicalDevice.addContainedDevices(this);
        }
    }

    public void addUsedResources(InfraResource element) {
        this.setAssocModified(true);
        this.usedResources.add(element);
        if (null != element && (null == element.getUsingDevices() || !element.getUsingDevices().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingDevices()) {
                element.setUsingDevices(new HashSet<>());
            }
            element.addUsingDevices(this);
        }
    }

    public void removeUsedResources(InfraResource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedResources  && this.usedResources.remove(element) && null != element.getUsingDevices() && element.getUsingDevices().contains(this)) {
            element.getUsingDevices().remove(this);
        }
    }

    public Set<InfraResource> getUsedResources() {
        return this.usedResources;
    }

    public void setUsedResources(Set<InfraResource> usedResources) {
        this.setAssocModified(true);
        if (null != this.usedResources) {
            List<InfraResource> toDelete = new ArrayList<>(this.usedResources);
            boolean setToNull = null == usedResources || usedResources.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedResources);
            }
            for (InfraResource each : toDelete) {
                if (null != each.getUsingDevices()) {
                    each.getUsingDevices().remove(this);
                }
            }
        }
        this.usedResources=usedResources;
        if (null != usedResources) {
            for (InfraResource each: usedResources) {
                if (null != each && (null == each.getUsingDevices() || !each.getUsingDevices().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingDevices()) {
                        each.setUsingDevices(new HashSet<>());
                    }
                    each.addUsingDevices(this);
                }
            }
        }
    }

    public void addHostedLogicalDevices(LogicalDevice element) {
        this.setAssocModified(true);
        this.hostedLogicalDevices.add(element);
        if (null != element && (null == element.getHostingDevice() || !element.getHostingDevice().equals(this))) {
            this.set_type(this.get_type());
            element.setHostingDevice(this);
        }
    }

    public void removeHostedLogicalDevices(LogicalDevice element) {
        this.setAssocModified(true);
        if (null != element && null != this.hostedLogicalDevices  && this.hostedLogicalDevices.remove(element) && null != element.getHostingDevice()) {
            element.setHostingDevice(null);
        }
    }

    public Set<LogicalDevice> getHostedLogicalDevices() {
        return this.hostedLogicalDevices;
    }

    public void setHostedLogicalDevices(Set<LogicalDevice> hostedLogicalDevices) {
        this.setAssocModified(true);
        if (null != this.hostedLogicalDevices) {
            List<LogicalDevice> toDelete = new ArrayList<>(this.hostedLogicalDevices);
            boolean setToNull = null == hostedLogicalDevices || hostedLogicalDevices.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(hostedLogicalDevices);
            }
            for (LogicalDevice each : toDelete) {
                each.setHostingDevice(null);
            }
        }
        this.hostedLogicalDevices=hostedLogicalDevices;
        if (null != hostedLogicalDevices) {
            for (LogicalDevice each: hostedLogicalDevices) {
                if (null != each && ( null == each.getHostingDevice() || !each.getHostingDevice().equals(this))) {
                    this.set_type(this.get_type());
                    each.setHostingDevice(this);
                }
            }
        }
    }

    public OperatingSystem getOperatingSystem() {
        return this.operatingSystem;
    }

    public void setOperatingSystem(OperatingSystem operatingSystem) {
        if ((operatingSystem==null && this.operatingSystem!=null) || (operatingSystem != null && !operatingSystem.equals(this.operatingSystem))) {
            this.setModified(true);
        }
        this.operatingSystem=operatingSystem;
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).toString();
    }
}
