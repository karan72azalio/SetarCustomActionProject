// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.location;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.common.party.PartyRole;
import com.nokia.nsw.uiv.model.resource.Resource;
import com.nokia.nsw.uiv.model.service.Service;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.location.GeographicSite.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicArea.class, name = "geographicArea"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicSite.class, name = "geographicSite"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.GeographicLocation.class, name = "geographicLocation"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.Property.class, name = "property"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.location.Space.class, name = "space")
})
@JsonFilter("com.nokia.nsw.uiv.model.location.Place")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.location.Place"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.location.Place"
)
public abstract class Place extends Entity {
    @JsonFilter("geometry")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.location.Geometry}"
    )
    protected Geometry geometry;

    @JsonFilter("partyRole")
    @Relationship(
            type = "LOCATED_AT",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.party.PartyRole]"
    )
    protected Set<PartyRole> partyRole = new HashSet<>();

    @JsonFilter("resource")
    @Relationship(
            type = "LOCATES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> resource = new HashSet<>();

    @JsonFilter("coveringResource")
    @Relationship(
            type = "COVERS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> coveringResource = new HashSet<>();

    @JsonFilter("locatedResource")
    @Relationship(
            type = "LOCATED_AT",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> locatedResource = new HashSet<>();

    @JsonFilter("service")
    @Relationship(
            type = "CONSUMED_IN",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> service = new HashSet<>();

    @JsonFilter("owningService")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.Service}"
    )
    protected Service owningService;

    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.location.Place}"
    )
    protected Place containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.Place]"
    )
    protected Set<Place> contained = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[country:java.lang.String, stateOrProvince:java.lang.String, city:java.lang.String, locality:java.lang.String, postcode:java.lang.String, streetName:java.lang.String, streetSuffix:java.lang.String, streetType:java.lang.String, streetNr:java.lang.String, streetNrSuffix:java.lang.String, streetNrLast:java.lang.String, streetNrLastSuffix:java.lang.String]")
    @Valid
    @Convert(GeographicAddressConverter.class)
    private GeographicAddress address;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[point, line, graph, ring, polygon]")
    private GeometryTypeEnum geometryType;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String crs;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Double x;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Double y;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Double z;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Double radius;

    public Geometry getGeometry() {
        return this.geometry;
    }

    public void setGeometry(Geometry geometry) {
        this.setAssocModified(true);
        Geometry previous = this.geometry;
        this.geometry=geometry;
        if (null == geometry  && null != previous) {
            previous.setPlace(null);
        }
        if (null != geometry && (null == geometry.getPlace() || !geometry.getPlace().equals(this))) {
            this.set_type(this.get_type());
            geometry.setPlace(this);
        }
    }

    public void addPartyRole(PartyRole element) {
        this.setAssocModified(true);
        this.partyRole.add(element);
        if (null != element && (null == element.getPlace() || !element.getPlace().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPlace()) {
                element.setPlace(new HashSet<>());
            }
            element.addPlace(this);
        }
    }

    public void removePartyRole(PartyRole element) {
        this.setAssocModified(true);
        if (null != element && null != this.partyRole  && this.partyRole.remove(element) && null != element.getPlace() && element.getPlace().contains(this)) {
            element.getPlace().remove(this);
        }
    }

    public Set<PartyRole> getPartyRole() {
        return this.partyRole;
    }

    public void setPartyRole(Set<PartyRole> partyRole) {
        this.setAssocModified(true);
        if (null != this.partyRole) {
            List<PartyRole> toDelete = new ArrayList<>(this.partyRole);
            boolean setToNull = null == partyRole || partyRole.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(partyRole);
            }
            for (PartyRole each : toDelete) {
                if (null != each.getPlace()) {
                    each.getPlace().remove(this);
                }
            }
        }
        this.partyRole=partyRole;
        if (null != partyRole) {
            for (PartyRole each: partyRole) {
                if (null != each && (null == each.getPlace() || !each.getPlace().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPlace()) {
                        each.setPlace(new HashSet<>());
                    }
                    each.addPlace(this);
                }
            }
        }
    }

    public void addResource(Resource element) {
        this.setAssocModified(true);
        this.resource.add(element);
        if (null != element && (null == element.getPlace() || !element.getPlace().equals(this))) {
            this.set_type(this.get_type());
            element.setPlace(this);
        }
    }

    public void removeResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.resource  && this.resource.remove(element) && null != element.getPlace()) {
            element.setPlace(null);
        }
    }

    public Set<Resource> getResource() {
        return this.resource;
    }

    public void setResource(Set<Resource> resource) {
        this.setAssocModified(true);
        if (null != this.resource) {
            List<Resource> toDelete = new ArrayList<>(this.resource);
            boolean setToNull = null == resource || resource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(resource);
            }
            for (Resource each : toDelete) {
                each.setPlace(null);
            }
        }
        this.resource=resource;
        if (null != resource) {
            for (Resource each: resource) {
                if (null != each && ( null == each.getPlace() || !each.getPlace().equals(this))) {
                    this.set_type(this.get_type());
                    each.setPlace(this);
                }
            }
        }
    }

    public void addCoveringResource(Resource element) {
        this.setAssocModified(true);
        this.coveringResource.add(element);
        if (null != element && (null == element.getCoveredPlace() || !element.getCoveredPlace().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getCoveredPlace()) {
                element.setCoveredPlace(new HashSet<>());
            }
            element.addCoveredPlace(this);
        }
    }

    public void removeCoveringResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.coveringResource  && this.coveringResource.remove(element) && null != element.getCoveredPlace() && element.getCoveredPlace().contains(this)) {
            element.getCoveredPlace().remove(this);
        }
    }

    public Set<Resource> getCoveringResource() {
        return this.coveringResource;
    }

    public void setCoveringResource(Set<Resource> coveringResource) {
        this.setAssocModified(true);
        if (null != this.coveringResource) {
            List<Resource> toDelete = new ArrayList<>(this.coveringResource);
            boolean setToNull = null == coveringResource || coveringResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(coveringResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getCoveredPlace()) {
                    each.getCoveredPlace().remove(this);
                }
            }
        }
        this.coveringResource=coveringResource;
        if (null != coveringResource) {
            for (Resource each: coveringResource) {
                if (null != each && (null == each.getCoveredPlace() || !each.getCoveredPlace().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getCoveredPlace()) {
                        each.setCoveredPlace(new HashSet<>());
                    }
                    each.addCoveredPlace(this);
                }
            }
        }
    }

    public void addLocatedResource(Resource element) {
        this.setAssocModified(true);
        this.locatedResource.add(element);
        if (null != element && (null == element.getLocatingPlace() || !element.getLocatingPlace().equals(this))) {
            this.set_type(this.get_type());
            element.setLocatingPlace(this);
        }
    }

    public void removeLocatedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.locatedResource  && this.locatedResource.remove(element) && null != element.getLocatingPlace()) {
            element.setLocatingPlace(null);
        }
    }

    public Set<Resource> getLocatedResource() {
        return this.locatedResource;
    }

    public void setLocatedResource(Set<Resource> locatedResource) {
        this.setAssocModified(true);
        if (null != this.locatedResource) {
            List<Resource> toDelete = new ArrayList<>(this.locatedResource);
            boolean setToNull = null == locatedResource || locatedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(locatedResource);
            }
            for (Resource each : toDelete) {
                each.setLocatingPlace(null);
            }
        }
        this.locatedResource=locatedResource;
        if (null != locatedResource) {
            for (Resource each: locatedResource) {
                if (null != each && ( null == each.getLocatingPlace() || !each.getLocatingPlace().equals(this))) {
                    this.set_type(this.get_type());
                    each.setLocatingPlace(this);
                }
            }
        }
    }

    public void addService(Service element) {
        this.setAssocModified(true);
        this.service.add(element);
        if (null != element && (null == element.getPlace() || !element.getPlace().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPlace()) {
                element.setPlace(new HashSet<>());
            }
            element.addPlace(this);
        }
    }

    public void removeService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.service  && this.service.remove(element) && null != element.getPlace() && element.getPlace().contains(this)) {
            element.getPlace().remove(this);
        }
    }

    public Set<Service> getService() {
        return this.service;
    }

    public void setService(Set<Service> service) {
        this.setAssocModified(true);
        if (null != this.service) {
            List<Service> toDelete = new ArrayList<>(this.service);
            boolean setToNull = null == service || service.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(service);
            }
            for (Service each : toDelete) {
                if (null != each.getPlace()) {
                    each.getPlace().remove(this);
                }
            }
        }
        this.service=service;
        if (null != service) {
            for (Service each: service) {
                if (null != each && (null == each.getPlace() || !each.getPlace().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPlace()) {
                        each.setPlace(new HashSet<>());
                    }
                    each.addPlace(this);
                }
            }
        }
    }

    public Service getOwningService() {
        return this.owningService;
    }

    public void setOwningService(Service owningService) {
        this.setAssocModified(true);
        if (null == owningService && null != this.owningService && null != this.owningService.getOwnedPlace()) {
            this.owningService.getOwnedPlace().remove(this);
        }
        this.owningService=owningService;
        if (null != owningService && (null == owningService.getOwnedPlace() || !owningService.getOwnedPlace().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningService.getOwnedPlace()) {
                owningService.setOwnedPlace(new HashSet<>());
            }
            owningService.addOwnedPlace(this);
        }
    }

    public Place getContaining() {
        return this.containing;
    }

    public void setContaining(Place containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(Place element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(Place element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<Place> getContained() {
        return this.contained;
    }

    public void setContained(Set<Place> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<Place> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (Place each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (Place each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public GeographicAddress getAddress() {
        return this.address;
    }

    public void setAddress(GeographicAddress address) {
        if ((address==null && this.address!=null) || (address != null && !address.equals(this.address))) {
            this.setModified(true);
        }
        this.address=address;
    }

    public GeometryTypeEnum getGeometryType() {
        return this.geometryType;
    }

    public void setGeometryType(GeometryTypeEnum geometryType) {
        if ((geometryType==null && this.geometryType!=null) || (geometryType != null && !geometryType.equals(this.geometryType))) {
            this.setModified(true);
        }
        this.geometryType=geometryType;
    }

    public String getCrs() {
        return this.crs;
    }

    public void setCrs(String crs) {
        if ((crs==null && this.crs!=null) || (crs != null && !crs.equals(this.crs))) {
            this.setModified(true);
        }
        this.crs=crs;
    }

    public Double getX() {
        return this.x;
    }

    public void setX(Double x) {
        if ((x==null && this.x!=null) || (x != null && !x.equals(this.x))) {
            this.setModified(true);
        }
        this.x=x;
    }

    public Double getY() {
        return this.y;
    }

    public void setY(Double y) {
        if ((y==null && this.y!=null) || (y != null && !y.equals(this.y))) {
            this.setModified(true);
        }
        this.y=y;
    }

    public Double getZ() {
        return this.z;
    }

    public void setZ(Double z) {
        if ((z==null && this.z!=null) || (z != null && !z.equals(this.z))) {
            this.setModified(true);
        }
        this.z=z;
    }

    public Double getRadius() {
        return this.radius;
    }

    public void setRadius(Double radius) {
        if ((radius==null && this.radius!=null) || (radius != null && !radius.equals(this.radius))) {
            this.setModified(true);
        }
        this.radius=radius;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Place)) return false;
        Place other = (Place) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.geometryType, other.geometryType)
                .append(this.crs, other.crs)
                .append(this.x, other.x)
                .append(this.y, other.y)
                .append(this.z, other.z)
                .append(this.radius, other.radius)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(geometryType)
                .append(crs)
                .append(x)
                .append(y)
                .append(z)
                .append(radius)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("geometryType", this.geometryType)
                .append("crs", this.crs)
                .append("x", this.x)
                .append("y", this.y)
                .append("z", this.z)
                .append("radius", this.radius)
                .toString();
    }
}
