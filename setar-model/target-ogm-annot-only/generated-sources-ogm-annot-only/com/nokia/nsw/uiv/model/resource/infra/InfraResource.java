// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.Resource;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent.class, name = "virtualComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalDevice.class, name = "physicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraDevice.class, name = "infraDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraComponent.class, name = "infraComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink.class, name = "physicalLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class, name = "virtualLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent.class, name = "physicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualDevice.class, name = "virtualDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort.class, name = "virtualPort"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort.class, name = "physicalPort")
})
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.InfraResource")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.InfraResource"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.InfraResource"
)
public abstract class InfraResource extends Resource {
    @JsonFilter("containingDevice")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.InfraDevice}"
    )
    protected InfraDevice containingDevice;

    @JsonFilter("usingDevices")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.InfraDevice]"
    )
    protected Set<InfraDevice> usingDevices = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, PowerDown, PowerUp]")
    private PowerState powerState;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String serialNumber;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String model;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String vendor;

    public InfraDevice getContainingDevice() {
        return this.containingDevice;
    }

    public void setContainingDevice(InfraDevice containingDevice) {
        this.setAssocModified(true);
        if (null == containingDevice && null != this.containingDevice && null != this.containingDevice.getContained()) {
            this.containingDevice.getContained().remove(this);
        }
        this.containingDevice=containingDevice;
        if (null != containingDevice && (null == containingDevice.getContained() || !containingDevice.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containingDevice.getContained()) {
                containingDevice.setContained(new HashSet<>());
            }
            containingDevice.addContained(this);
        }
    }

    public void addUsingDevices(InfraDevice element) {
        this.setAssocModified(true);
        this.usingDevices.add(element);
        if (null != element && (null == element.getUsedResources() || !element.getUsedResources().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedResources()) {
                element.setUsedResources(new HashSet<>());
            }
            element.addUsedResources(this);
        }
    }

    public void removeUsingDevices(InfraDevice element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingDevices  && this.usingDevices.remove(element) && null != element.getUsedResources() && element.getUsedResources().contains(this)) {
            element.getUsedResources().remove(this);
        }
    }

    public Set<InfraDevice> getUsingDevices() {
        return this.usingDevices;
    }

    public void setUsingDevices(Set<InfraDevice> usingDevices) {
        this.setAssocModified(true);
        if (null != this.usingDevices) {
            List<InfraDevice> toDelete = new ArrayList<>(this.usingDevices);
            boolean setToNull = null == usingDevices || usingDevices.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingDevices);
            }
            for (InfraDevice each : toDelete) {
                if (null != each.getUsedResources()) {
                    each.getUsedResources().remove(this);
                }
            }
        }
        this.usingDevices=usingDevices;
        if (null != usingDevices) {
            for (InfraDevice each: usingDevices) {
                if (null != each && (null == each.getUsedResources() || !each.getUsedResources().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedResources()) {
                        each.setUsedResources(new HashSet<>());
                    }
                    each.addUsedResources(this);
                }
            }
        }
    }

    public PowerState getPowerState() {
        return this.powerState;
    }

    public void setPowerState(PowerState powerState) {
        if ((powerState==null && this.powerState!=null) || (powerState != null && !powerState.equals(this.powerState))) {
            this.setModified(true);
        }
        this.powerState=powerState;
    }

    public String getSerialNumber() {
        return this.serialNumber;
    }

    public void setSerialNumber(String serialNumber) {
        if ((serialNumber==null && this.serialNumber!=null) || (serialNumber != null && !serialNumber.equals(this.serialNumber))) {
            this.setModified(true);
        }
        this.serialNumber=serialNumber;
    }

    public String getModel() {
        return this.model;
    }

    public void setModel(String model) {
        if ((model==null && this.model!=null) || (model != null && !model.equals(this.model))) {
            this.setModified(true);
        }
        this.model=model;
    }

    public String getVendor() {
        return this.vendor;
    }

    public void setVendor(String vendor) {
        if ((vendor==null && this.vendor!=null) || (vendor != null && !vendor.equals(this.vendor))) {
            this.setModified(true);
        }
        this.vendor=vendor;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof InfraResource)) return false;
        InfraResource other = (InfraResource) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.powerState, other.powerState)
                .append(this.serialNumber, other.serialNumber)
                .append(this.model, other.model)
                .append(this.vendor, other.vendor)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(powerState)
                .append(serialNumber)
                .append(model)
                .append(vendor)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("powerState", this.powerState)
                .append("serialNumber", this.serialNumber)
                .append("model", this.model)
                .append("vendor", this.vendor)
                .toString();
    }
}
