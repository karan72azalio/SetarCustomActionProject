// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.location;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.location.GeographicPoint.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.location.GeographicPoint")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.location.GeographicPoint"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.location.GeographicPoint"
)
public class GeographicPoint extends Geometry {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String crs;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private Double x;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private Double y;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Double z;

    @JsonFilter("polygon")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.location.Polygon}"
    )
    protected Polygon polygon;

    public String getCrs() {
        return this.crs;
    }

    public void setCrs(String crs) {
        if ((crs==null && this.crs!=null) || (crs != null && !crs.equals(this.crs))) {
            this.setModified(true);
        }
        this.crs=crs;
    }

    public Double getX() {
        return this.x;
    }

    public void setX(Double x) {
        if ((x==null && this.x!=null) || (x != null && !x.equals(this.x))) {
            this.setModified(true);
        }
        this.x=x;
    }

    public Double getY() {
        return this.y;
    }

    public void setY(Double y) {
        if ((y==null && this.y!=null) || (y != null && !y.equals(this.y))) {
            this.setModified(true);
        }
        this.y=y;
    }

    public Double getZ() {
        return this.z;
    }

    public void setZ(Double z) {
        if ((z==null && this.z!=null) || (z != null && !z.equals(this.z))) {
            this.setModified(true);
        }
        this.z=z;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof GeographicPoint)) return false;
        GeographicPoint other = (GeographicPoint) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.crs, other.crs)
                .append(this.x, other.x)
                .append(this.y, other.y)
                .append(this.z, other.z)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(crs)
                .append(x)
                .append(y)
                .append(z)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("crs", this.crs)
                .append("x", this.x)
                .append("y", this.y)
                .append("z", this.z)
                .toString();
    }

    public Polygon getPolygon() {
        return this.polygon;
    }

    public void setPolygon(Polygon polygon) {
        this.setAssocModified(true);
        if (null == polygon && null != this.polygon && null != this.polygon.getGeographicPoint()) {
            this.polygon.getGeographicPoint().remove(this);
        }
        this.polygon=polygon;
        if (null != polygon && (null == polygon.getGeographicPoint() || !polygon.getGeographicPoint().contains(this))) {
            this.set_type(this.get_type());
            if (null == polygon.getGeographicPoint()) {
                polygon.setGeographicPoint(new ArrayList<>());
            }
            polygon.addGeographicPoint(this);
        }
    }
}
