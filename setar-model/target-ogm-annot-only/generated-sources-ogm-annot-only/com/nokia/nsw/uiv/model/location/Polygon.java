// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.location;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.location.Polygon.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.location.Polygon")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.location.Polygon"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.location.Polygon"
)
public class Polygon extends Geometry {
    @JsonFilter("geographicPoint")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.GeographicPoint]"
    )
    protected List<GeographicPoint> geographicPoint = new ArrayList<>();

    public void addGeographicPoint(GeographicPoint element) {
        this.setAssocModified(true);
        this.geographicPoint.add(element);
        if (null != element && (null == element.getPolygon() || !element.getPolygon().equals(this))) {
            this.set_type(this.get_type());
            element.setPolygon(this);
        }
    }

    public void removeGeographicPoint(GeographicPoint element) {
        this.setAssocModified(true);
        if (null != element && null != this.geographicPoint  && this.geographicPoint.remove(element) && null != element.getPolygon()) {
            element.setPolygon(null);
        }
    }

    public List<GeographicPoint> getGeographicPoint() {
        return this.geographicPoint;
    }

    public void setGeographicPoint(List<GeographicPoint> geographicPoint) {
        this.setAssocModified(true);
        if (null != this.geographicPoint) {
            List<GeographicPoint> toDelete = new ArrayList<>(this.geographicPoint);
            boolean setToNull = null == geographicPoint || geographicPoint.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(geographicPoint);
            }
            for (GeographicPoint each : toDelete) {
                each.setPolygon(null);
            }
        }
        this.geographicPoint=geographicPoint;
        if (null != geographicPoint) {
            for (GeographicPoint each: geographicPoint) {
                if (null != each && ( null == each.getPolygon() || !each.getPolygon().equals(this))) {
                    this.set_type(this.get_type());
                    each.setPolygon(this);
                }
            }
        }
    }
}
