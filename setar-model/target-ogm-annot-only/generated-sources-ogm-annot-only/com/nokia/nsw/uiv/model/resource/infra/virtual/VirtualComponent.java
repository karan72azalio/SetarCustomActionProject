// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.infra.virtual;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.infra.InfraComponent;
import com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes(@JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort.class, name = "virtualPort"))
@JsonFilter("com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent"
)
public class VirtualComponent extends InfraComponent {
    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent}"
    )
    protected VirtualComponent containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent]"
    )
    protected Set<VirtualComponent> contained = new HashSet<>();

    @JsonFilter("physicalComponentUSES")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent]"
    )
    protected Set<PhysicalComponent> physicalComponentUSES = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification virtualComponentSpecification;

    public VirtualComponent getContaining() {
        return this.containing;
    }

    public void setContaining(VirtualComponent containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(VirtualComponent element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(VirtualComponent element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<VirtualComponent> getContained() {
        return this.contained;
    }

    public void setContained(Set<VirtualComponent> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<VirtualComponent> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (VirtualComponent each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (VirtualComponent each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addPhysicalComponentUSES(PhysicalComponent element) {
        this.setAssocModified(true);
        this.physicalComponentUSES.add(element);
        if (null != element && (null == element.getVirtualComponentUSES() || !element.getVirtualComponentUSES().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getVirtualComponentUSES()) {
                element.setVirtualComponentUSES(new HashSet<>());
            }
            element.addVirtualComponentUSES(this);
        }
    }

    public void removePhysicalComponentUSES(PhysicalComponent element) {
        this.setAssocModified(true);
        if (null != element && null != this.physicalComponentUSES  && this.physicalComponentUSES.remove(element) && null != element.getVirtualComponentUSES() && element.getVirtualComponentUSES().contains(this)) {
            element.getVirtualComponentUSES().remove(this);
        }
    }

    public Set<PhysicalComponent> getPhysicalComponentUSES() {
        return this.physicalComponentUSES;
    }

    public void setPhysicalComponentUSES(Set<PhysicalComponent> physicalComponentUSES) {
        this.setAssocModified(true);
        if (null != this.physicalComponentUSES) {
            List<PhysicalComponent> toDelete = new ArrayList<>(this.physicalComponentUSES);
            boolean setToNull = null == physicalComponentUSES || physicalComponentUSES.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(physicalComponentUSES);
            }
            for (PhysicalComponent each : toDelete) {
                if (null != each.getVirtualComponentUSES()) {
                    each.getVirtualComponentUSES().remove(this);
                }
            }
        }
        this.physicalComponentUSES=physicalComponentUSES;
        if (null != physicalComponentUSES) {
            for (PhysicalComponent each: physicalComponentUSES) {
                if (null != each && (null == each.getVirtualComponentUSES() || !each.getVirtualComponentUSES().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getVirtualComponentUSES()) {
                        each.setVirtualComponentUSES(new HashSet<>());
                    }
                    each.addVirtualComponentUSES(this);
                }
            }
        }
    }

    public SchemaSpecification getVirtualComponentSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.virtualComponentSpecification = new SchemaSpecification();
            this.virtualComponentSpecification.setId(this.getKind());
            this.virtualComponentSpecification.setName(this.getKind());
            this.virtualComponentSpecification.setReferredType(this.getKind());
            this.virtualComponentSpecification.setVersion(this.getSchemaVersion());
        }
        return this.virtualComponentSpecification;
    }

    public void setVirtualComponentSpecification(SchemaSpecification virtualComponentSpecification)
            throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != virtualComponentSpecification && null != virtualComponentSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(virtualComponentSpecification);
                    this.setKind(virtualComponentSpecification.getId());
                }
                else if (!this.getKind().equals(virtualComponentSpecification.getId())) {
                    throw new ModificationNotAllowedException("virtualComponentSpecification modification not allowed");
                }
            }
            this.virtualComponentSpecification = virtualComponentSpecification;
        }
    }
}
