// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common.party;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.party.Individual.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.party.Individual")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.party.Individual"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.party.Individual"
)
public class Individual extends Party {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification individualSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private String givenNames;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String middleNames;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private String familyNames;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String formOfAddress;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[female, male, other, unknown]")
    private Gender gender;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String nationality;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String placeOfBirth;

    public SchemaSpecification getIndividualSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.individualSpecification = new SchemaSpecification();
            this.individualSpecification.setId(this.getKind());
            this.individualSpecification.setName(this.getKind());
            this.individualSpecification.setReferredType(this.getKind());
            this.individualSpecification.setVersion(this.getSchemaVersion());
        }
        return this.individualSpecification;
    }

    public void setIndividualSpecification(SchemaSpecification individualSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != individualSpecification && null != individualSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(individualSpecification);
                    this.setKind(individualSpecification.getId());
                }
                else if (!this.getKind().equals(individualSpecification.getId())) {
                    throw new ModificationNotAllowedException("individualSpecification modification not allowed");
                }
            }
            this.individualSpecification = individualSpecification;
        }
    }

    public String getGivenNames() {
        return this.givenNames;
    }

    public void setGivenNames(String givenNames) {
        if ((givenNames==null && this.givenNames!=null) || (givenNames != null && !givenNames.equals(this.givenNames))) {
            this.setModified(true);
        }
        this.givenNames=givenNames;
    }

    public String getMiddleNames() {
        return this.middleNames;
    }

    public void setMiddleNames(String middleNames) {
        if ((middleNames==null && this.middleNames!=null) || (middleNames != null && !middleNames.equals(this.middleNames))) {
            this.setModified(true);
        }
        this.middleNames=middleNames;
    }

    public String getFamilyNames() {
        return this.familyNames;
    }

    public void setFamilyNames(String familyNames) {
        if ((familyNames==null && this.familyNames!=null) || (familyNames != null && !familyNames.equals(this.familyNames))) {
            this.setModified(true);
        }
        this.familyNames=familyNames;
    }

    public String getFormOfAddress() {
        return this.formOfAddress;
    }

    public void setFormOfAddress(String formOfAddress) {
        if ((formOfAddress==null && this.formOfAddress!=null) || (formOfAddress != null && !formOfAddress.equals(this.formOfAddress))) {
            this.setModified(true);
        }
        this.formOfAddress=formOfAddress;
    }

    public Gender getGender() {
        return this.gender;
    }

    public void setGender(Gender gender) {
        if ((gender==null && this.gender!=null) || (gender != null && !gender.equals(this.gender))) {
            this.setModified(true);
        }
        this.gender=gender;
    }

    public String getNationality() {
        return this.nationality;
    }

    public void setNationality(String nationality) {
        if ((nationality==null && this.nationality!=null) || (nationality != null && !nationality.equals(this.nationality))) {
            this.setModified(true);
        }
        this.nationality=nationality;
    }

    public String getPlaceOfBirth() {
        return this.placeOfBirth;
    }

    public void setPlaceOfBirth(String placeOfBirth) {
        if ((placeOfBirth==null && this.placeOfBirth!=null) || (placeOfBirth != null && !placeOfBirth.equals(this.placeOfBirth))) {
            this.setModified(true);
        }
        this.placeOfBirth=placeOfBirth;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Individual)) return false;
        Individual other = (Individual) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.givenNames, other.givenNames)
                .append(this.middleNames, other.middleNames)
                .append(this.familyNames, other.familyNames)
                .append(this.formOfAddress, other.formOfAddress)
                .append(this.gender, other.gender)
                .append(this.nationality, other.nationality)
                .append(this.placeOfBirth, other.placeOfBirth)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(givenNames)
                .append(middleNames)
                .append(familyNames)
                .append(formOfAddress)
                .append(gender)
                .append(nationality)
                .append(placeOfBirth)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("givenNames", this.givenNames)
                .append("middleNames", this.middleNames)
                .append("familyNames", this.familyNames)
                .append("formOfAddress", this.formOfAddress)
                .append("gender", this.gender)
                .append("nationality", this.nationality)
                .append("placeOfBirth", this.placeOfBirth)
                .toString();
    }
}
