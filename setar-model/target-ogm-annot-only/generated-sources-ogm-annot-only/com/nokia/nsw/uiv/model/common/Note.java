// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.common;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.datatype.Neo4jDomainNodeObject;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.common.Note.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.common.Note")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.common.Note"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.common.Note"
)
public class Note extends Neo4jDomainNodeObject {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date date;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String author;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @NotNull
    private String text;

    @JsonFilter("entity")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.Entity}"
    )
    protected Entity entity;

    public java.util.Date getDate() {
        return this.date;
    }

    public void setDate(java.util.Date date) {
        if ((date==null && this.date!=null) || (date != null && !date.equals(this.date))) {
            this.setModified(true);
        }
        this.date=date;
    }

    public String getAuthor() {
        return this.author;
    }

    public void setAuthor(String author) {
        if ((author==null && this.author!=null) || (author != null && !author.equals(this.author))) {
            this.setModified(true);
        }
        this.author=author;
    }

    public String getText() {
        return this.text;
    }

    public void setText(String text) {
        if ((text==null && this.text!=null) || (text != null && !text.equals(this.text))) {
            this.setModified(true);
        }
        this.text=text;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Note)) return false;
        Note other = (Note) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.date, other.date)
                .append(this.author, other.author)
                .append(this.text, other.text)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(date)
                .append(author)
                .append(text)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("date", this.date)
                .append("author", this.author)
                .append("text", this.text)
                .toString();
    }

    public Entity getEntity() {
        return this.entity;
    }

    public void setEntity(Entity entity) {
        this.setAssocModified(true);
        if (null == entity && null != this.entity && null != this.entity.getNote()) {
            this.entity.getNote().remove(this);
        }
        this.entity=entity;
        if (null != entity && (null == entity.getNote() || !entity.getNote().contains(this))) {
            this.set_type(this.get_type());
            if (null == entity.getNote()) {
                entity.setNote(new HashSet<>());
            }
            entity.addNote(this);
        }
    }
}
