// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.service;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.common.party.Customer;
import com.nokia.nsw.uiv.model.location.Place;
import com.nokia.nsw.uiv.model.resource.Resource;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.service.Service.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.setar.uiv.model.product.CustomerFacingService.class, name = "customerFacingService"),
        @JsonSubTypes.Type(value = com.setar.uiv.model.product.ResourceFacingService.class, name = "resourceFacingService")
})
@JsonFilter("com.nokia.nsw.uiv.model.service.Service")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.service.Service"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.service.Service"
)
public class Service extends Entity {
    @JsonFilter("usedService")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> usedService = new HashSet<>();

    @JsonFilter("usingService")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> usingService = new HashSet<>();

    @JsonFilter("subscription")
    @Relationship(
            type = "FOR",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Subscription]"
    )
    protected Set<Subscription> subscription = new HashSet<>();

    @JsonFilter("serviceProvider")
    @Relationship(
            type = "PROVIDES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.ServiceProvider}"
    )
    protected ServiceProvider serviceProvider;

    @JsonFilter("serviceConsumer")
    @Relationship(
            type = "CONSUMES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.ServiceConsumer]"
    )
    protected Set<ServiceConsumer> serviceConsumer = new HashSet<>();

    @JsonFilter("ownedResource")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> ownedResource = new HashSet<>();

    @JsonFilter("place")
    @Relationship(
            type = "CONSUMED_IN",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.Place]"
    )
    protected Set<Place> place = new HashSet<>();

    @JsonFilter("usedResource")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> usedResource = new HashSet<>();

    @JsonFilter("customer")
    @Relationship(
            type = "SUBSCRIBES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Customer}"
    )
    protected Customer customer;

    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.Service}"
    )
    protected Service containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> contained = new HashSet<>();

    @JsonFilter("configuredResource")
    @Relationship(
            type = "CONFIGURES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> configuredResource = new HashSet<>();

    @JsonFilter("usingCustomer")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.party.Customer]"
    )
    protected Set<Customer> usingCustomer = new HashSet<>();

    @JsonFilter("ownedPlace")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.Place]"
    )
    protected Set<Place> ownedPlace = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification serviceSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[unknown, designed, active, inactive, terminated]")
    private ServiceOperationalState state;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date startDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date endDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Boolean billable;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Cleared, Indeterminate, Warning, Minor, Major, Critical]")
    private com.nokia.nsw.uiv.model.common.AlarmSeverity alarmSeverity;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date alarmSetTime;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date serviceDate;

    public void addUsedService(Service element) {
        this.setAssocModified(true);
        this.usedService.add(element);
        if (null != element && (null == element.getUsingService() || !element.getUsingService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingService()) {
                element.setUsingService(new HashSet<>());
            }
            element.addUsingService(this);
        }
    }

    public void removeUsedService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedService  && this.usedService.remove(element) && null != element.getUsingService() && element.getUsingService().contains(this)) {
            element.getUsingService().remove(this);
        }
    }

    public Set<Service> getUsedService() {
        return this.usedService;
    }

    public void setUsedService(Set<Service> usedService) {
        this.setAssocModified(true);
        if (null != this.usedService) {
            List<Service> toDelete = new ArrayList<>(this.usedService);
            boolean setToNull = null == usedService || usedService.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedService);
            }
            for (Service each : toDelete) {
                if (null != each.getUsingService()) {
                    each.getUsingService().remove(this);
                }
            }
        }
        this.usedService=usedService;
        if (null != usedService) {
            for (Service each: usedService) {
                if (null != each && (null == each.getUsingService() || !each.getUsingService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingService()) {
                        each.setUsingService(new HashSet<>());
                    }
                    each.addUsingService(this);
                }
            }
        }
    }

    public void addUsingService(Service element) {
        this.setAssocModified(true);
        this.usingService.add(element);
        if (null != element && (null == element.getUsedService() || !element.getUsedService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedService()) {
                element.setUsedService(new HashSet<>());
            }
            element.addUsedService(this);
        }
    }

    public void removeUsingService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingService  && this.usingService.remove(element) && null != element.getUsedService() && element.getUsedService().contains(this)) {
            element.getUsedService().remove(this);
        }
    }

    public Set<Service> getUsingService() {
        return this.usingService;
    }

    public void setUsingService(Set<Service> usingService) {
        this.setAssocModified(true);
        if (null != this.usingService) {
            List<Service> toDelete = new ArrayList<>(this.usingService);
            boolean setToNull = null == usingService || usingService.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingService);
            }
            for (Service each : toDelete) {
                if (null != each.getUsedService()) {
                    each.getUsedService().remove(this);
                }
            }
        }
        this.usingService=usingService;
        if (null != usingService) {
            for (Service each: usingService) {
                if (null != each && (null == each.getUsedService() || !each.getUsedService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedService()) {
                        each.setUsedService(new HashSet<>());
                    }
                    each.addUsedService(this);
                }
            }
        }
    }

    public void addSubscription(Subscription element) {
        this.setAssocModified(true);
        this.subscription.add(element);
        if (null != element && (null == element.getService() || !element.getService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getService()) {
                element.setService(new HashSet<>());
            }
            element.addService(this);
        }
    }

    public void removeSubscription(Subscription element) {
        this.setAssocModified(true);
        if (null != element && null != this.subscription  && this.subscription.remove(element) && null != element.getService() && element.getService().contains(this)) {
            element.getService().remove(this);
        }
    }

    public Set<Subscription> getSubscription() {
        return this.subscription;
    }

    public void setSubscription(Set<Subscription> subscription) {
        this.setAssocModified(true);
        if (null != this.subscription) {
            List<Subscription> toDelete = new ArrayList<>(this.subscription);
            boolean setToNull = null == subscription || subscription.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(subscription);
            }
            for (Subscription each : toDelete) {
                if (null != each.getService()) {
                    each.getService().remove(this);
                }
            }
        }
        this.subscription=subscription;
        if (null != subscription) {
            for (Subscription each: subscription) {
                if (null != each && (null == each.getService() || !each.getService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getService()) {
                        each.setService(new HashSet<>());
                    }
                    each.addService(this);
                }
            }
        }
    }

    public ServiceProvider getServiceProvider() {
        return this.serviceProvider;
    }

    public void setServiceProvider(ServiceProvider serviceProvider) {
        this.setAssocModified(true);
        if (null == serviceProvider && null != this.serviceProvider && null != this.serviceProvider.getService()) {
            this.serviceProvider.getService().remove(this);
        }
        this.serviceProvider=serviceProvider;
        if (null != serviceProvider && (null == serviceProvider.getService() || !serviceProvider.getService().contains(this))) {
            this.set_type(this.get_type());
            if (null == serviceProvider.getService()) {
                serviceProvider.setService(new HashSet<>());
            }
            serviceProvider.addService(this);
        }
    }

    public void addServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        this.serviceConsumer.add(element);
        if (null != element && (null == element.getService() || !element.getService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getService()) {
                element.setService(new HashSet<>());
            }
            element.addService(this);
        }
    }

    public void removeServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        if (null != element && null != this.serviceConsumer  && this.serviceConsumer.remove(element) && null != element.getService() && element.getService().contains(this)) {
            element.getService().remove(this);
        }
    }

    public Set<ServiceConsumer> getServiceConsumer() {
        return this.serviceConsumer;
    }

    public void setServiceConsumer(Set<ServiceConsumer> serviceConsumer) {
        this.setAssocModified(true);
        if (null != this.serviceConsumer) {
            List<ServiceConsumer> toDelete = new ArrayList<>(this.serviceConsumer);
            boolean setToNull = null == serviceConsumer || serviceConsumer.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(serviceConsumer);
            }
            for (ServiceConsumer each : toDelete) {
                if (null != each.getService()) {
                    each.getService().remove(this);
                }
            }
        }
        this.serviceConsumer=serviceConsumer;
        if (null != serviceConsumer) {
            for (ServiceConsumer each: serviceConsumer) {
                if (null != each && (null == each.getService() || !each.getService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getService()) {
                        each.setService(new HashSet<>());
                    }
                    each.addService(this);
                }
            }
        }
    }

    public void addOwnedResource(Resource element) {
        this.setAssocModified(true);
        this.ownedResource.add(element);
        if (null != element && (null == element.getOwningService() || !element.getOwningService().equals(this))) {
            this.set_type(this.get_type());
            element.setOwningService(this);
        }
    }

    public void removeOwnedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.ownedResource  && this.ownedResource.remove(element) && null != element.getOwningService()) {
            element.setOwningService(null);
        }
    }

    public Set<Resource> getOwnedResource() {
        return this.ownedResource;
    }

    public void setOwnedResource(Set<Resource> ownedResource) {
        this.setAssocModified(true);
        if (null != this.ownedResource) {
            List<Resource> toDelete = new ArrayList<>(this.ownedResource);
            boolean setToNull = null == ownedResource || ownedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(ownedResource);
            }
            for (Resource each : toDelete) {
                each.setOwningService(null);
            }
        }
        this.ownedResource=ownedResource;
        if (null != ownedResource) {
            for (Resource each: ownedResource) {
                if (null != each && ( null == each.getOwningService() || !each.getOwningService().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOwningService(this);
                }
            }
        }
    }

    public void addPlace(Place element) {
        this.setAssocModified(true);
        this.place.add(element);
        if (null != element && (null == element.getService() || !element.getService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getService()) {
                element.setService(new HashSet<>());
            }
            element.addService(this);
        }
    }

    public void removePlace(Place element) {
        this.setAssocModified(true);
        if (null != element && null != this.place  && this.place.remove(element) && null != element.getService() && element.getService().contains(this)) {
            element.getService().remove(this);
        }
    }

    public Set<Place> getPlace() {
        return this.place;
    }

    public void setPlace(Set<Place> place) {
        this.setAssocModified(true);
        if (null != this.place) {
            List<Place> toDelete = new ArrayList<>(this.place);
            boolean setToNull = null == place || place.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(place);
            }
            for (Place each : toDelete) {
                if (null != each.getService()) {
                    each.getService().remove(this);
                }
            }
        }
        this.place=place;
        if (null != place) {
            for (Place each: place) {
                if (null != each && (null == each.getService() || !each.getService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getService()) {
                        each.setService(new HashSet<>());
                    }
                    each.addService(this);
                }
            }
        }
    }

    public void addUsedResource(Resource element) {
        this.setAssocModified(true);
        this.usedResource.add(element);
        if (null != element && (null == element.getUsingService() || !element.getUsingService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingService()) {
                element.setUsingService(new HashSet<>());
            }
            element.addUsingService(this);
        }
    }

    public void removeUsedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedResource  && this.usedResource.remove(element) && null != element.getUsingService() && element.getUsingService().contains(this)) {
            element.getUsingService().remove(this);
        }
    }

    public Set<Resource> getUsedResource() {
        return this.usedResource;
    }

    public void setUsedResource(Set<Resource> usedResource) {
        this.setAssocModified(true);
        if (null != this.usedResource) {
            List<Resource> toDelete = new ArrayList<>(this.usedResource);
            boolean setToNull = null == usedResource || usedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getUsingService()) {
                    each.getUsingService().remove(this);
                }
            }
        }
        this.usedResource=usedResource;
        if (null != usedResource) {
            for (Resource each: usedResource) {
                if (null != each && (null == each.getUsingService() || !each.getUsingService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingService()) {
                        each.setUsingService(new HashSet<>());
                    }
                    each.addUsingService(this);
                }
            }
        }
    }

    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.setAssocModified(true);
        if (null == customer && null != this.customer && null != this.customer.getService()) {
            this.customer.getService().remove(this);
        }
        this.customer=customer;
        if (null != customer && (null == customer.getService() || !customer.getService().contains(this))) {
            this.set_type(this.get_type());
            if (null == customer.getService()) {
                customer.setService(new HashSet<>());
            }
            customer.addService(this);
        }
    }

    public Service getContaining() {
        return this.containing;
    }

    public void setContaining(Service containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(Service element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<Service> getContained() {
        return this.contained;
    }

    public void setContained(Set<Service> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<Service> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (Service each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (Service each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addConfiguredResource(Resource element) {
        this.setAssocModified(true);
        this.configuredResource.add(element);
        if (null != element && (null == element.getConfiguringService() || !element.getConfiguringService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getConfiguringService()) {
                element.setConfiguringService(new HashSet<>());
            }
            element.addConfiguringService(this);
        }
    }

    public void removeConfiguredResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.configuredResource  && this.configuredResource.remove(element) && null != element.getConfiguringService() && element.getConfiguringService().contains(this)) {
            element.getConfiguringService().remove(this);
        }
    }

    public Set<Resource> getConfiguredResource() {
        return this.configuredResource;
    }

    public void setConfiguredResource(Set<Resource> configuredResource) {
        this.setAssocModified(true);
        if (null != this.configuredResource) {
            List<Resource> toDelete = new ArrayList<>(this.configuredResource);
            boolean setToNull = null == configuredResource || configuredResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(configuredResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getConfiguringService()) {
                    each.getConfiguringService().remove(this);
                }
            }
        }
        this.configuredResource=configuredResource;
        if (null != configuredResource) {
            for (Resource each: configuredResource) {
                if (null != each && (null == each.getConfiguringService() || !each.getConfiguringService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getConfiguringService()) {
                        each.setConfiguringService(new HashSet<>());
                    }
                    each.addConfiguringService(this);
                }
            }
        }
    }

    public void addUsingCustomer(Customer element) {
        this.setAssocModified(true);
        this.usingCustomer.add(element);
        if (null != element && (null == element.getUsedService() || !element.getUsedService().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedService()) {
                element.setUsedService(new HashSet<>());
            }
            element.addUsedService(this);
        }
    }

    public void removeUsingCustomer(Customer element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingCustomer  && this.usingCustomer.remove(element) && null != element.getUsedService() && element.getUsedService().contains(this)) {
            element.getUsedService().remove(this);
        }
    }

    public Set<Customer> getUsingCustomer() {
        return this.usingCustomer;
    }

    public void setUsingCustomer(Set<Customer> usingCustomer) {
        this.setAssocModified(true);
        if (null != this.usingCustomer) {
            List<Customer> toDelete = new ArrayList<>(this.usingCustomer);
            boolean setToNull = null == usingCustomer || usingCustomer.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingCustomer);
            }
            for (Customer each : toDelete) {
                if (null != each.getUsedService()) {
                    each.getUsedService().remove(this);
                }
            }
        }
        this.usingCustomer=usingCustomer;
        if (null != usingCustomer) {
            for (Customer each: usingCustomer) {
                if (null != each && (null == each.getUsedService() || !each.getUsedService().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedService()) {
                        each.setUsedService(new HashSet<>());
                    }
                    each.addUsedService(this);
                }
            }
        }
    }

    public void addOwnedPlace(Place element) {
        this.setAssocModified(true);
        this.ownedPlace.add(element);
        if (null != element && (null == element.getOwningService() || !element.getOwningService().equals(this))) {
            this.set_type(this.get_type());
            element.setOwningService(this);
        }
    }

    public void removeOwnedPlace(Place element) {
        this.setAssocModified(true);
        if (null != element && null != this.ownedPlace  && this.ownedPlace.remove(element) && null != element.getOwningService()) {
            element.setOwningService(null);
        }
    }

    public Set<Place> getOwnedPlace() {
        return this.ownedPlace;
    }

    public void setOwnedPlace(Set<Place> ownedPlace) {
        this.setAssocModified(true);
        if (null != this.ownedPlace) {
            List<Place> toDelete = new ArrayList<>(this.ownedPlace);
            boolean setToNull = null == ownedPlace || ownedPlace.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(ownedPlace);
            }
            for (Place each : toDelete) {
                each.setOwningService(null);
            }
        }
        this.ownedPlace=ownedPlace;
        if (null != ownedPlace) {
            for (Place each: ownedPlace) {
                if (null != each && ( null == each.getOwningService() || !each.getOwningService().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOwningService(this);
                }
            }
        }
    }

    public SchemaSpecification getServiceSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.serviceSpecification = new SchemaSpecification();
            this.serviceSpecification.setId(this.getKind());
            this.serviceSpecification.setName(this.getKind());
            this.serviceSpecification.setReferredType(this.getKind());
            this.serviceSpecification.setVersion(this.getSchemaVersion());
        }
        return this.serviceSpecification;
    }

    public void setServiceSpecification(SchemaSpecification serviceSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != serviceSpecification && null != serviceSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(serviceSpecification);
                    this.setKind(serviceSpecification.getId());
                }
                else if (!this.getKind().equals(serviceSpecification.getId())) {
                    throw new ModificationNotAllowedException("serviceSpecification modification not allowed");
                }
            }
            this.serviceSpecification = serviceSpecification;
        }
    }

    public ServiceOperationalState getState() {
        return this.state;
    }

    public void setState(ServiceOperationalState state) {
        if ((state==null && this.state!=null) || (state != null && !state.equals(this.state))) {
            this.setModified(true);
        }
        this.state=state;
    }

    public java.util.Date getStartDate() {
        return this.startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        if ((startDate==null && this.startDate!=null) || (startDate != null && !startDate.equals(this.startDate))) {
            this.setModified(true);
        }
        this.startDate=startDate;
    }

    public java.util.Date getEndDate() {
        return this.endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        if ((endDate==null && this.endDate!=null) || (endDate != null && !endDate.equals(this.endDate))) {
            this.setModified(true);
        }
        this.endDate=endDate;
    }

    public Boolean getBillable() {
        return this.billable;
    }

    public void setBillable(Boolean billable) {
        if ((billable==null && this.billable!=null) || (billable != null && !billable.equals(this.billable))) {
            this.setModified(true);
        }
        this.billable=billable;
    }

    public com.nokia.nsw.uiv.model.common.AlarmSeverity getAlarmSeverity() {
        return this.alarmSeverity;
    }

    public void setAlarmSeverity(com.nokia.nsw.uiv.model.common.AlarmSeverity alarmSeverity) {
        if ((alarmSeverity==null && this.alarmSeverity!=null) || (alarmSeverity != null && !alarmSeverity.equals(this.alarmSeverity))) {
            this.setModified(true);
        }
        this.alarmSeverity=alarmSeverity;
    }

    public java.util.Date getAlarmSetTime() {
        return this.alarmSetTime;
    }

    public void setAlarmSetTime(java.util.Date alarmSetTime) {
        if ((alarmSetTime==null && this.alarmSetTime!=null) || (alarmSetTime != null && !alarmSetTime.equals(this.alarmSetTime))) {
            this.setModified(true);
        }
        this.alarmSetTime=alarmSetTime;
    }

    public java.util.Date getServiceDate() {
        return this.serviceDate;
    }

    public void setServiceDate(java.util.Date serviceDate) {
        if ((serviceDate==null && this.serviceDate!=null) || (serviceDate != null && !serviceDate.equals(this.serviceDate))) {
            this.setModified(true);
        }
        this.serviceDate=serviceDate;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Service)) return false;
        Service other = (Service) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.state, other.state)
                .append(this.startDate, other.startDate)
                .append(this.endDate, other.endDate)
                .append(this.billable, other.billable)
                .append(this.alarmSeverity, other.alarmSeverity)
                .append(this.alarmSetTime, other.alarmSetTime)
                .append(this.serviceDate, other.serviceDate)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(state)
                .append(startDate)
                .append(endDate)
                .append(billable)
                .append(alarmSeverity)
                .append(alarmSetTime)
                .append(serviceDate)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("state", this.state)
                .append("startDate", this.startDate)
                .append("endDate", this.endDate)
                .append("billable", this.billable)
                .append("alarmSeverity", this.alarmSeverity)
                .append("alarmSetTime", this.alarmSetTime)
                .append("serviceDate", this.serviceDate)
                .toString();
    }
}
