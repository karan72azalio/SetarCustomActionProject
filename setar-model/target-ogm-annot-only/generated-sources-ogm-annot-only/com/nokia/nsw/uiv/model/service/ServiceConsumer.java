// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.service;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.party.Customer;
import com.nokia.nsw.uiv.model.common.party.PartyRole;
import com.nokia.nsw.uiv.model.resource.Resource;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.service.ServiceConsumer.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.service.ServiceConsumer")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.service.ServiceConsumer"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.service.ServiceConsumer"
)
public class ServiceConsumer extends PartyRole {
    @JsonFilter("customer")
    @Relationship(
            type = "SUBSCRIBES_SERVICES_FOR",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Customer}"
    )
    protected Customer customer;

    @JsonFilter("service")
    @Relationship(
            type = "CONSUMES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> service = new HashSet<>();

    @JsonFilter("usedResource")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> usedResource = new HashSet<>();

    @JsonFilter("ownedResource")
    @Relationship(
            type = "OWNS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.Resource]"
    )
    protected Set<Resource> ownedResource = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification serviceConsumerSpecification;

    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.setAssocModified(true);
        if (null == customer && null != this.customer && null != this.customer.getServiceConsumer()) {
            this.customer.getServiceConsumer().remove(this);
        }
        this.customer=customer;
        if (null != customer && (null == customer.getServiceConsumer() || !customer.getServiceConsumer().contains(this))) {
            this.set_type(this.get_type());
            if (null == customer.getServiceConsumer()) {
                customer.setServiceConsumer(new HashSet<>());
            }
            customer.addServiceConsumer(this);
        }
    }

    public void addService(Service element) {
        this.setAssocModified(true);
        this.service.add(element);
        if (null != element && (null == element.getServiceConsumer() || !element.getServiceConsumer().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getServiceConsumer()) {
                element.setServiceConsumer(new HashSet<>());
            }
            element.addServiceConsumer(this);
        }
    }

    public void removeService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.service  && this.service.remove(element) && null != element.getServiceConsumer() && element.getServiceConsumer().contains(this)) {
            element.getServiceConsumer().remove(this);
        }
    }

    public Set<Service> getService() {
        return this.service;
    }

    public void setService(Set<Service> service) {
        this.setAssocModified(true);
        if (null != this.service) {
            List<Service> toDelete = new ArrayList<>(this.service);
            boolean setToNull = null == service || service.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(service);
            }
            for (Service each : toDelete) {
                if (null != each.getServiceConsumer()) {
                    each.getServiceConsumer().remove(this);
                }
            }
        }
        this.service=service;
        if (null != service) {
            for (Service each: service) {
                if (null != each && (null == each.getServiceConsumer() || !each.getServiceConsumer().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getServiceConsumer()) {
                        each.setServiceConsumer(new HashSet<>());
                    }
                    each.addServiceConsumer(this);
                }
            }
        }
    }

    public void addUsedResource(Resource element) {
        this.setAssocModified(true);
        this.usedResource.add(element);
        if (null != element && (null == element.getUsingServiceConsumer() || !element.getUsingServiceConsumer().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsingServiceConsumer()) {
                element.setUsingServiceConsumer(new HashSet<>());
            }
            element.addUsingServiceConsumer(this);
        }
    }

    public void removeUsedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedResource  && this.usedResource.remove(element) && null != element.getUsingServiceConsumer() && element.getUsingServiceConsumer().contains(this)) {
            element.getUsingServiceConsumer().remove(this);
        }
    }

    public Set<Resource> getUsedResource() {
        return this.usedResource;
    }

    public void setUsedResource(Set<Resource> usedResource) {
        this.setAssocModified(true);
        if (null != this.usedResource) {
            List<Resource> toDelete = new ArrayList<>(this.usedResource);
            boolean setToNull = null == usedResource || usedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedResource);
            }
            for (Resource each : toDelete) {
                if (null != each.getUsingServiceConsumer()) {
                    each.getUsingServiceConsumer().remove(this);
                }
            }
        }
        this.usedResource=usedResource;
        if (null != usedResource) {
            for (Resource each: usedResource) {
                if (null != each && (null == each.getUsingServiceConsumer() || !each.getUsingServiceConsumer().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsingServiceConsumer()) {
                        each.setUsingServiceConsumer(new HashSet<>());
                    }
                    each.addUsingServiceConsumer(this);
                }
            }
        }
    }

    public void addOwnedResource(Resource element) {
        this.setAssocModified(true);
        this.ownedResource.add(element);
        if (null != element && (null == element.getOwningServiceConsumer() || !element.getOwningServiceConsumer().equals(this))) {
            this.set_type(this.get_type());
            element.setOwningServiceConsumer(this);
        }
    }

    public void removeOwnedResource(Resource element) {
        this.setAssocModified(true);
        if (null != element && null != this.ownedResource  && this.ownedResource.remove(element) && null != element.getOwningServiceConsumer()) {
            element.setOwningServiceConsumer(null);
        }
    }

    public Set<Resource> getOwnedResource() {
        return this.ownedResource;
    }

    public void setOwnedResource(Set<Resource> ownedResource) {
        this.setAssocModified(true);
        if (null != this.ownedResource) {
            List<Resource> toDelete = new ArrayList<>(this.ownedResource);
            boolean setToNull = null == ownedResource || ownedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(ownedResource);
            }
            for (Resource each : toDelete) {
                each.setOwningServiceConsumer(null);
            }
        }
        this.ownedResource=ownedResource;
        if (null != ownedResource) {
            for (Resource each: ownedResource) {
                if (null != each && ( null == each.getOwningServiceConsumer() || !each.getOwningServiceConsumer().equals(this))) {
                    this.set_type(this.get_type());
                    each.setOwningServiceConsumer(this);
                }
            }
        }
    }

    public SchemaSpecification getServiceConsumerSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.serviceConsumerSpecification = new SchemaSpecification();
            this.serviceConsumerSpecification.setId(this.getKind());
            this.serviceConsumerSpecification.setName(this.getKind());
            this.serviceConsumerSpecification.setReferredType(this.getKind());
            this.serviceConsumerSpecification.setVersion(this.getSchemaVersion());
        }
        return this.serviceConsumerSpecification;
    }

    public void setServiceConsumerSpecification(SchemaSpecification serviceConsumerSpecification)
            throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != serviceConsumerSpecification && null != serviceConsumerSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(serviceConsumerSpecification);
                    this.setKind(serviceConsumerSpecification.getId());
                }
                else if (!this.getKind().equals(serviceConsumerSpecification.getId())) {
                    throw new ModificationNotAllowedException("serviceConsumerSpecification modification not allowed");
                }
            }
            this.serviceConsumerSpecification = serviceConsumerSpecification;
        }
    }
}
