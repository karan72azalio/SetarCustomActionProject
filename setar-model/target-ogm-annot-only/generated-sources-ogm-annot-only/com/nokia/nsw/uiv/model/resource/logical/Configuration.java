// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.Configuration.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.Configuration")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.Configuration"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.Configuration"
)
public class Configuration extends LogicalResource {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification configurationSpecification;

    @JsonFilter("logicalResource")
    @Relationship(
            type = "HAS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalResource}"
    )
    protected LogicalResource logicalResource;

    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.Configuration}"
    )
    protected Configuration containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Configuration]"
    )
    protected Set<Configuration> contained = new HashSet<>();

    @JsonFilter("associatedConfiguration")
    @Relationship(
            type = "ASSOCIATES_TO",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Configuration]"
    )
    protected Set<Configuration> associatedConfiguration = new HashSet<>();

    @JsonFilter("associatingConfiguration")
    @Relationship(
            type = "ASSOCIATES_TO",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.Configuration]"
    )
    protected Set<Configuration> associatingConfiguration = new HashSet<>();

    @JsonFilter("templatedLogicalResource")
    @Relationship(
            type = "HAS_TEMPLATE",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalResource}"
    )
    protected LogicalResource templatedLogicalResource;

    public SchemaSpecification getConfigurationSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.configurationSpecification = new SchemaSpecification();
            this.configurationSpecification.setId(this.getKind());
            this.configurationSpecification.setName(this.getKind());
            this.configurationSpecification.setReferredType(this.getKind());
            this.configurationSpecification.setVersion(this.getSchemaVersion());
        }
        return this.configurationSpecification;
    }

    public void setConfigurationSpecification(SchemaSpecification configurationSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != configurationSpecification && null != configurationSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(configurationSpecification);
                    this.setKind(configurationSpecification.getId());
                }
                else if (!this.getKind().equals(configurationSpecification.getId())) {
                    throw new ModificationNotAllowedException("configurationSpecification modification not allowed");
                }
            }
            this.configurationSpecification = configurationSpecification;
        }
    }

    public LogicalResource getLogicalResource() {
        return this.logicalResource;
    }

    public void setLogicalResource(LogicalResource logicalResource) {
        this.setAssocModified(true);
        if (null == logicalResource && null != this.logicalResource && null != this.logicalResource.getConfiguration()) {
            this.logicalResource.getConfiguration().remove(this);
        }
        this.logicalResource=logicalResource;
        if (null != logicalResource && (null == logicalResource.getConfiguration() || !logicalResource.getConfiguration().contains(this))) {
            this.set_type(this.get_type());
            if (null == logicalResource.getConfiguration()) {
                logicalResource.setConfiguration(new HashSet<>());
            }
            logicalResource.addConfiguration(this);
        }
    }

    public Configuration getContaining() {
        return this.containing;
    }

    public void setContaining(Configuration containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(Configuration element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(Configuration element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<Configuration> getContained() {
        return this.contained;
    }

    public void setContained(Set<Configuration> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<Configuration> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (Configuration each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (Configuration each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public void addAssociatedConfiguration(Configuration element) {
        this.setAssocModified(true);
        this.associatedConfiguration.add(element);
        if (null != element && (null == element.getAssociatingConfiguration() || !element.getAssociatingConfiguration().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getAssociatingConfiguration()) {
                element.setAssociatingConfiguration(new HashSet<>());
            }
            element.addAssociatingConfiguration(this);
        }
    }

    public void removeAssociatedConfiguration(Configuration element) {
        this.setAssocModified(true);
        if (null != element && null != this.associatedConfiguration  && this.associatedConfiguration.remove(element) && null != element.getAssociatingConfiguration() && element.getAssociatingConfiguration().contains(this)) {
            element.getAssociatingConfiguration().remove(this);
        }
    }

    public Set<Configuration> getAssociatedConfiguration() {
        return this.associatedConfiguration;
    }

    public void setAssociatedConfiguration(Set<Configuration> associatedConfiguration) {
        this.setAssocModified(true);
        if (null != this.associatedConfiguration) {
            List<Configuration> toDelete = new ArrayList<>(this.associatedConfiguration);
            boolean setToNull = null == associatedConfiguration || associatedConfiguration.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(associatedConfiguration);
            }
            for (Configuration each : toDelete) {
                if (null != each.getAssociatingConfiguration()) {
                    each.getAssociatingConfiguration().remove(this);
                }
            }
        }
        this.associatedConfiguration=associatedConfiguration;
        if (null != associatedConfiguration) {
            for (Configuration each: associatedConfiguration) {
                if (null != each && (null == each.getAssociatingConfiguration() || !each.getAssociatingConfiguration().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getAssociatingConfiguration()) {
                        each.setAssociatingConfiguration(new HashSet<>());
                    }
                    each.addAssociatingConfiguration(this);
                }
            }
        }
    }

    public void addAssociatingConfiguration(Configuration element) {
        this.setAssocModified(true);
        this.associatingConfiguration.add(element);
        if (null != element && (null == element.getAssociatedConfiguration() || !element.getAssociatedConfiguration().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getAssociatedConfiguration()) {
                element.setAssociatedConfiguration(new HashSet<>());
            }
            element.addAssociatedConfiguration(this);
        }
    }

    public void removeAssociatingConfiguration(Configuration element) {
        this.setAssocModified(true);
        if (null != element && null != this.associatingConfiguration  && this.associatingConfiguration.remove(element) && null != element.getAssociatedConfiguration() && element.getAssociatedConfiguration().contains(this)) {
            element.getAssociatedConfiguration().remove(this);
        }
    }

    public Set<Configuration> getAssociatingConfiguration() {
        return this.associatingConfiguration;
    }

    public void setAssociatingConfiguration(Set<Configuration> associatingConfiguration) {
        this.setAssocModified(true);
        if (null != this.associatingConfiguration) {
            List<Configuration> toDelete = new ArrayList<>(this.associatingConfiguration);
            boolean setToNull = null == associatingConfiguration || associatingConfiguration.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(associatingConfiguration);
            }
            for (Configuration each : toDelete) {
                if (null != each.getAssociatedConfiguration()) {
                    each.getAssociatedConfiguration().remove(this);
                }
            }
        }
        this.associatingConfiguration=associatingConfiguration;
        if (null != associatingConfiguration) {
            for (Configuration each: associatingConfiguration) {
                if (null != each && (null == each.getAssociatedConfiguration() || !each.getAssociatedConfiguration().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getAssociatedConfiguration()) {
                        each.setAssociatedConfiguration(new HashSet<>());
                    }
                    each.addAssociatedConfiguration(this);
                }
            }
        }
    }

    public LogicalResource getTemplatedLogicalResource() {
        return this.templatedLogicalResource;
    }

    public void setTemplatedLogicalResource(LogicalResource templatedLogicalResource) {
        this.setAssocModified(true);
        if (null == templatedLogicalResource && null != this.templatedLogicalResource && null != this.templatedLogicalResource.getTemplateConfiguration()) {
            this.templatedLogicalResource.getTemplateConfiguration().remove(this);
        }
        this.templatedLogicalResource=templatedLogicalResource;
        if (null != templatedLogicalResource && (null == templatedLogicalResource.getTemplateConfiguration() || !templatedLogicalResource.getTemplateConfiguration().contains(this))) {
            this.set_type(this.get_type());
            if (null == templatedLogicalResource.getTemplateConfiguration()) {
                templatedLogicalResource.setTemplateConfiguration(new HashSet<>());
            }
            templatedLogicalResource.addTemplateConfiguration(this);
        }
    }
}
