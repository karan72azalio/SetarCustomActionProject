// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource.logical;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.DataType;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.resource.Software;
import com.nokia.nsw.uiv.model.resource.SoftwareConverter;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.logical.LogicalComponent.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes(@JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalInterface.class, name = "logicalInterface"))
@JsonFilter("com.nokia.nsw.uiv.model.resource.logical.LogicalComponent")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.logical.LogicalComponent"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.logical.LogicalComponent"
)
public class LogicalComponent extends LogicalResource {
    @JsonFilter("containing")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.resource.logical.LogicalComponent}"
    )
    protected LogicalComponent containing;

    @JsonFilter("contained")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.LogicalComponent]"
    )
    protected Set<LogicalComponent> contained = new HashSet<>();

    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification logicalComponentSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @DataType("[name:java.lang.String, version:java.lang.String]")
    @Valid
    @Convert(SoftwareConverter.class)
    private Software software;

    public LogicalComponent getContaining() {
        return this.containing;
    }

    public void setContaining(LogicalComponent containing) {
        this.setAssocModified(true);
        if (null == containing && null != this.containing && null != this.containing.getContained()) {
            this.containing.getContained().remove(this);
        }
        this.containing=containing;
        if (null != containing && (null == containing.getContained() || !containing.getContained().contains(this))) {
            this.set_type(this.get_type());
            if (null == containing.getContained()) {
                containing.setContained(new HashSet<>());
            }
            containing.addContained(this);
        }
    }

    public void addContained(LogicalComponent element) {
        this.setAssocModified(true);
        this.contained.add(element);
        if (null != element && (null == element.getContaining() || !element.getContaining().equals(this))) {
            this.set_type(this.get_type());
            element.setContaining(this);
        }
    }

    public void removeContained(LogicalComponent element) {
        this.setAssocModified(true);
        if (null != element && null != this.contained  && this.contained.remove(element) && null != element.getContaining()) {
            element.setContaining(null);
        }
    }

    public Set<LogicalComponent> getContained() {
        return this.contained;
    }

    public void setContained(Set<LogicalComponent> contained) {
        this.setAssocModified(true);
        if (null != this.contained) {
            List<LogicalComponent> toDelete = new ArrayList<>(this.contained);
            boolean setToNull = null == contained || contained.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(contained);
            }
            for (LogicalComponent each : toDelete) {
                each.setContaining(null);
            }
        }
        this.contained=contained;
        if (null != contained) {
            for (LogicalComponent each: contained) {
                if (null != each && ( null == each.getContaining() || !each.getContaining().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContaining(this);
                }
            }
        }
    }

    public SchemaSpecification getLogicalComponentSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.logicalComponentSpecification = new SchemaSpecification();
            this.logicalComponentSpecification.setId(this.getKind());
            this.logicalComponentSpecification.setName(this.getKind());
            this.logicalComponentSpecification.setReferredType(this.getKind());
            this.logicalComponentSpecification.setVersion(this.getSchemaVersion());
        }
        return this.logicalComponentSpecification;
    }

    public void setLogicalComponentSpecification(SchemaSpecification logicalComponentSpecification)
            throws ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != logicalComponentSpecification && null != logicalComponentSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(logicalComponentSpecification);
                    this.setKind(logicalComponentSpecification.getId());
                }
                else if (!this.getKind().equals(logicalComponentSpecification.getId())) {
                    throw new ModificationNotAllowedException("logicalComponentSpecification modification not allowed");
                }
            }
            this.logicalComponentSpecification = logicalComponentSpecification;
        }
    }

    public Software getSoftware() {
        return this.software;
    }

    public void setSoftware(Software software) {
        if ((software==null && this.software!=null) || (software != null && !software.equals(this.software))) {
            this.setModified(true);
        }
        this.software=software;
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).toString();
    }
}
