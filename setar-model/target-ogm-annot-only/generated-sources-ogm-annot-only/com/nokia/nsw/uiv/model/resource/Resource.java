// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.model.resource;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.exception.BadRequestException;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.common.UTILIZES_RESOURCE;
import com.nokia.nsw.uiv.model.common.party.Customer;
import com.nokia.nsw.uiv.model.location.Place;
import com.nokia.nsw.uiv.model.resource.logical.LogicalDevice;
import com.nokia.nsw.uiv.model.resource.logical.LogicalResource;
import com.nokia.nsw.uiv.model.service.Service;
import com.nokia.nsw.uiv.model.service.ServiceConsumer;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualComponent.class, name = "virtualComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalDevice.class, name = "physicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraResource.class, name = "infraResource"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalLink.class, name = "physicalLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualLink.class, name = "virtualLink"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Configuration.class, name = "configuration"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalComponent.class, name = "logicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualDevice.class, name = "virtualDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalResource.class, name = "logicalResource"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.virtual.VirtualPort.class, name = "virtualPort"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalPort.class, name = "physicalPort"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Trail.class, name = "trail"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Protocol.class, name = "protocol"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraDevice.class, name = "infraDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.InfraComponent.class, name = "infraComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalInterface.class, name = "logicalInterface"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.LogicalDevice.class, name = "logicalDevice"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.infra.physical.PhysicalComponent.class, name = "physicalComponent"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Pipe.class, name = "pipe"),
        @JsonSubTypes.Type(value = com.nokia.nsw.uiv.model.resource.logical.Connection.class, name = "connection")
})
@JsonFilter("com.nokia.nsw.uiv.model.resource.Resource")
@NodeEntity(
        label = "com.nokia.nsw.uiv.model.resource.Resource"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.model.resource.Resource"
)
public abstract class Resource extends Entity {
    @JsonFilter("usingServiceConsumer")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.ServiceConsumer]"
    )
    protected Set<ServiceConsumer> usingServiceConsumer = new HashSet<>();

    @JsonFilter("owningServiceConsumer")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.ServiceConsumer}"
    )
    protected ServiceConsumer owningServiceConsumer;

    @JsonFilter("usingCustomer")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.party.Customer]"
    )
    protected Set<Customer> usingCustomer = new HashSet<>();

    @Relationship(
            type = "UTILIZES_RESOURCE",
            direction = "INCOMING"
    )
    @ApiModelProperty
    protected Set<UTILIZES_RESOURCE> utilizingLogicalResource = new HashSet<>();

    @JsonFilter("place")
    @Relationship(
            type = "LOCATES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.location.Place}"
    )
    protected Place place;

    @JsonFilter("owningService")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.Service}"
    )
    protected Service owningService;

    @JsonFilter("owningCustomer")
    @Relationship(
            type = "OWNS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Customer}"
    )
    protected Customer owningCustomer;

    @JsonFilter("coveredPlace")
    @Relationship(
            type = "COVERS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.location.Place]"
    )
    protected Set<Place> coveredPlace = new HashSet<>();

    @JsonFilter("locatingPlace")
    @Relationship(
            type = "LOCATED_AT",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.location.Place}"
    )
    protected Place locatingPlace;

    @JsonFilter("usingLogicalResource")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.LogicalResource]"
    )
    protected Set<LogicalResource> usingLogicalResource = new HashSet<>();

    @JsonFilter("usingService")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> usingService = new HashSet<>();

    @JsonFilter("configuringService")
    @Relationship(
            type = "CONFIGURES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.service.Service]"
    )
    protected Set<Service> configuringService = new HashSet<>();

    @JsonFilter("managingDevices")
    @Relationship(
            type = "MANAGES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.resource.logical.LogicalDevice]"
    )
    protected Set<LogicalDevice> managingDevices = new HashSet<>();

    @Relationship(
            type = "USES_PROTECTED",
            direction = "OUTGOING"
    )
    @ApiModelProperty
    protected Set<USES_PROTECTED> usedProtectedResource = new HashSet<>();

    @Relationship(
            type = "USES_PROTECTED",
            direction = "INCOMING"
    )
    @ApiModelProperty
    protected Set<USES_PROTECTED> usingResource = new HashSet<>();

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, Available, Reserved, Assigned, NotAvailable]")
    private ResourceUsageState usageState;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, Planning, Installing, Operating, Retiring]")
    private ResourceLifecycleState lifecycleState;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String version;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String category;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, Activated, Deactivated, NotApplicable]")
    private AdministrativeState administrativeState;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Unknown, Working, NotWorking]")
    private OperationalState operationalState;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Cleared, Indeterminate, Warning, Minor, Major, Critical]")
    private com.nokia.nsw.uiv.model.common.AlarmSeverity alarmSeverity;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date alarmSetTime;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[Anyof, OneOf, AllOf]")
    private ProtectionAssociationType protectionAssociationType;

    public void addUsingServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        this.usingServiceConsumer.add(element);
        if (null != element && (null == element.getUsedResource() || !element.getUsedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedResource()) {
                element.setUsedResource(new HashSet<>());
            }
            element.addUsedResource(this);
        }
    }

    public void removeUsingServiceConsumer(ServiceConsumer element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingServiceConsumer  && this.usingServiceConsumer.remove(element) && null != element.getUsedResource() && element.getUsedResource().contains(this)) {
            element.getUsedResource().remove(this);
        }
    }

    public Set<ServiceConsumer> getUsingServiceConsumer() {
        return this.usingServiceConsumer;
    }

    public void setUsingServiceConsumer(Set<ServiceConsumer> usingServiceConsumer) {
        this.setAssocModified(true);
        if (null != this.usingServiceConsumer) {
            List<ServiceConsumer> toDelete = new ArrayList<>(this.usingServiceConsumer);
            boolean setToNull = null == usingServiceConsumer || usingServiceConsumer.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingServiceConsumer);
            }
            for (ServiceConsumer each : toDelete) {
                if (null != each.getUsedResource()) {
                    each.getUsedResource().remove(this);
                }
            }
        }
        this.usingServiceConsumer=usingServiceConsumer;
        if (null != usingServiceConsumer) {
            for (ServiceConsumer each: usingServiceConsumer) {
                if (null != each && (null == each.getUsedResource() || !each.getUsedResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedResource()) {
                        each.setUsedResource(new HashSet<>());
                    }
                    each.addUsedResource(this);
                }
            }
        }
    }

    public ServiceConsumer getOwningServiceConsumer() {
        return this.owningServiceConsumer;
    }

    public void setOwningServiceConsumer(ServiceConsumer owningServiceConsumer) {
        this.setAssocModified(true);
        if (null == owningServiceConsumer && null != this.owningServiceConsumer && null != this.owningServiceConsumer.getOwnedResource()) {
            this.owningServiceConsumer.getOwnedResource().remove(this);
        }
        this.owningServiceConsumer=owningServiceConsumer;
        if (null != owningServiceConsumer && (null == owningServiceConsumer.getOwnedResource() || !owningServiceConsumer.getOwnedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningServiceConsumer.getOwnedResource()) {
                owningServiceConsumer.setOwnedResource(new HashSet<>());
            }
            owningServiceConsumer.addOwnedResource(this);
        }
    }

    public void addUsingCustomer(Customer element) {
        this.setAssocModified(true);
        this.usingCustomer.add(element);
        if (null != element && (null == element.getUsedResource() || !element.getUsedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedResource()) {
                element.setUsedResource(new HashSet<>());
            }
            element.addUsedResource(this);
        }
    }

    public void removeUsingCustomer(Customer element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingCustomer  && this.usingCustomer.remove(element) && null != element.getUsedResource() && element.getUsedResource().contains(this)) {
            element.getUsedResource().remove(this);
        }
    }

    public Set<Customer> getUsingCustomer() {
        return this.usingCustomer;
    }

    public void setUsingCustomer(Set<Customer> usingCustomer) {
        this.setAssocModified(true);
        if (null != this.usingCustomer) {
            List<Customer> toDelete = new ArrayList<>(this.usingCustomer);
            boolean setToNull = null == usingCustomer || usingCustomer.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingCustomer);
            }
            for (Customer each : toDelete) {
                if (null != each.getUsedResource()) {
                    each.getUsedResource().remove(this);
                }
            }
        }
        this.usingCustomer=usingCustomer;
        if (null != usingCustomer) {
            for (Customer each: usingCustomer) {
                if (null != each && (null == each.getUsedResource() || !each.getUsedResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedResource()) {
                        each.setUsedResource(new HashSet<>());
                    }
                    each.addUsedResource(this);
                }
            }
        }
    }

    public void addUtilizingLogicalResource(UTILIZES_RESOURCE element) throws BadRequestException {
        this.setAssocModified(true);
        if (null != element) {
            if (null == element.getLogicalResource()) {
                log.error("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (logicalResource) value set");
                throw new BadRequestException("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (logicalResource) value set");
            }
            if (null == element.getResource() || !element.getResource().equals(this) || !this.utilizingLogicalResource.contains(element)) {
                this.set_type(this.get_type());
                element.setResource(this);
                if (null == this.utilizingLogicalResource) {
                    this.utilizingLogicalResource = new HashSet<>();
                }
                this.utilizingLogicalResource.add(element);
                if (null == element.getLogicalResource().getUtilizedResource()) {
                    element.getLogicalResource().setUtilizedResource(new HashSet<>());
                }
                element.getLogicalResource().getUtilizedResource().add(element);
            }
        }
    }

    public void removeUtilizingLogicalResource(UTILIZES_RESOURCE element) {
        this.setAssocModified(true);
        if (null != element && null != this.utilizingLogicalResource && this.utilizingLogicalResource.remove(element) && null != element.getLogicalResource()) {
            element.getLogicalResource().removeUtilizedResource(element);
        }
    }

    public Set<UTILIZES_RESOURCE> getUtilizingLogicalResource() {
        return this.utilizingLogicalResource;
    }

    public void setUtilizingLogicalResource(Set<UTILIZES_RESOURCE> utilizingLogicalResource) throws
            BadRequestException {
        this.setAssocModified(true);
        if (null != this.utilizingLogicalResource) {
            List<UTILIZES_RESOURCE> toDelete = new ArrayList<>(this.utilizingLogicalResource);
            boolean setToNull = null == utilizingLogicalResource || utilizingLogicalResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(utilizingLogicalResource);
            }
            for (UTILIZES_RESOURCE each : toDelete) {
                if (null != each.getLogicalResource() && null != each.getLogicalResource().getUtilizedResource()) {
                    each.getLogicalResource().removeUtilizedResource(each);
                }
            }
        }
        if (null != utilizingLogicalResource) {
            for (UTILIZES_RESOURCE each: utilizingLogicalResource) {
                if (null != each) {
                    if (null == each.getLogicalResource()) {
                        log.error("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (logicalResource) value set");
                        throw new BadRequestException("Rich object of type \"UTILIZES_RESOURCE\" should have the other node end (logicalResource) value set");
                    }
                    if (null == each.getResource() || !each.getResource().equals(this) || !this.utilizingLogicalResource.contains(each)) {
                        this.set_type(this.get_type());
                        each.setResource(this);
                        if (null == this.utilizingLogicalResource) {
                            this.utilizingLogicalResource = new HashSet<>();
                        }
                        boolean ispresent = this.utilizingLogicalResource.stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            this.utilizingLogicalResource.add(each);
                        }
                        if (null == each.getLogicalResource().getUtilizedResource()) {
                            each.getLogicalResource().setUtilizedResource(new HashSet<>());
                        }
                        ispresent = each.getLogicalResource().getUtilizedResource().stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            each.getLogicalResource().getUtilizedResource().add(each);
                        }
                    }
                }
            }
        }
    }

    public Place getPlace() {
        return this.place;
    }

    public void setPlace(Place place) {
        this.setAssocModified(true);
        if (null == place && null != this.place && null != this.place.getResource()) {
            this.place.getResource().remove(this);
        }
        this.place=place;
        if (null != place && (null == place.getResource() || !place.getResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == place.getResource()) {
                place.setResource(new HashSet<>());
            }
            place.addResource(this);
        }
    }

    public Service getOwningService() {
        return this.owningService;
    }

    public void setOwningService(Service owningService) {
        this.setAssocModified(true);
        if (null == owningService && null != this.owningService && null != this.owningService.getOwnedResource()) {
            this.owningService.getOwnedResource().remove(this);
        }
        this.owningService=owningService;
        if (null != owningService && (null == owningService.getOwnedResource() || !owningService.getOwnedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningService.getOwnedResource()) {
                owningService.setOwnedResource(new HashSet<>());
            }
            owningService.addOwnedResource(this);
        }
    }

    public Customer getOwningCustomer() {
        return this.owningCustomer;
    }

    public void setOwningCustomer(Customer owningCustomer) {
        this.setAssocModified(true);
        if (null == owningCustomer && null != this.owningCustomer && null != this.owningCustomer.getOwnedResource()) {
            this.owningCustomer.getOwnedResource().remove(this);
        }
        this.owningCustomer=owningCustomer;
        if (null != owningCustomer && (null == owningCustomer.getOwnedResource() || !owningCustomer.getOwnedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == owningCustomer.getOwnedResource()) {
                owningCustomer.setOwnedResource(new HashSet<>());
            }
            owningCustomer.addOwnedResource(this);
        }
    }

    public void addCoveredPlace(Place element) {
        this.setAssocModified(true);
        this.coveredPlace.add(element);
        if (null != element && (null == element.getCoveringResource() || !element.getCoveringResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getCoveringResource()) {
                element.setCoveringResource(new HashSet<>());
            }
            element.addCoveringResource(this);
        }
    }

    public void removeCoveredPlace(Place element) {
        this.setAssocModified(true);
        if (null != element && null != this.coveredPlace  && this.coveredPlace.remove(element) && null != element.getCoveringResource() && element.getCoveringResource().contains(this)) {
            element.getCoveringResource().remove(this);
        }
    }

    public Set<Place> getCoveredPlace() {
        return this.coveredPlace;
    }

    public void setCoveredPlace(Set<Place> coveredPlace) {
        this.setAssocModified(true);
        if (null != this.coveredPlace) {
            List<Place> toDelete = new ArrayList<>(this.coveredPlace);
            boolean setToNull = null == coveredPlace || coveredPlace.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(coveredPlace);
            }
            for (Place each : toDelete) {
                if (null != each.getCoveringResource()) {
                    each.getCoveringResource().remove(this);
                }
            }
        }
        this.coveredPlace=coveredPlace;
        if (null != coveredPlace) {
            for (Place each: coveredPlace) {
                if (null != each && (null == each.getCoveringResource() || !each.getCoveringResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getCoveringResource()) {
                        each.setCoveringResource(new HashSet<>());
                    }
                    each.addCoveringResource(this);
                }
            }
        }
    }

    public Place getLocatingPlace() {
        return this.locatingPlace;
    }

    public void setLocatingPlace(Place locatingPlace) {
        this.setAssocModified(true);
        if (null == locatingPlace && null != this.locatingPlace && null != this.locatingPlace.getLocatedResource()) {
            this.locatingPlace.getLocatedResource().remove(this);
        }
        this.locatingPlace=locatingPlace;
        if (null != locatingPlace && (null == locatingPlace.getLocatedResource() || !locatingPlace.getLocatedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == locatingPlace.getLocatedResource()) {
                locatingPlace.setLocatedResource(new HashSet<>());
            }
            locatingPlace.addLocatedResource(this);
        }
    }

    public void addUsingLogicalResource(LogicalResource element) {
        this.setAssocModified(true);
        this.usingLogicalResource.add(element);
        if (null != element && (null == element.getUsedResource() || !element.getUsedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedResource()) {
                element.setUsedResource(new HashSet<>());
            }
            element.addUsedResource(this);
        }
    }

    public void removeUsingLogicalResource(LogicalResource element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingLogicalResource  && this.usingLogicalResource.remove(element) && null != element.getUsedResource() && element.getUsedResource().contains(this)) {
            element.getUsedResource().remove(this);
        }
    }

    public Set<LogicalResource> getUsingLogicalResource() {
        return this.usingLogicalResource;
    }

    public void setUsingLogicalResource(Set<LogicalResource> usingLogicalResource) {
        this.setAssocModified(true);
        if (null != this.usingLogicalResource) {
            List<LogicalResource> toDelete = new ArrayList<>(this.usingLogicalResource);
            boolean setToNull = null == usingLogicalResource || usingLogicalResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingLogicalResource);
            }
            for (LogicalResource each : toDelete) {
                if (null != each.getUsedResource()) {
                    each.getUsedResource().remove(this);
                }
            }
        }
        this.usingLogicalResource=usingLogicalResource;
        if (null != usingLogicalResource) {
            for (LogicalResource each: usingLogicalResource) {
                if (null != each && (null == each.getUsedResource() || !each.getUsedResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedResource()) {
                        each.setUsedResource(new HashSet<>());
                    }
                    each.addUsedResource(this);
                }
            }
        }
    }

    public void addUsingService(Service element) {
        this.setAssocModified(true);
        this.usingService.add(element);
        if (null != element && (null == element.getUsedResource() || !element.getUsedResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getUsedResource()) {
                element.setUsedResource(new HashSet<>());
            }
            element.addUsedResource(this);
        }
    }

    public void removeUsingService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingService  && this.usingService.remove(element) && null != element.getUsedResource() && element.getUsedResource().contains(this)) {
            element.getUsedResource().remove(this);
        }
    }

    public Set<Service> getUsingService() {
        return this.usingService;
    }

    public void setUsingService(Set<Service> usingService) {
        this.setAssocModified(true);
        if (null != this.usingService) {
            List<Service> toDelete = new ArrayList<>(this.usingService);
            boolean setToNull = null == usingService || usingService.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingService);
            }
            for (Service each : toDelete) {
                if (null != each.getUsedResource()) {
                    each.getUsedResource().remove(this);
                }
            }
        }
        this.usingService=usingService;
        if (null != usingService) {
            for (Service each: usingService) {
                if (null != each && (null == each.getUsedResource() || !each.getUsedResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getUsedResource()) {
                        each.setUsedResource(new HashSet<>());
                    }
                    each.addUsedResource(this);
                }
            }
        }
    }

    public void addConfiguringService(Service element) {
        this.setAssocModified(true);
        this.configuringService.add(element);
        if (null != element && (null == element.getConfiguredResource() || !element.getConfiguredResource().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getConfiguredResource()) {
                element.setConfiguredResource(new HashSet<>());
            }
            element.addConfiguredResource(this);
        }
    }

    public void removeConfiguringService(Service element) {
        this.setAssocModified(true);
        if (null != element && null != this.configuringService  && this.configuringService.remove(element) && null != element.getConfiguredResource() && element.getConfiguredResource().contains(this)) {
            element.getConfiguredResource().remove(this);
        }
    }

    public Set<Service> getConfiguringService() {
        return this.configuringService;
    }

    public void setConfiguringService(Set<Service> configuringService) {
        this.setAssocModified(true);
        if (null != this.configuringService) {
            List<Service> toDelete = new ArrayList<>(this.configuringService);
            boolean setToNull = null == configuringService || configuringService.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(configuringService);
            }
            for (Service each : toDelete) {
                if (null != each.getConfiguredResource()) {
                    each.getConfiguredResource().remove(this);
                }
            }
        }
        this.configuringService=configuringService;
        if (null != configuringService) {
            for (Service each: configuringService) {
                if (null != each && (null == each.getConfiguredResource() || !each.getConfiguredResource().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getConfiguredResource()) {
                        each.setConfiguredResource(new HashSet<>());
                    }
                    each.addConfiguredResource(this);
                }
            }
        }
    }

    public void addManagingDevices(LogicalDevice element) {
        this.setAssocModified(true);
        this.managingDevices.add(element);
        if (null != element && (null == element.getManagedResources() || !element.getManagedResources().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getManagedResources()) {
                element.setManagedResources(new HashSet<>());
            }
            element.addManagedResources(this);
        }
    }

    public void removeManagingDevices(LogicalDevice element) {
        this.setAssocModified(true);
        if (null != element && null != this.managingDevices  && this.managingDevices.remove(element) && null != element.getManagedResources() && element.getManagedResources().contains(this)) {
            element.getManagedResources().remove(this);
        }
    }

    public Set<LogicalDevice> getManagingDevices() {
        return this.managingDevices;
    }

    public void setManagingDevices(Set<LogicalDevice> managingDevices) {
        this.setAssocModified(true);
        if (null != this.managingDevices) {
            List<LogicalDevice> toDelete = new ArrayList<>(this.managingDevices);
            boolean setToNull = null == managingDevices || managingDevices.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(managingDevices);
            }
            for (LogicalDevice each : toDelete) {
                if (null != each.getManagedResources()) {
                    each.getManagedResources().remove(this);
                }
            }
        }
        this.managingDevices=managingDevices;
        if (null != managingDevices) {
            for (LogicalDevice each: managingDevices) {
                if (null != each && (null == each.getManagedResources() || !each.getManagedResources().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getManagedResources()) {
                        each.setManagedResources(new HashSet<>());
                    }
                    each.addManagedResources(this);
                }
            }
        }
    }

    public void addUsedProtectedResource(USES_PROTECTED element) throws BadRequestException {
        this.setAssocModified(true);
        if (null != element) {
            if (null == element.getResourceEndNode()) {
                log.error("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceEndNode) value set");
                throw new BadRequestException("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceEndNode) value set");
            }
            if (null == element.getResourceStartNode() || !element.getResourceStartNode().equals(this) || !this.usedProtectedResource.contains(element)) {
                this.set_type(this.get_type());
                element.setResourceStartNode(this);
                if (null == this.usedProtectedResource) {
                    this.usedProtectedResource = new HashSet<>();
                }
                this.usedProtectedResource.add(element);
                if (null == element.getResourceEndNode().getUsingResource()) {
                    element.getResourceEndNode().setUsingResource(new HashSet<>());
                }
                element.getResourceEndNode().getUsingResource().add(element);
            }
        }
    }

    public void removeUsedProtectedResource(USES_PROTECTED element) {
        this.setAssocModified(true);
        if (null != element && null != this.usedProtectedResource && this.usedProtectedResource.remove(element) && null != element.getResourceEndNode()) {
            element.getResourceEndNode().removeUsingResource(element);
        }
    }

    public Set<USES_PROTECTED> getUsedProtectedResource() {
        return this.usedProtectedResource;
    }

    public void setUsedProtectedResource(Set<USES_PROTECTED> usedProtectedResource) throws
            BadRequestException {
        this.setAssocModified(true);
        if (null != this.usedProtectedResource) {
            List<USES_PROTECTED> toDelete = new ArrayList<>(this.usedProtectedResource);
            boolean setToNull = null == usedProtectedResource || usedProtectedResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usedProtectedResource);
            }
            for (USES_PROTECTED each : toDelete) {
                if (null != each.getResourceEndNode() && null != each.getResourceEndNode().getUsingResource()) {
                    each.getResourceEndNode().removeUsingResource(each);
                }
            }
        }
        if (null != usedProtectedResource) {
            for (USES_PROTECTED each: usedProtectedResource) {
                if (null != each) {
                    if (null == each.getResourceEndNode()) {
                        log.error("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceEndNode) value set");
                        throw new BadRequestException("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceEndNode) value set");
                    }
                    if (null == each.getResourceStartNode() || !each.getResourceStartNode().equals(this) || !this.usedProtectedResource.contains(each)) {
                        this.set_type(this.get_type());
                        each.setResourceStartNode(this);
                        if (null == this.usedProtectedResource) {
                            this.usedProtectedResource = new HashSet<>();
                        }
                        boolean ispresent = this.usedProtectedResource.stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            this.usedProtectedResource.add(each);
                        }
                        if (null == each.getResourceEndNode().getUsingResource()) {
                            each.getResourceEndNode().setUsingResource(new HashSet<>());
                        }
                        ispresent = each.getResourceEndNode().getUsingResource().stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            each.getResourceEndNode().getUsingResource().add(each);
                        }
                    }
                }
            }
        }
    }

    public void addUsingResource(USES_PROTECTED element) throws BadRequestException {
        this.setAssocModified(true);
        if (null != element) {
            if (null == element.getResourceStartNode()) {
                log.error("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceStartNode) value set");
                throw new BadRequestException("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceStartNode) value set");
            }
            if (null == element.getResourceEndNode() || !element.getResourceEndNode().equals(this) || !this.usingResource.contains(element)) {
                this.set_type(this.get_type());
                element.setResourceEndNode(this);
                if (null == this.usingResource) {
                    this.usingResource = new HashSet<>();
                }
                this.usingResource.add(element);
                if (null == element.getResourceStartNode().getUsedProtectedResource()) {
                    element.getResourceStartNode().setUsedProtectedResource(new HashSet<>());
                }
                element.getResourceStartNode().getUsedProtectedResource().add(element);
            }
        }
    }

    public void removeUsingResource(USES_PROTECTED element) {
        this.setAssocModified(true);
        if (null != element && null != this.usingResource && this.usingResource.remove(element) && null != element.getResourceStartNode()) {
            element.getResourceStartNode().removeUsedProtectedResource(element);
        }
    }

    public Set<USES_PROTECTED> getUsingResource() {
        return this.usingResource;
    }

    public void setUsingResource(Set<USES_PROTECTED> usingResource) throws BadRequestException {
        this.setAssocModified(true);
        if (null != this.usingResource) {
            List<USES_PROTECTED> toDelete = new ArrayList<>(this.usingResource);
            boolean setToNull = null == usingResource || usingResource.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(usingResource);
            }
            for (USES_PROTECTED each : toDelete) {
                if (null != each.getResourceStartNode() && null != each.getResourceStartNode().getUsedProtectedResource()) {
                    each.getResourceStartNode().removeUsedProtectedResource(each);
                }
            }
        }
        if (null != usingResource) {
            for (USES_PROTECTED each: usingResource) {
                if (null != each) {
                    if (null == each.getResourceStartNode()) {
                        log.error("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceStartNode) value set");
                        throw new BadRequestException("Rich object of type \"USES_PROTECTED\" should have the other node end (resourceStartNode) value set");
                    }
                    if (null == each.getResourceEndNode() || !each.getResourceEndNode().equals(this) || !this.usingResource.contains(each)) {
                        this.set_type(this.get_type());
                        each.setResourceEndNode(this);
                        if (null == this.usingResource) {
                            this.usingResource = new HashSet<>();
                        }
                        boolean ispresent = this.usingResource.stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            this.usingResource.add(each);
                        }
                        if (null == each.getResourceStartNode().getUsedProtectedResource()) {
                            each.getResourceStartNode().setUsedProtectedResource(new HashSet<>());
                        }
                        ispresent = each.getResourceStartNode().getUsedProtectedResource().stream().anyMatch(o -> o==each);
                        if (!ispresent) {
                            each.getResourceStartNode().getUsedProtectedResource().add(each);
                        }
                    }
                }
            }
        }
    }

    public ResourceUsageState getUsageState() {
        return this.usageState;
    }

    public void setUsageState(ResourceUsageState usageState) {
        if ((usageState==null && this.usageState!=null) || (usageState != null && !usageState.equals(this.usageState))) {
            this.setModified(true);
        }
        this.usageState=usageState;
    }

    public ResourceLifecycleState getLifecycleState() {
        return this.lifecycleState;
    }

    public void setLifecycleState(ResourceLifecycleState lifecycleState) {
        if ((lifecycleState==null && this.lifecycleState!=null) || (lifecycleState != null && !lifecycleState.equals(this.lifecycleState))) {
            this.setModified(true);
        }
        this.lifecycleState=lifecycleState;
    }

    public String getVersion() {
        return this.version;
    }

    public void setVersion(String version) {
        if ((version==null && this.version!=null) || (version != null && !version.equals(this.version))) {
            this.setModified(true);
        }
        this.version=version;
    }

    public String getCategory() {
        return this.category;
    }

    public void setCategory(String category) {
        if ((category==null && this.category!=null) || (category != null && !category.equals(this.category))) {
            this.setModified(true);
        }
        this.category=category;
    }

    public AdministrativeState getAdministrativeState() {
        return this.administrativeState;
    }

    public void setAdministrativeState(AdministrativeState administrativeState) {
        if ((administrativeState==null && this.administrativeState!=null) || (administrativeState != null && !administrativeState.equals(this.administrativeState))) {
            this.setModified(true);
        }
        this.administrativeState=administrativeState;
    }

    public OperationalState getOperationalState() {
        return this.operationalState;
    }

    public void setOperationalState(OperationalState operationalState) {
        if ((operationalState==null && this.operationalState!=null) || (operationalState != null && !operationalState.equals(this.operationalState))) {
            this.setModified(true);
        }
        this.operationalState=operationalState;
    }

    public com.nokia.nsw.uiv.model.common.AlarmSeverity getAlarmSeverity() {
        return this.alarmSeverity;
    }

    public void setAlarmSeverity(com.nokia.nsw.uiv.model.common.AlarmSeverity alarmSeverity) {
        if ((alarmSeverity==null && this.alarmSeverity!=null) || (alarmSeverity != null && !alarmSeverity.equals(this.alarmSeverity))) {
            this.setModified(true);
        }
        this.alarmSeverity=alarmSeverity;
    }

    public java.util.Date getAlarmSetTime() {
        return this.alarmSetTime;
    }

    public void setAlarmSetTime(java.util.Date alarmSetTime) {
        if ((alarmSetTime==null && this.alarmSetTime!=null) || (alarmSetTime != null && !alarmSetTime.equals(this.alarmSetTime))) {
            this.setModified(true);
        }
        this.alarmSetTime=alarmSetTime;
    }

    public ProtectionAssociationType getProtectionAssociationType() {
        return this.protectionAssociationType;
    }

    public void setProtectionAssociationType(ProtectionAssociationType protectionAssociationType) {
        if ((protectionAssociationType==null && this.protectionAssociationType!=null) || (protectionAssociationType != null && !protectionAssociationType.equals(this.protectionAssociationType))) {
            this.setModified(true);
        }
        this.protectionAssociationType=protectionAssociationType;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Resource)) return false;
        Resource other = (Resource) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.usageState, other.usageState)
                .append(this.lifecycleState, other.lifecycleState)
                .append(this.version, other.version)
                .append(this.category, other.category)
                .append(this.administrativeState, other.administrativeState)
                .append(this.operationalState, other.operationalState)
                .append(this.alarmSeverity, other.alarmSeverity)
                .append(this.alarmSetTime, other.alarmSetTime)
                .append(this.protectionAssociationType, other.protectionAssociationType)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(usageState)
                .append(lifecycleState)
                .append(version)
                .append(category)
                .append(administrativeState)
                .append(operationalState)
                .append(alarmSeverity)
                .append(alarmSetTime)
                .append(protectionAssociationType)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("usageState", this.usageState)
                .append("lifecycleState", this.lifecycleState)
                .append("version", this.version)
                .append("category", this.category)
                .append("administrativeState", this.administrativeState)
                .append("operationalState", this.operationalState)
                .append("alarmSeverity", this.alarmSeverity)
                .append("alarmSetTime", this.alarmSetTime)
                .append("protectionAssociationType", this.protectionAssociationType)
                .toString();
    }
}
