// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.numbermanagement;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.datatype.Neo4jDomainNodeObject;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashSet;
import java.util.Map;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.numbermanagement.Identifier.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.numbermanagement.Identifier")
@NodeEntity(
        label = "com.nokia.nsw.uiv.numbermanagement.Identifier"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.numbermanagement.Identifier"
)
public abstract class Identifier extends Neo4jDomainNodeObject {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[FREE, RESERVED, ASSIGNED, QUARANTINED, DISABLED]")
    private IdentifierState state;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date activationDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date quarantinedDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date stateUpdateDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Float basePrice;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String externalID;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private String createdInPool;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Integer priority;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(IdentifierPropertiesConverter.class)
    private Map<String,Object> properties = new UivHashMap<>();

    @JsonFilter("assignment")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.numbermanagement.Assignment}"
    )
    protected Assignment assignment;

    @JsonFilter("reservation")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.numbermanagement.Reservation}"
    )
    protected Reservation reservation;

    @JsonFilter("pool")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.numbermanagement.Pool}"
    )
    protected Pool pool;

    @JsonFilter("entity")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.Entity}"
    )
    protected Entity entity;

    public IdentifierState getState() {
        return this.state;
    }

    public void setState(IdentifierState state) {
        if ((state==null && this.state!=null) || (state != null && !state.equals(this.state))) {
            this.setModified(true);
        }
        this.state=state;
    }

    public java.util.Date getActivationDate() {
        return this.activationDate;
    }

    public void setActivationDate(java.util.Date activationDate) {
        if ((activationDate==null && this.activationDate!=null) || (activationDate != null && !activationDate.equals(this.activationDate))) {
            this.setModified(true);
        }
        this.activationDate=activationDate;
    }

    public java.util.Date getQuarantinedDate() {
        return this.quarantinedDate;
    }

    public void setQuarantinedDate(java.util.Date quarantinedDate) {
        if ((quarantinedDate==null && this.quarantinedDate!=null) || (quarantinedDate != null && !quarantinedDate.equals(this.quarantinedDate))) {
            this.setModified(true);
        }
        this.quarantinedDate=quarantinedDate;
    }

    public java.util.Date getStateUpdateDate() {
        return this.stateUpdateDate;
    }

    public void setStateUpdateDate(java.util.Date stateUpdateDate) {
        if ((stateUpdateDate==null && this.stateUpdateDate!=null) || (stateUpdateDate != null && !stateUpdateDate.equals(this.stateUpdateDate))) {
            this.setModified(true);
        }
        this.stateUpdateDate=stateUpdateDate;
    }

    public Float getBasePrice() {
        return this.basePrice;
    }

    public void setBasePrice(Float basePrice) {
        if ((basePrice==null && this.basePrice!=null) || (basePrice != null && !basePrice.equals(this.basePrice))) {
            this.setModified(true);
        }
        this.basePrice=basePrice;
    }

    public String getExternalID() {
        return this.externalID;
    }

    public void setExternalID(String externalID) {
        if ((externalID==null && this.externalID!=null) || (externalID != null && !externalID.equals(this.externalID))) {
            this.setModified(true);
        }
        this.externalID=externalID;
    }

    public String getCreatedInPool() {
        return this.createdInPool;
    }

    public void setCreatedInPool(String createdInPool) {
        if ((createdInPool==null && this.createdInPool!=null) || (createdInPool != null && !createdInPool.equals(this.createdInPool))) {
            this.setModified(true);
        }
        this.createdInPool=createdInPool;
    }

    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(Integer priority) {
        if ((priority==null && this.priority!=null) || (priority != null && !priority.equals(this.priority))) {
            this.setModified(true);
        }
        this.priority=priority;
    }

    public Map<String, Object> getProperties() {
        return this.properties;
    }

    public void setProperties(Map<String, Object> properties) {
        if ((properties==null && this.properties!=null) || (properties != null && !properties.equals(this.properties))) {
            this.setModified(true);
        }
        if (this.properties != null && properties != null && !(properties instanceof UivHashMap)) {
            this.properties.putAll(properties);
        }
        this.properties=properties;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Identifier)) return false;
        Identifier other = (Identifier) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.state, other.state)
                .append(this.activationDate, other.activationDate)
                .append(this.quarantinedDate, other.quarantinedDate)
                .append(this.stateUpdateDate, other.stateUpdateDate)
                .append(this.basePrice, other.basePrice)
                .append(this.externalID, other.externalID)
                .append(this.createdInPool, other.createdInPool)
                .append(this.priority, other.priority)
                .append(this.properties, other.properties)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(state)
                .append(activationDate)
                .append(quarantinedDate)
                .append(stateUpdateDate)
                .append(basePrice)
                .append(externalID)
                .append(createdInPool)
                .append(priority)
                .append(properties)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("state", this.state)
                .append("activationDate", this.activationDate)
                .append("quarantinedDate", this.quarantinedDate)
                .append("stateUpdateDate", this.stateUpdateDate)
                .append("basePrice", this.basePrice)
                .append("externalID", this.externalID)
                .append("createdInPool", this.createdInPool)
                .append("priority", this.priority)
                .append("properties", this.properties)
                .toString();
    }

    public Assignment getAssignment() {
        return this.assignment;
    }

    public void setAssignment(Assignment assignment) {
        this.setAssocModified(true);
        Assignment previous = this.assignment;
        this.assignment=assignment;
        if (null == assignment  && null != previous) {
            previous.setIdentifier(null);
        }
        if (null != assignment && (null == assignment.getIdentifier() || !assignment.getIdentifier().equals(this))) {
            this.set_type(this.get_type());
            assignment.setIdentifier(this);
        }
    }

    public Reservation getReservation() {
        return this.reservation;
    }

    public void setReservation(Reservation reservation) {
        this.setAssocModified(true);
        if (null == reservation && null != this.reservation && null != this.reservation.getIdentifier()) {
            this.reservation.getIdentifier().remove(this);
        }
        this.reservation=reservation;
        if (null != reservation && (null == reservation.getIdentifier() || !reservation.getIdentifier().contains(this))) {
            this.set_type(this.get_type());
            if (null == reservation.getIdentifier()) {
                reservation.setIdentifier(new HashSet<>());
            }
            reservation.addIdentifier(this);
        }
    }

    public Pool getPool() {
        return this.pool;
    }

    public void setPool(Pool pool) {
        this.setAssocModified(true);
        if (null == pool && null != this.pool && null != this.pool.getIdentifier()) {
            this.pool.getIdentifier().remove(this);
        }
        this.pool=pool;
        if (null != pool && (null == pool.getIdentifier() || !pool.getIdentifier().contains(this))) {
            this.set_type(this.get_type());
            if (null == pool.getIdentifier()) {
                pool.setIdentifier(new HashSet<>());
            }
            pool.addIdentifier(this);
        }
    }

    public Entity getEntity() {
        return this.entity;
    }

    public void setEntity(Entity entity) {
        this.setAssocModified(true);
        if (null == entity && null != this.entity && null != this.entity.getIdentifier()) {
            this.entity.getIdentifier().remove(this);
        }
        this.entity=entity;
        if (null != entity && (null == entity.getIdentifier() || !entity.getIdentifier().contains(this))) {
            this.set_type(this.get_type());
            if (null == entity.getIdentifier()) {
                entity.setIdentifier(new HashSet<>());
            }
            entity.addIdentifier(this);
        }
    }
}
