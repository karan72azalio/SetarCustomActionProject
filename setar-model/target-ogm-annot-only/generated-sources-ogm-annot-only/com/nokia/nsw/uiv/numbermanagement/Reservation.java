// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.numbermanagement;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.datatype.Neo4jDomainNodeObject;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.numbermanagement.Reservation.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.numbermanagement.Reservation")
@NodeEntity(
        label = "com.nokia.nsw.uiv.numbermanagement.Reservation"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.numbermanagement.Reservation"
)
public class Reservation extends Neo4jDomainNodeObject {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    private java.util.Date reservationDate;

    @JsonFilter("identifier")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Identifier]"
    )
    protected Set<Identifier> identifier = new HashSet<>();

    @JsonFilter("assignment")
    @Relationship(
            type = "IMPLEMENTS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Assignment]"
    )
    protected Set<Assignment> assignment = new HashSet<>();

    public java.util.Date getReservationDate() {
        return this.reservationDate;
    }

    public void setReservationDate(java.util.Date reservationDate) {
        if ((reservationDate==null && this.reservationDate!=null) || (reservationDate != null && !reservationDate.equals(this.reservationDate))) {
            this.setModified(true);
        }
        this.reservationDate=reservationDate;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Reservation)) return false;
        Reservation other = (Reservation) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.reservationDate, other.reservationDate)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(reservationDate)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("reservationDate", this.reservationDate)
                .toString();
    }

    public void addIdentifier(Identifier element) {
        this.setAssocModified(true);
        this.identifier.add(element);
        if (null != element && (null == element.getReservation() || !element.getReservation().equals(this))) {
            this.set_type(this.get_type());
            element.setReservation(this);
        }
    }

    public void removeIdentifier(Identifier element) {
        this.setAssocModified(true);
        if (null != element && null != this.identifier  && this.identifier.remove(element) && null != element.getReservation()) {
            element.setReservation(null);
        }
    }

    public Set<Identifier> getIdentifier() {
        return this.identifier;
    }

    public void setIdentifier(Set<Identifier> identifier) {
        this.setAssocModified(true);
        if (null != this.identifier) {
            List<Identifier> toDelete = new ArrayList<>(this.identifier);
            boolean setToNull = null == identifier || identifier.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(identifier);
            }
            for (Identifier each : toDelete) {
                each.setReservation(null);
            }
        }
        this.identifier=identifier;
        if (null != identifier) {
            for (Identifier each: identifier) {
                if (null != each && ( null == each.getReservation() || !each.getReservation().equals(this))) {
                    this.set_type(this.get_type());
                    each.setReservation(this);
                }
            }
        }
    }

    public void addAssignment(Assignment element) {
        this.setAssocModified(true);
        this.assignment.add(element);
        if (null != element && (null == element.getReservation() || !element.getReservation().equals(this))) {
            this.set_type(this.get_type());
            element.setReservation(this);
        }
    }

    public void removeAssignment(Assignment element) {
        this.setAssocModified(true);
        if (null != element && null != this.assignment  && this.assignment.remove(element) && null != element.getReservation()) {
            element.setReservation(null);
        }
    }

    public Set<Assignment> getAssignment() {
        return this.assignment;
    }

    public void setAssignment(Set<Assignment> assignment) {
        this.setAssocModified(true);
        if (null != this.assignment) {
            List<Assignment> toDelete = new ArrayList<>(this.assignment);
            boolean setToNull = null == assignment || assignment.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(assignment);
            }
            for (Assignment each : toDelete) {
                each.setReservation(null);
            }
        }
        this.assignment=assignment;
        if (null != assignment) {
            for (Assignment each: assignment) {
                if (null != each && ( null == each.getReservation() || !each.getReservation().equals(this))) {
                    this.set_type(this.get_type());
                    each.setReservation(this);
                }
            }
        }
    }
}
