// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.nokia.nsw.uiv.numbermanagement;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.nokia.nsw.uiv.annotation.Enum;
import com.nokia.nsw.uiv.datatype.Neo4jDomainNodeObject;
import com.nokia.nsw.uiv.datatype.UivHashMap;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.Index;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Properties;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.typeconversion.Convert;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.nokia.nsw.uiv.numbermanagement.Pool.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.nokia.nsw.uiv.numbermanagement.Pool")
@NodeEntity(
        label = "com.nokia.nsw.uiv.numbermanagement.Pool"
)
@Slf4j
@XmlType(
        name = "com.nokia.nsw.uiv.numbermanagement.Pool"
)
public class Pool extends Neo4jDomainNodeObject {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Enum("[ENABLED, DISABLED]")
    private PoolState state;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Index(
            unique = false
    )
    private String kind;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Long numberAvailable;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Long numberTotal;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Float price;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Long defaultQuarantineTimeOutInHrs;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    private Long defaultReservationTimeOutInHrs;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Index(
            unique = false
    )
    private Integer priority;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @Properties
    @Convert(PoolPropertiesConverter.class)
    private Map<String,Object> properties = new UivHashMap<>();

    @JsonFilter("identifier")
    @Relationship(
            type = "USES",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Identifier]"
    )
    protected Set<Identifier> identifier = new HashSet<>();

    @JsonFilter("childPool")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.numbermanagement.Pool]"
    )
    protected Set<Pool> childPool = new HashSet<>();

    @JsonFilter("parentPool")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.numbermanagement.Pool}"
    )
    protected Pool parentPool;

    @JsonFilter("entity")
    @Relationship(
            type = "USES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.nokia.nsw.uiv.model.common.Entity]"
    )
    protected Set<Entity> entity = new HashSet<>();

    public PoolState getState() {
        return this.state;
    }

    public void setState(PoolState state) {
        if ((state==null && this.state!=null) || (state != null && !state.equals(this.state))) {
            this.setModified(true);
        }
        this.state=state;
    }

    public String getKind() {
        return this.kind;
    }

    public void setKind(String kind) {
        if ((kind==null && this.kind!=null) || (kind != null && !kind.equals(this.kind))) {
            this.setModified(true);
        }
        this.kind=kind;
    }

    public Long getNumberAvailable() {
        return this.numberAvailable;
    }

    public void setNumberAvailable(Long numberAvailable) {
        if ((numberAvailable==null && this.numberAvailable!=null) || (numberAvailable != null && !numberAvailable.equals(this.numberAvailable))) {
            this.setModified(true);
        }
        this.numberAvailable=numberAvailable;
    }

    public Long getNumberTotal() {
        return this.numberTotal;
    }

    public void setNumberTotal(Long numberTotal) {
        if ((numberTotal==null && this.numberTotal!=null) || (numberTotal != null && !numberTotal.equals(this.numberTotal))) {
            this.setModified(true);
        }
        this.numberTotal=numberTotal;
    }

    public Float getPrice() {
        return this.price;
    }

    public void setPrice(Float price) {
        if ((price==null && this.price!=null) || (price != null && !price.equals(this.price))) {
            this.setModified(true);
        }
        this.price=price;
    }

    public Long getDefaultQuarantineTimeOutInHrs() {
        return this.defaultQuarantineTimeOutInHrs;
    }

    public void setDefaultQuarantineTimeOutInHrs(Long defaultQuarantineTimeOutInHrs) {
        if ((defaultQuarantineTimeOutInHrs==null && this.defaultQuarantineTimeOutInHrs!=null) || (defaultQuarantineTimeOutInHrs != null && !defaultQuarantineTimeOutInHrs.equals(this.defaultQuarantineTimeOutInHrs))) {
            this.setModified(true);
        }
        this.defaultQuarantineTimeOutInHrs=defaultQuarantineTimeOutInHrs;
    }

    public Long getDefaultReservationTimeOutInHrs() {
        return this.defaultReservationTimeOutInHrs;
    }

    public void setDefaultReservationTimeOutInHrs(Long defaultReservationTimeOutInHrs) {
        if ((defaultReservationTimeOutInHrs==null && this.defaultReservationTimeOutInHrs!=null) || (defaultReservationTimeOutInHrs != null && !defaultReservationTimeOutInHrs.equals(this.defaultReservationTimeOutInHrs))) {
            this.setModified(true);
        }
        this.defaultReservationTimeOutInHrs=defaultReservationTimeOutInHrs;
    }

    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(Integer priority) {
        if ((priority==null && this.priority!=null) || (priority != null && !priority.equals(this.priority))) {
            this.setModified(true);
        }
        this.priority=priority;
    }

    public Map<String, Object> getProperties() {
        return this.properties;
    }

    public void setProperties(Map<String, Object> properties) {
        if ((properties==null && this.properties!=null) || (properties != null && !properties.equals(this.properties))) {
            this.setModified(true);
        }
        if (this.properties != null && properties != null && !(properties instanceof UivHashMap)) {
            this.properties.putAll(properties);
        }
        this.properties=properties;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Pool)) return false;
        Pool other = (Pool) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.state, other.state)
                .append(this.kind, other.kind)
                .append(this.numberAvailable, other.numberAvailable)
                .append(this.numberTotal, other.numberTotal)
                .append(this.price, other.price)
                .append(this.defaultQuarantineTimeOutInHrs, other.defaultQuarantineTimeOutInHrs)
                .append(this.defaultReservationTimeOutInHrs, other.defaultReservationTimeOutInHrs)
                .append(this.priority, other.priority)
                .append(this.properties, other.properties)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(state)
                .append(kind)
                .append(numberAvailable)
                .append(numberTotal)
                .append(price)
                .append(defaultQuarantineTimeOutInHrs)
                .append(defaultReservationTimeOutInHrs)
                .append(priority)
                .append(properties)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("state", this.state)
                .append("kind", this.kind)
                .append("numberAvailable", this.numberAvailable)
                .append("numberTotal", this.numberTotal)
                .append("price", this.price)
                .append("defaultQuarantineTimeOutInHrs", this.defaultQuarantineTimeOutInHrs)
                .append("defaultReservationTimeOutInHrs", this.defaultReservationTimeOutInHrs)
                .append("priority", this.priority)
                .append("properties", this.properties)
                .toString();
    }

    public void addIdentifier(Identifier element) {
        this.setAssocModified(true);
        this.identifier.add(element);
        if (null != element && (null == element.getPool() || !element.getPool().equals(this))) {
            this.set_type(this.get_type());
            element.setPool(this);
        }
    }

    public void removeIdentifier(Identifier element) {
        this.setAssocModified(true);
        if (null != element && null != this.identifier  && this.identifier.remove(element) && null != element.getPool()) {
            element.setPool(null);
        }
    }

    public Set<Identifier> getIdentifier() {
        return this.identifier;
    }

    public void setIdentifier(Set<Identifier> identifier) {
        this.setAssocModified(true);
        if (null != this.identifier) {
            List<Identifier> toDelete = new ArrayList<>(this.identifier);
            boolean setToNull = null == identifier || identifier.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(identifier);
            }
            for (Identifier each : toDelete) {
                each.setPool(null);
            }
        }
        this.identifier=identifier;
        if (null != identifier) {
            for (Identifier each: identifier) {
                if (null != each && ( null == each.getPool() || !each.getPool().equals(this))) {
                    this.set_type(this.get_type());
                    each.setPool(this);
                }
            }
        }
    }

    public void addChildPool(Pool element) {
        this.setAssocModified(true);
        this.childPool.add(element);
        if (null != element && (null == element.getParentPool() || !element.getParentPool().equals(this))) {
            this.set_type(this.get_type());
            element.setParentPool(this);
        }
    }

    public void removeChildPool(Pool element) {
        this.setAssocModified(true);
        if (null != element && null != this.childPool  && this.childPool.remove(element) && null != element.getParentPool()) {
            element.setParentPool(null);
        }
    }

    public Set<Pool> getChildPool() {
        return this.childPool;
    }

    public void setChildPool(Set<Pool> childPool) {
        this.setAssocModified(true);
        if (null != this.childPool) {
            List<Pool> toDelete = new ArrayList<>(this.childPool);
            boolean setToNull = null == childPool || childPool.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(childPool);
            }
            for (Pool each : toDelete) {
                each.setParentPool(null);
            }
        }
        this.childPool=childPool;
        if (null != childPool) {
            for (Pool each: childPool) {
                if (null != each && ( null == each.getParentPool() || !each.getParentPool().equals(this))) {
                    this.set_type(this.get_type());
                    each.setParentPool(this);
                }
            }
        }
    }

    public Pool getParentPool() {
        return this.parentPool;
    }

    public void setParentPool(Pool parentPool) {
        this.setAssocModified(true);
        if (null == parentPool && null != this.parentPool && null != this.parentPool.getChildPool()) {
            this.parentPool.getChildPool().remove(this);
        }
        this.parentPool=parentPool;
        if (null != parentPool && (null == parentPool.getChildPool() || !parentPool.getChildPool().contains(this))) {
            this.set_type(this.get_type());
            if (null == parentPool.getChildPool()) {
                parentPool.setChildPool(new HashSet<>());
            }
            parentPool.addChildPool(this);
        }
    }

    public void addEntity(Entity element) {
        this.setAssocModified(true);
        this.entity.add(element);
        if (null != element && (null == element.getPool() || !element.getPool().contains(this))) {
            this.set_type(this.get_type());
            if (null == element.getPool()) {
                element.setPool(new HashSet<>());
            }
            element.addPool(this);
        }
    }

    public void removeEntity(Entity element) {
        this.setAssocModified(true);
        if (null != element && null != this.entity  && this.entity.remove(element) && null != element.getPool() && element.getPool().contains(this)) {
            element.getPool().remove(this);
        }
    }

    public Set<Entity> getEntity() {
        return this.entity;
    }

    public void setEntity(Set<Entity> entity) {
        this.setAssocModified(true);
        if (null != this.entity) {
            List<Entity> toDelete = new ArrayList<>(this.entity);
            boolean setToNull = null == entity || entity.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(entity);
            }
            for (Entity each : toDelete) {
                if (null != each.getPool()) {
                    each.getPool().remove(this);
                }
            }
        }
        this.entity=entity;
        if (null != entity) {
            for (Entity each: entity) {
                if (null != each && (null == each.getPool() || !each.getPool().contains(this))) {
                    this.set_type(this.get_type());
                    if (null == each.getPool()) {
                        each.setPool(new HashSet<>());
                    }
                    each.addPool(this);
                }
            }
        }
    }
}
