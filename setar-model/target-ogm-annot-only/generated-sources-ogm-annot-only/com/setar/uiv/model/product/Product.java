// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.setar.uiv.model.product;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.constants.FeatureFlag;
import com.nokia.nsw.uiv.datatype.SchemaSpecification;
import com.nokia.nsw.uiv.exception.ModificationNotAllowedException;
import com.nokia.nsw.uiv.framework.context.UivSpringContextAware;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.common.Entity;
import com.nokia.nsw.uiv.model.common.party.Customer;
import com.nokia.nsw.uiv.model.service.Subscription;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import org.neo4j.ogm.annotation.Transient;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.setar.uiv.model.product.Product.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.setar.uiv.model.product.Product")
@NodeEntity(
        label = "com.setar.uiv.model.product.Product"
)
@Slf4j
@XmlType(
        name = "com.setar.uiv.model.product.Product"
)
public class Product extends Entity {
    @JsonView(UivJsonViews.TmfView.class)
    @Transient
    @Valid
    private SchemaSpecification productSpecification;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public Integer autoRenewalFlag;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String catalogItemName;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String catalogItemVersion;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public Integer lifecyclePeriod;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String lifecycleUnit;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public Integer priority;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public Integer promotion;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String promotionID;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String renewalFee;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String transactionId;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String transactionType;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    public Date validEndDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    public Date validStartDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String waiveFee;

    @JsonFilter("subscription")
    @Relationship(
            type = "FOR",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.service.Subscription}"
    )
    protected Subscription subscription;

    @JsonFilter("containedCfs")
    @Relationship(
            type = "CONTAINS",
            direction = "OUTGOING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "[com.setar.uiv.model.product.CustomerFacingService]"
    )
    protected Set<CustomerFacingService> containedCfs = new HashSet<>();

    @JsonFilter("customer")
    @Relationship(
            type = "SUBSCRIBES",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.nokia.nsw.uiv.model.common.party.Customer}"
    )
    protected Customer customer;

    public SchemaSpecification getProductSpecification() {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (this.getKind() != null && Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            this.productSpecification = new SchemaSpecification();
            this.productSpecification.setId(this.getKind());
            this.productSpecification.setName(this.getKind());
            this.productSpecification.setReferredType(this.getKind());
            this.productSpecification.setVersion(this.getSchemaVersion());
        }
        return this.productSpecification;
    }

    public void setProductSpecification(SchemaSpecification productSpecification) throws
            ModificationNotAllowedException {
        FeatureFlag featureFlag = UivSpringContextAware.getApplicationContext().getBean(FeatureFlag.class);
        if (Boolean.parseBoolean(featureFlag.getTmfEnabled())) {
            if (null != productSpecification && null != productSpecification.getId()) {
                if(null == this.getKind()) {
                    this.setSpecification(productSpecification);
                    this.setKind(productSpecification.getId());
                }
                else if (!this.getKind().equals(productSpecification.getId())) {
                    throw new ModificationNotAllowedException("productSpecification modification not allowed");
                }
            }
            this.productSpecification = productSpecification;
        }
    }

    public Integer getAutoRenewalFlag() {
        return this.autoRenewalFlag;
    }

    public void setAutoRenewalFlag(Integer autoRenewalFlag) {
        if ((autoRenewalFlag==null && this.autoRenewalFlag!=null) || (autoRenewalFlag != null && !autoRenewalFlag.equals(this.autoRenewalFlag))) {
            this.setModified(true);
        }
        this.autoRenewalFlag=autoRenewalFlag;
    }

    public String getCatalogItemName() {
        return this.catalogItemName;
    }

    public void setCatalogItemName(String catalogItemName) {
        if ((catalogItemName==null && this.catalogItemName!=null) || (catalogItemName != null && !catalogItemName.equals(this.catalogItemName))) {
            this.setModified(true);
        }
        this.catalogItemName=catalogItemName;
    }

    public String getCatalogItemVersion() {
        return this.catalogItemVersion;
    }

    public void setCatalogItemVersion(String catalogItemVersion) {
        if ((catalogItemVersion==null && this.catalogItemVersion!=null) || (catalogItemVersion != null && !catalogItemVersion.equals(this.catalogItemVersion))) {
            this.setModified(true);
        }
        this.catalogItemVersion=catalogItemVersion;
    }

    public Integer getLifecyclePeriod() {
        return this.lifecyclePeriod;
    }

    public void setLifecyclePeriod(Integer lifecyclePeriod) {
        if ((lifecyclePeriod==null && this.lifecyclePeriod!=null) || (lifecyclePeriod != null && !lifecyclePeriod.equals(this.lifecyclePeriod))) {
            this.setModified(true);
        }
        this.lifecyclePeriod=lifecyclePeriod;
    }

    public String getLifecycleUnit() {
        return this.lifecycleUnit;
    }

    public void setLifecycleUnit(String lifecycleUnit) {
        if ((lifecycleUnit==null && this.lifecycleUnit!=null) || (lifecycleUnit != null && !lifecycleUnit.equals(this.lifecycleUnit))) {
            this.setModified(true);
        }
        this.lifecycleUnit=lifecycleUnit;
    }

    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(Integer priority) {
        if ((priority==null && this.priority!=null) || (priority != null && !priority.equals(this.priority))) {
            this.setModified(true);
        }
        this.priority=priority;
    }

    public Integer getPromotion() {
        return this.promotion;
    }

    public void setPromotion(Integer promotion) {
        if ((promotion==null && this.promotion!=null) || (promotion != null && !promotion.equals(this.promotion))) {
            this.setModified(true);
        }
        this.promotion=promotion;
    }

    public String getPromotionID() {
        return this.promotionID;
    }

    public void setPromotionID(String promotionID) {
        if ((promotionID==null && this.promotionID!=null) || (promotionID != null && !promotionID.equals(this.promotionID))) {
            this.setModified(true);
        }
        this.promotionID=promotionID;
    }

    public String getRenewalFee() {
        return this.renewalFee;
    }

    public void setRenewalFee(String renewalFee) {
        if ((renewalFee==null && this.renewalFee!=null) || (renewalFee != null && !renewalFee.equals(this.renewalFee))) {
            this.setModified(true);
        }
        this.renewalFee=renewalFee;
    }

    public String getTransactionId() {
        return this.transactionId;
    }

    public void setTransactionId(String transactionId) {
        if ((transactionId==null && this.transactionId!=null) || (transactionId != null && !transactionId.equals(this.transactionId))) {
            this.setModified(true);
        }
        this.transactionId=transactionId;
    }

    public String getTransactionType() {
        return this.transactionType;
    }

    public void setTransactionType(String transactionType) {
        if ((transactionType==null && this.transactionType!=null) || (transactionType != null && !transactionType.equals(this.transactionType))) {
            this.setModified(true);
        }
        this.transactionType=transactionType;
    }

    public Date getValidEndDate() {
        return this.validEndDate;
    }

    public void setValidEndDate(Date validEndDate) {
        if ((validEndDate==null && this.validEndDate!=null) || (validEndDate != null && !validEndDate.equals(this.validEndDate))) {
            this.setModified(true);
        }
        this.validEndDate=validEndDate;
    }

    public Date getValidStartDate() {
        return this.validStartDate;
    }

    public void setValidStartDate(Date validStartDate) {
        if ((validStartDate==null && this.validStartDate!=null) || (validStartDate != null && !validStartDate.equals(this.validStartDate))) {
            this.setModified(true);
        }
        this.validStartDate=validStartDate;
    }

    public String getWaiveFee() {
        return this.waiveFee;
    }

    public void setWaiveFee(String waiveFee) {
        if ((waiveFee==null && this.waiveFee!=null) || (waiveFee != null && !waiveFee.equals(this.waiveFee))) {
            this.setModified(true);
        }
        this.waiveFee=waiveFee;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof Product)) return false;
        Product other = (Product) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.autoRenewalFlag, other.autoRenewalFlag)
                .append(this.catalogItemName, other.catalogItemName)
                .append(this.catalogItemVersion, other.catalogItemVersion)
                .append(this.lifecyclePeriod, other.lifecyclePeriod)
                .append(this.lifecycleUnit, other.lifecycleUnit)
                .append(this.priority, other.priority)
                .append(this.promotion, other.promotion)
                .append(this.promotionID, other.promotionID)
                .append(this.renewalFee, other.renewalFee)
                .append(this.transactionId, other.transactionId)
                .append(this.transactionType, other.transactionType)
                .append(this.validEndDate, other.validEndDate)
                .append(this.validStartDate, other.validStartDate)
                .append(this.waiveFee, other.waiveFee)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(autoRenewalFlag)
                .append(catalogItemName)
                .append(catalogItemVersion)
                .append(lifecyclePeriod)
                .append(lifecycleUnit)
                .append(priority)
                .append(promotion)
                .append(promotionID)
                .append(renewalFee)
                .append(transactionId)
                .append(transactionType)
                .append(validEndDate)
                .append(validStartDate)
                .append(waiveFee)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("autoRenewalFlag", this.autoRenewalFlag)
                .append("catalogItemName", this.catalogItemName)
                .append("catalogItemVersion", this.catalogItemVersion)
                .append("lifecyclePeriod", this.lifecyclePeriod)
                .append("lifecycleUnit", this.lifecycleUnit)
                .append("priority", this.priority)
                .append("promotion", this.promotion)
                .append("promotionID", this.promotionID)
                .append("renewalFee", this.renewalFee)
                .append("transactionId", this.transactionId)
                .append("transactionType", this.transactionType)
                .append("validEndDate", this.validEndDate)
                .append("validStartDate", this.validStartDate)
                .append("waiveFee", this.waiveFee)
                .toString();
    }

    public Subscription getSubscription() {
        return this.subscription;
    }

    public void setSubscription(Subscription subscription) {
        this.setAssocModified(true);
        if (null == subscription && null != this.subscription && null != this.subscription.getProduct()) {
            this.subscription.getProduct().remove(this);
        }
        this.subscription=subscription;
        if (null != subscription && (null == subscription.getProduct() || !subscription.getProduct().contains(this))) {
            this.set_type(this.get_type());
            if (null == subscription.getProduct()) {
                subscription.setProduct(new HashSet<>());
            }
            subscription.addProduct(this);
        }
    }

    public void addContainedCfs(CustomerFacingService element) {
        this.setAssocModified(true);
        this.containedCfs.add(element);
        if (null != element && (null == element.getContainingProduct() || !element.getContainingProduct().equals(this))) {
            this.set_type(this.get_type());
            element.setContainingProduct(this);
        }
    }

    public void removeContainedCfs(CustomerFacingService element) {
        this.setAssocModified(true);
        if (null != element && null != this.containedCfs  && this.containedCfs.remove(element) && null != element.getContainingProduct()) {
            element.setContainingProduct(null);
        }
    }

    public Set<CustomerFacingService> getContainedCfs() {
        return this.containedCfs;
    }

    public void setContainedCfs(Set<CustomerFacingService> containedCfs) {
        this.setAssocModified(true);
        if (null != this.containedCfs) {
            List<CustomerFacingService> toDelete = new ArrayList<>(this.containedCfs);
            boolean setToNull = null == containedCfs || containedCfs.isEmpty();
            if (!setToNull)  {
                toDelete.removeAll(containedCfs);
            }
            for (CustomerFacingService each : toDelete) {
                each.setContainingProduct(null);
            }
        }
        this.containedCfs=containedCfs;
        if (null != containedCfs) {
            for (CustomerFacingService each: containedCfs) {
                if (null != each && ( null == each.getContainingProduct() || !each.getContainingProduct().equals(this))) {
                    this.set_type(this.get_type());
                    each.setContainingProduct(this);
                }
            }
        }
    }

    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.setAssocModified(true);
        if (null == customer && null != this.customer && null != this.customer.getProduct()) {
            this.customer.getProduct().remove(this);
        }
        this.customer=customer;
        if (null != customer && (null == customer.getProduct() || !customer.getProduct().contains(this))) {
            this.set_type(this.get_type());
            if (null == customer.getProduct()) {
                customer.setProduct(new HashSet<>());
            }
            customer.addProduct(this);
        }
    }
}
