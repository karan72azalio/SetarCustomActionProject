// This source file was generated by Unified Inventory CodeGen, Please DO NOT modify this file.
package com.setar.uiv.model.product;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.nokia.nsw.uiv.jackson.UivDateDeserializer;
import com.nokia.nsw.uiv.jackson.UivDateSerializer;
import com.nokia.nsw.uiv.jackson.UivJsonViews;
import com.nokia.nsw.uiv.model.service.Service;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import java.util.HashSet;
import javax.xml.bind.annotation.XmlType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        defaultImpl = com.setar.uiv.model.product.ResourceFacingService.class,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        visible = true,
        property = "@type"
)
@JsonFilter("com.setar.uiv.model.product.ResourceFacingService")
@NodeEntity(
        label = "com.setar.uiv.model.product.ResourceFacingService"
)
@Slf4j
@XmlType(
        name = "com.setar.uiv.model.product.ResourceFacingService"
)
public class ResourceFacingService extends Service {
    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    @JsonSerialize(
            using = UivDateSerializer.class
    )
    @JsonDeserialize(
            using = UivDateDeserializer.class
    )
    public Date activationDate;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String catalogItemName;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String catalogItemVersion;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String transactionId;

    @JsonView({
            UivJsonViews.WriteView.class,
            UivJsonViews.ReadView.class
    })
    public String transactionType;

    @JsonFilter("containingCfs")
    @Relationship(
            type = "CONTAINS",
            direction = "INCOMING"
    )
    @ApiModelProperty(
            dataType = "java.lang.String",
            allowableValues = "{com.setar.uiv.model.product.CustomerFacingService}"
    )
    protected CustomerFacingService containingCfs;

    public Date getActivationDate() {
        return this.activationDate;
    }

    public void setActivationDate(Date activationDate) {
        if ((activationDate==null && this.activationDate!=null) || (activationDate != null && !activationDate.equals(this.activationDate))) {
            this.setModified(true);
        }
        this.activationDate=activationDate;
    }

    public String getCatalogItemName() {
        return this.catalogItemName;
    }

    public void setCatalogItemName(String catalogItemName) {
        if ((catalogItemName==null && this.catalogItemName!=null) || (catalogItemName != null && !catalogItemName.equals(this.catalogItemName))) {
            this.setModified(true);
        }
        this.catalogItemName=catalogItemName;
    }

    public String getCatalogItemVersion() {
        return this.catalogItemVersion;
    }

    public void setCatalogItemVersion(String catalogItemVersion) {
        if ((catalogItemVersion==null && this.catalogItemVersion!=null) || (catalogItemVersion != null && !catalogItemVersion.equals(this.catalogItemVersion))) {
            this.setModified(true);
        }
        this.catalogItemVersion=catalogItemVersion;
    }

    public String getTransactionId() {
        return this.transactionId;
    }

    public void setTransactionId(String transactionId) {
        if ((transactionId==null && this.transactionId!=null) || (transactionId != null && !transactionId.equals(this.transactionId))) {
            this.setModified(true);
        }
        this.transactionId=transactionId;
    }

    public String getTransactionType() {
        return this.transactionType;
    }

    public void setTransactionType(String transactionType) {
        if ((transactionType==null && this.transactionType!=null) || (transactionType != null && !transactionType.equals(this.transactionType))) {
            this.setModified(true);
        }
        this.transactionType=transactionType;
    }

    @Override
    public boolean equals(Object otherObj) {
        if (this == otherObj) return true;
        if (!(otherObj instanceof ResourceFacingService)) return false;
        ResourceFacingService other = (ResourceFacingService) otherObj;
        if (null != this.getUuid() && this.getUuid().equals(other.getUuid())) {
            return true;
        }
        return new EqualsBuilder().append(this.activationDate, other.activationDate)
                .append(this.catalogItemName, other.catalogItemName)
                .append(this.catalogItemVersion, other.catalogItemVersion)
                .append(this.transactionId, other.transactionId)
                .append(this.transactionType, other.transactionType)
                .isEquals() && super.equals(otherObj);
    }

    @Override
    public int hashCode() {
        if (null != this.getUuid()) {
            return new HashCodeBuilder(17, 37).append(this.getUuid()).toHashCode();
        }
        return new HashCodeBuilder(17,37).append(activationDate)
                .append(catalogItemName)
                .append(catalogItemVersion)
                .append(transactionId)
                .append(transactionType)
                .appendSuper(super.hashCode()).toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("activationDate", this.activationDate)
                .append("catalogItemName", this.catalogItemName)
                .append("catalogItemVersion", this.catalogItemVersion)
                .append("transactionId", this.transactionId)
                .append("transactionType", this.transactionType)
                .toString();
    }

    public CustomerFacingService getContainingCfs() {
        return this.containingCfs;
    }

    public void setContainingCfs(CustomerFacingService containingCfs) {
        this.setAssocModified(true);
        if (null == containingCfs && null != this.containingCfs && null != this.containingCfs.getContainedRfs()) {
            this.containingCfs.getContainedRfs().remove(this);
        }
        this.containingCfs=containingCfs;
        if (null != containingCfs && (null == containingCfs.getContainedRfs() || !containingCfs.getContainedRfs().contains(this))) {
            this.set_type(this.get_type());
            if (null == containingCfs.getContainedRfs()) {
                containingCfs.setContainedRfs(new HashSet<>());
            }
            containingCfs.addContainedRfs(this);
        }
    }
}
